{
  "version": 3,
  "sources": ["../../fflate/esm/browser.js", "../../mmd-parser/build/mmdparser.module.js", "../../ktx-parse/src/constants.ts", "../../ktx-parse/src/container.ts", "../../ktx-parse/src/buffer-reader.ts", "../../ktx-parse/src/constants-internal.ts", "../../ktx-parse/src/util.ts", "../../ktx-parse/src/read.ts", "../../ktx-parse/src/write.ts", "../../zstddec/zstddec.ts"],
  "sourcesContent": ["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], { type: 'text/javascript' }))));\n    w.onerror = function (e) { return cb(e.error, null); };\n    w.onmessage = function (e) { return cb(null, e.data); };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i)\n        ++l[cd[i] - 1];\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p / 8) | 0) + (p & 7 && 1); };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && !st.l && sl < 5))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            st.f = final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                throw 'invalid block type';\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n            if (!c)\n                throw 'invalid length/literal';\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    throw 'invalid distance';\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e < s) {\n                // write full block\n                pos = wfblk(w, pos, dat.subarray(i, e));\n            }\n            else {\n                // write final block\n                w[i] = lst;\n                pos = wfblk(w, pos, dat.subarray(i, s));\n            }\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (t)\n            throw 'stream finished';\n        if (!strm.ondata)\n            throw 'no stream handler';\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        throw 'invalid gzip data';\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        throw 'invalid zlib data';\n    if (d[1] & 32)\n        throw 'invalid zlib data: preset dictionaries not supported';\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                throw 'invalid gzip stream';\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                throw 'invalid zlib stream';\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no stream handler';\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k;\n        if (val instanceof u8)\n            t[n] = [val, o];\n        else if (Array.isArray(val))\n            t[n] = [val[0], mrg(o, val[1])];\n        else\n            fltn(val, n + '/', t, o);\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    throw 'invalid utf-8 data';\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            throw 'stream finished';\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                throw 'invalid utf-8 data';\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        if (this.d)\n            throw 'stream finished';\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            throw 'invalid utf-8 data';\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                throw 'extra field too long';\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        throw 'date not in range 1980-2099';\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback - add to ZIP archive before pushing';\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (this.d & 2)\n            throw 'stream finished';\n        var f = strToU8(file.filename), fl = f.length;\n        var com = file.comment, o = com && strToU8(com);\n        var u = fl != file.filename.length || (o && (com.length != o.length));\n        var hl = fl + exfl(file.extra) + 30;\n        if (fl > 65535)\n            throw 'filename too long';\n        var header = new u8(hl);\n        wzh(header, 0, file, f, u);\n        var chks = [header];\n        var pAll = function () {\n            for (var _i = 0, chks_1 = chks; _i < chks_1.length; _i++) {\n                var chk = chks_1[_i];\n                _this_1.ondata(null, chk, false);\n            }\n            chks = [];\n        };\n        var tr = this.d;\n        this.d = 0;\n        var ind = this.u.length;\n        var uf = mrg(file, {\n            f: f,\n            u: u,\n            o: o,\n            t: function () {\n                if (file.terminate)\n                    file.terminate();\n            },\n            r: function () {\n                pAll();\n                if (tr) {\n                    var nxt = _this_1.u[ind + 1];\n                    if (nxt)\n                        nxt.r();\n                    else\n                        _this_1.d = 1;\n                }\n                tr = 1;\n            }\n        });\n        var cl = 0;\n        file.ondata = function (err, dat, final) {\n            if (err) {\n                _this_1.ondata(err, dat, final);\n                _this_1.terminate();\n            }\n            else {\n                cl += dat.length;\n                chks.push(dat);\n                if (final) {\n                    var dd = new u8(16);\n                    wbytes(dd, 0, 0x8074B50);\n                    wbytes(dd, 4, file.crc);\n                    wbytes(dd, 8, cl);\n                    wbytes(dd, 12, file.size);\n                    chks.push(dd);\n                    uf.c = cl, uf.b = hl + cl + 16, uf.crc = file.crc, uf.size = file.size;\n                    if (tr)\n                        uf.r();\n                    tr = 1;\n                }\n                else if (tr)\n                    pAll();\n            }\n        };\n        this.u.push(uf);\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            if (this.d & 1)\n                throw 'stream finishing';\n            throw 'stream finished';\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cb(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cb(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl('filename too long', null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            throw 'filename too long';\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, data, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            throw 'no callback';\n        if (!this.p)\n            throw 'stream finished';\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_2 = [];\n                        this_1.k.unshift(chks_2);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    throw 'no callback';\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        throw 'unknown compression type ' + cmp_1;\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_3 = chks_2; _i < chks_3.length; _i++) {\n                                        var dat = chks_3[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_2 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                throw 'invalid zip file';\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\n/**\n * Asynchronously decompresses a ZIP archive\n * @param data The raw compressed ZIP file\n * @param cb The callback to call with the decompressed files\n * @returns A function that can be used to immediately terminate the unzipping\n */\nexport function unzip(data, cb) {\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cb('invalid zip file', null);\n            return;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (!lft)\n        cb(null, {});\n    var c = lft;\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50) {\n            cb('invalid zip file', null);\n            return;\n        }\n        c = lft = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var _loop_3 = function (i) {\n        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                files[fn] = d;\n                if (!--lft)\n                    cb(null, files);\n            }\n        };\n        if (!c_1)\n            cbl(null, slc(data, b, b + sc));\n        else if (c_1 == 8) {\n            var infl = data.subarray(b, b + sc);\n            if (sc < 320000) {\n                try {\n                    cbl(null, inflateSync(infl, new u8(su)));\n                }\n                catch (e) {\n                    cbl(e, null);\n                }\n            }\n            else\n                term.push(inflate(infl, { size: su }, cbl));\n        }\n        else\n            cbl('unknown compression type ' + c_1, null);\n    };\n    for (var i = 0; i < c; ++i) {\n        _loop_3(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @returns The decompressed files\n */\nexport function unzipSync(data) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            throw 'invalid zip file';\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            throw 'invalid zip file';\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!c_2)\n            files[fn] = slc(data, b, b + sc);\n        else if (c_2 == 8)\n            files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n        else\n            throw 'unknown compression type ' + c_2;\n    }\n    return files;\n}\n", "/**\n * @author Takahiro / https://github.com/takahirox\n *\n * Simple CharsetEncoder.\n */\n\nfunction CharsetEncoder() {\n}\n\n/*\n * Converts from Shift_JIS Uint8Array data to Unicode strings.\n */\nCharsetEncoder.prototype.s2u = function(uint8Array) {\n  var t = this.s2uTable;\n  var str = '';\n  var p = 0;\n\n  while(p < uint8Array.length) {\n    var key = uint8Array[p++];\n\n    if(! ((key >= 0x00 && key <= 0x7e) ||\n          (key >= 0xa1 && key <= 0xdf)) &&\n       p < uint8Array.length) {\n      key = (key << 8) | uint8Array[p++];\n    }\n\n    if(t[key] === undefined) {\n      console.error('unknown char code ' + key + '.');\n      return str;\n    }\n\n    str += String.fromCharCode(t[key]);\n  }\n\n  return str;\n};\n\nCharsetEncoder.prototype.s2uTable = {\n0:0,\n1:1,\n2:2,\n3:3,\n4:4,\n5:5,\n6:6,\n7:7,\n8:8,\n9:9,\n10:10,\n11:11,\n12:12,\n13:13,\n14:14,\n15:15,\n16:16,\n17:17,\n18:18,\n19:19,\n20:20,\n21:21,\n22:22,\n23:23,\n24:24,\n25:25,\n26:26,\n27:27,\n28:28,\n29:29,\n30:30,\n31:31,\n32:32,\n33:33,\n34:34,\n35:35,\n36:36,\n37:37,\n38:38,\n39:39,\n40:40,\n41:41,\n42:42,\n43:43,\n44:44,\n45:45,\n46:46,\n47:47,\n48:48,\n49:49,\n50:50,\n51:51,\n52:52,\n53:53,\n54:54,\n55:55,\n56:56,\n57:57,\n58:58,\n59:59,\n60:60,\n61:61,\n62:62,\n63:63,\n64:64,\n65:65,\n66:66,\n67:67,\n68:68,\n69:69,\n70:70,\n71:71,\n72:72,\n73:73,\n74:74,\n75:75,\n76:76,\n77:77,\n78:78,\n79:79,\n80:80,\n81:81,\n82:82,\n83:83,\n84:84,\n85:85,\n86:86,\n87:87,\n88:88,\n89:89,\n90:90,\n91:91,\n92:92,\n93:93,\n94:94,\n95:95,\n96:96,\n97:97,\n98:98,\n99:99,\n100:100,\n101:101,\n102:102,\n103:103,\n104:104,\n105:105,\n106:106,\n107:107,\n108:108,\n109:109,\n110:110,\n111:111,\n112:112,\n113:113,\n114:114,\n115:115,\n116:116,\n117:117,\n118:118,\n119:119,\n120:120,\n121:121,\n122:122,\n123:123,\n124:124,\n125:125,\n126:126,\n161:65377,\n162:65378,\n163:65379,\n164:65380,\n165:65381,\n166:65382,\n167:65383,\n168:65384,\n169:65385,\n170:65386,\n171:65387,\n172:65388,\n173:65389,\n174:65390,\n175:65391,\n176:65392,\n177:65393,\n178:65394,\n179:65395,\n180:65396,\n181:65397,\n182:65398,\n183:65399,\n184:65400,\n185:65401,\n186:65402,\n187:65403,\n188:65404,\n189:65405,\n190:65406,\n191:65407,\n192:65408,\n193:65409,\n194:65410,\n195:65411,\n196:65412,\n197:65413,\n198:65414,\n199:65415,\n200:65416,\n201:65417,\n202:65418,\n203:65419,\n204:65420,\n205:65421,\n206:65422,\n207:65423,\n208:65424,\n209:65425,\n210:65426,\n211:65427,\n212:65428,\n213:65429,\n214:65430,\n215:65431,\n216:65432,\n217:65433,\n218:65434,\n219:65435,\n220:65436,\n221:65437,\n222:65438,\n223:65439,\n33088:12288,\n33089:12289,\n33090:12290,\n33091:65292,\n33092:65294,\n33093:12539,\n33094:65306,\n33095:65307,\n33096:65311,\n33097:65281,\n33098:12443,\n33099:12444,\n33100:180,\n33101:65344,\n33102:168,\n33103:65342,\n33104:65507,\n33105:65343,\n33106:12541,\n33107:12542,\n33108:12445,\n33109:12446,\n33110:12291,\n33111:20189,\n33112:12293,\n33113:12294,\n33114:12295,\n33115:12540,\n33116:8213,\n33117:8208,\n33118:65295,\n33119:65340,\n33120:65374,\n33121:8741,\n33122:65372,\n33123:8230,\n33124:8229,\n33125:8216,\n33126:8217,\n33127:8220,\n33128:8221,\n33129:65288,\n33130:65289,\n33131:12308,\n33132:12309,\n33133:65339,\n33134:65341,\n33135:65371,\n33136:65373,\n33137:12296,\n33138:12297,\n33139:12298,\n33140:12299,\n33141:12300,\n33142:12301,\n33143:12302,\n33144:12303,\n33145:12304,\n33146:12305,\n33147:65291,\n33148:65293,\n33149:177,\n33150:215,\n33152:247,\n33153:65309,\n33154:8800,\n33155:65308,\n33156:65310,\n33157:8806,\n33158:8807,\n33159:8734,\n33160:8756,\n33161:9794,\n33162:9792,\n33163:176,\n33164:8242,\n33165:8243,\n33166:8451,\n33167:65509,\n33168:65284,\n33169:65504,\n33170:65505,\n33171:65285,\n33172:65283,\n33173:65286,\n33174:65290,\n33175:65312,\n33176:167,\n33177:9734,\n33178:9733,\n33179:9675,\n33180:9679,\n33181:9678,\n33182:9671,\n33183:9670,\n33184:9633,\n33185:9632,\n33186:9651,\n33187:9650,\n33188:9661,\n33189:9660,\n33190:8251,\n33191:12306,\n33192:8594,\n33193:8592,\n33194:8593,\n33195:8595,\n33196:12307,\n33208:8712,\n33209:8715,\n33210:8838,\n33211:8839,\n33212:8834,\n33213:8835,\n33214:8746,\n33215:8745,\n33224:8743,\n33225:8744,\n33226:65506,\n33227:8658,\n33228:8660,\n33229:8704,\n33230:8707,\n33242:8736,\n33243:8869,\n33244:8978,\n33245:8706,\n33246:8711,\n33247:8801,\n33248:8786,\n33249:8810,\n33250:8811,\n33251:8730,\n33252:8765,\n33253:8733,\n33254:8757,\n33255:8747,\n33256:8748,\n33264:8491,\n33265:8240,\n33266:9839,\n33267:9837,\n33268:9834,\n33269:8224,\n33270:8225,\n33271:182,\n33276:9711,\n33359:65296,\n33360:65297,\n33361:65298,\n33362:65299,\n33363:65300,\n33364:65301,\n33365:65302,\n33366:65303,\n33367:65304,\n33368:65305,\n33376:65313,\n33377:65314,\n33378:65315,\n33379:65316,\n33380:65317,\n33381:65318,\n33382:65319,\n33383:65320,\n33384:65321,\n33385:65322,\n33386:65323,\n33387:65324,\n33388:65325,\n33389:65326,\n33390:65327,\n33391:65328,\n33392:65329,\n33393:65330,\n33394:65331,\n33395:65332,\n33396:65333,\n33397:65334,\n33398:65335,\n33399:65336,\n33400:65337,\n33401:65338,\n33409:65345,\n33410:65346,\n33411:65347,\n33412:65348,\n33413:65349,\n33414:65350,\n33415:65351,\n33416:65352,\n33417:65353,\n33418:65354,\n33419:65355,\n33420:65356,\n33421:65357,\n33422:65358,\n33423:65359,\n33424:65360,\n33425:65361,\n33426:65362,\n33427:65363,\n33428:65364,\n33429:65365,\n33430:65366,\n33431:65367,\n33432:65368,\n33433:65369,\n33434:65370,\n33439:12353,\n33440:12354,\n33441:12355,\n33442:12356,\n33443:12357,\n33444:12358,\n33445:12359,\n33446:12360,\n33447:12361,\n33448:12362,\n33449:12363,\n33450:12364,\n33451:12365,\n33452:12366,\n33453:12367,\n33454:12368,\n33455:12369,\n33456:12370,\n33457:12371,\n33458:12372,\n33459:12373,\n33460:12374,\n33461:12375,\n33462:12376,\n33463:12377,\n33464:12378,\n33465:12379,\n33466:12380,\n33467:12381,\n33468:12382,\n33469:12383,\n33470:12384,\n33471:12385,\n33472:12386,\n33473:12387,\n33474:12388,\n33475:12389,\n33476:12390,\n33477:12391,\n33478:12392,\n33479:12393,\n33480:12394,\n33481:12395,\n33482:12396,\n33483:12397,\n33484:12398,\n33485:12399,\n33486:12400,\n33487:12401,\n33488:12402,\n33489:12403,\n33490:12404,\n33491:12405,\n33492:12406,\n33493:12407,\n33494:12408,\n33495:12409,\n33496:12410,\n33497:12411,\n33498:12412,\n33499:12413,\n33500:12414,\n33501:12415,\n33502:12416,\n33503:12417,\n33504:12418,\n33505:12419,\n33506:12420,\n33507:12421,\n33508:12422,\n33509:12423,\n33510:12424,\n33511:12425,\n33512:12426,\n33513:12427,\n33514:12428,\n33515:12429,\n33516:12430,\n33517:12431,\n33518:12432,\n33519:12433,\n33520:12434,\n33521:12435,\n33600:12449,\n33601:12450,\n33602:12451,\n33603:12452,\n33604:12453,\n33605:12454,\n33606:12455,\n33607:12456,\n33608:12457,\n33609:12458,\n33610:12459,\n33611:12460,\n33612:12461,\n33613:12462,\n33614:12463,\n33615:12464,\n33616:12465,\n33617:12466,\n33618:12467,\n33619:12468,\n33620:12469,\n33621:12470,\n33622:12471,\n33623:12472,\n33624:12473,\n33625:12474,\n33626:12475,\n33627:12476,\n33628:12477,\n33629:12478,\n33630:12479,\n33631:12480,\n33632:12481,\n33633:12482,\n33634:12483,\n33635:12484,\n33636:12485,\n33637:12486,\n33638:12487,\n33639:12488,\n33640:12489,\n33641:12490,\n33642:12491,\n33643:12492,\n33644:12493,\n33645:12494,\n33646:12495,\n33647:12496,\n33648:12497,\n33649:12498,\n33650:12499,\n33651:12500,\n33652:12501,\n33653:12502,\n33654:12503,\n33655:12504,\n33656:12505,\n33657:12506,\n33658:12507,\n33659:12508,\n33660:12509,\n33661:12510,\n33662:12511,\n33664:12512,\n33665:12513,\n33666:12514,\n33667:12515,\n33668:12516,\n33669:12517,\n33670:12518,\n33671:12519,\n33672:12520,\n33673:12521,\n33674:12522,\n33675:12523,\n33676:12524,\n33677:12525,\n33678:12526,\n33679:12527,\n33680:12528,\n33681:12529,\n33682:12530,\n33683:12531,\n33684:12532,\n33685:12533,\n33686:12534,\n33695:913,\n33696:914,\n33697:915,\n33698:916,\n33699:917,\n33700:918,\n33701:919,\n33702:920,\n33703:921,\n33704:922,\n33705:923,\n33706:924,\n33707:925,\n33708:926,\n33709:927,\n33710:928,\n33711:929,\n33712:931,\n33713:932,\n33714:933,\n33715:934,\n33716:935,\n33717:936,\n33718:937,\n33727:945,\n33728:946,\n33729:947,\n33730:948,\n33731:949,\n33732:950,\n33733:951,\n33734:952,\n33735:953,\n33736:954,\n33737:955,\n33738:956,\n33739:957,\n33740:958,\n33741:959,\n33742:960,\n33743:961,\n33744:963,\n33745:964,\n33746:965,\n33747:966,\n33748:967,\n33749:968,\n33750:969,\n33856:1040,\n33857:1041,\n33858:1042,\n33859:1043,\n33860:1044,\n33861:1045,\n33862:1025,\n33863:1046,\n33864:1047,\n33865:1048,\n33866:1049,\n33867:1050,\n33868:1051,\n33869:1052,\n33870:1053,\n33871:1054,\n33872:1055,\n33873:1056,\n33874:1057,\n33875:1058,\n33876:1059,\n33877:1060,\n33878:1061,\n33879:1062,\n33880:1063,\n33881:1064,\n33882:1065,\n33883:1066,\n33884:1067,\n33885:1068,\n33886:1069,\n33887:1070,\n33888:1071,\n33904:1072,\n33905:1073,\n33906:1074,\n33907:1075,\n33908:1076,\n33909:1077,\n33910:1105,\n33911:1078,\n33912:1079,\n33913:1080,\n33914:1081,\n33915:1082,\n33916:1083,\n33917:1084,\n33918:1085,\n33920:1086,\n33921:1087,\n33922:1088,\n33923:1089,\n33924:1090,\n33925:1091,\n33926:1092,\n33927:1093,\n33928:1094,\n33929:1095,\n33930:1096,\n33931:1097,\n33932:1098,\n33933:1099,\n33934:1100,\n33935:1101,\n33936:1102,\n33937:1103,\n33951:9472,\n33952:9474,\n33953:9484,\n33954:9488,\n33955:9496,\n33956:9492,\n33957:9500,\n33958:9516,\n33959:9508,\n33960:9524,\n33961:9532,\n33962:9473,\n33963:9475,\n33964:9487,\n33965:9491,\n33966:9499,\n33967:9495,\n33968:9507,\n33969:9523,\n33970:9515,\n33971:9531,\n33972:9547,\n33973:9504,\n33974:9519,\n33975:9512,\n33976:9527,\n33977:9535,\n33978:9501,\n33979:9520,\n33980:9509,\n33981:9528,\n33982:9538,\n34624:9312,\n34625:9313,\n34626:9314,\n34627:9315,\n34628:9316,\n34629:9317,\n34630:9318,\n34631:9319,\n34632:9320,\n34633:9321,\n34634:9322,\n34635:9323,\n34636:9324,\n34637:9325,\n34638:9326,\n34639:9327,\n34640:9328,\n34641:9329,\n34642:9330,\n34643:9331,\n34644:8544,\n34645:8545,\n34646:8546,\n34647:8547,\n34648:8548,\n34649:8549,\n34650:8550,\n34651:8551,\n34652:8552,\n34653:8553,\n34655:13129,\n34656:13076,\n34657:13090,\n34658:13133,\n34659:13080,\n34660:13095,\n34661:13059,\n34662:13110,\n34663:13137,\n34664:13143,\n34665:13069,\n34666:13094,\n34667:13091,\n34668:13099,\n34669:13130,\n34670:13115,\n34671:13212,\n34672:13213,\n34673:13214,\n34674:13198,\n34675:13199,\n34676:13252,\n34677:13217,\n34686:13179,\n34688:12317,\n34689:12319,\n34690:8470,\n34691:13261,\n34692:8481,\n34693:12964,\n34694:12965,\n34695:12966,\n34696:12967,\n34697:12968,\n34698:12849,\n34699:12850,\n34700:12857,\n34701:13182,\n34702:13181,\n34703:13180,\n34704:8786,\n34705:8801,\n34706:8747,\n34707:8750,\n34708:8721,\n34709:8730,\n34710:8869,\n34711:8736,\n34712:8735,\n34713:8895,\n34714:8757,\n34715:8745,\n34716:8746,\n34975:20124,\n34976:21782,\n34977:23043,\n34978:38463,\n34979:21696,\n34980:24859,\n34981:25384,\n34982:23030,\n34983:36898,\n34984:33909,\n34985:33564,\n34986:31312,\n34987:24746,\n34988:25569,\n34989:28197,\n34990:26093,\n34991:33894,\n34992:33446,\n34993:39925,\n34994:26771,\n34995:22311,\n34996:26017,\n34997:25201,\n34998:23451,\n34999:22992,\n35000:34427,\n35001:39156,\n35002:32098,\n35003:32190,\n35004:39822,\n35005:25110,\n35006:31903,\n35007:34999,\n35008:23433,\n35009:24245,\n35010:25353,\n35011:26263,\n35012:26696,\n35013:38343,\n35014:38797,\n35015:26447,\n35016:20197,\n35017:20234,\n35018:20301,\n35019:20381,\n35020:20553,\n35021:22258,\n35022:22839,\n35023:22996,\n35024:23041,\n35025:23561,\n35026:24799,\n35027:24847,\n35028:24944,\n35029:26131,\n35030:26885,\n35031:28858,\n35032:30031,\n35033:30064,\n35034:31227,\n35035:32173,\n35036:32239,\n35037:32963,\n35038:33806,\n35039:34915,\n35040:35586,\n35041:36949,\n35042:36986,\n35043:21307,\n35044:20117,\n35045:20133,\n35046:22495,\n35047:32946,\n35048:37057,\n35049:30959,\n35050:19968,\n35051:22769,\n35052:28322,\n35053:36920,\n35054:31282,\n35055:33576,\n35056:33419,\n35057:39983,\n35058:20801,\n35059:21360,\n35060:21693,\n35061:21729,\n35062:22240,\n35063:23035,\n35064:24341,\n35065:39154,\n35066:28139,\n35067:32996,\n35068:34093,\n35136:38498,\n35137:38512,\n35138:38560,\n35139:38907,\n35140:21515,\n35141:21491,\n35142:23431,\n35143:28879,\n35144:32701,\n35145:36802,\n35146:38632,\n35147:21359,\n35148:40284,\n35149:31418,\n35150:19985,\n35151:30867,\n35152:33276,\n35153:28198,\n35154:22040,\n35155:21764,\n35156:27421,\n35157:34074,\n35158:39995,\n35159:23013,\n35160:21417,\n35161:28006,\n35162:29916,\n35163:38287,\n35164:22082,\n35165:20113,\n35166:36939,\n35167:38642,\n35168:33615,\n35169:39180,\n35170:21473,\n35171:21942,\n35172:23344,\n35173:24433,\n35174:26144,\n35175:26355,\n35176:26628,\n35177:27704,\n35178:27891,\n35179:27945,\n35180:29787,\n35181:30408,\n35182:31310,\n35183:38964,\n35184:33521,\n35185:34907,\n35186:35424,\n35187:37613,\n35188:28082,\n35189:30123,\n35190:30410,\n35191:39365,\n35192:24742,\n35193:35585,\n35194:36234,\n35195:38322,\n35196:27022,\n35197:21421,\n35198:20870,\n35200:22290,\n35201:22576,\n35202:22852,\n35203:23476,\n35204:24310,\n35205:24616,\n35206:25513,\n35207:25588,\n35208:27839,\n35209:28436,\n35210:28814,\n35211:28948,\n35212:29017,\n35213:29141,\n35214:29503,\n35215:32257,\n35216:33398,\n35217:33489,\n35218:34199,\n35219:36960,\n35220:37467,\n35221:40219,\n35222:22633,\n35223:26044,\n35224:27738,\n35225:29989,\n35226:20985,\n35227:22830,\n35228:22885,\n35229:24448,\n35230:24540,\n35231:25276,\n35232:26106,\n35233:27178,\n35234:27431,\n35235:27572,\n35236:29579,\n35237:32705,\n35238:35158,\n35239:40236,\n35240:40206,\n35241:40644,\n35242:23713,\n35243:27798,\n35244:33659,\n35245:20740,\n35246:23627,\n35247:25014,\n35248:33222,\n35249:26742,\n35250:29281,\n35251:20057,\n35252:20474,\n35253:21368,\n35254:24681,\n35255:28201,\n35256:31311,\n35257:38899,\n35258:19979,\n35259:21270,\n35260:20206,\n35261:20309,\n35262:20285,\n35263:20385,\n35264:20339,\n35265:21152,\n35266:21487,\n35267:22025,\n35268:22799,\n35269:23233,\n35270:23478,\n35271:23521,\n35272:31185,\n35273:26247,\n35274:26524,\n35275:26550,\n35276:27468,\n35277:27827,\n35278:28779,\n35279:29634,\n35280:31117,\n35281:31166,\n35282:31292,\n35283:31623,\n35284:33457,\n35285:33499,\n35286:33540,\n35287:33655,\n35288:33775,\n35289:33747,\n35290:34662,\n35291:35506,\n35292:22057,\n35293:36008,\n35294:36838,\n35295:36942,\n35296:38686,\n35297:34442,\n35298:20420,\n35299:23784,\n35300:25105,\n35301:29273,\n35302:30011,\n35303:33253,\n35304:33469,\n35305:34558,\n35306:36032,\n35307:38597,\n35308:39187,\n35309:39381,\n35310:20171,\n35311:20250,\n35312:35299,\n35313:22238,\n35314:22602,\n35315:22730,\n35316:24315,\n35317:24555,\n35318:24618,\n35319:24724,\n35320:24674,\n35321:25040,\n35322:25106,\n35323:25296,\n35324:25913,\n35392:39745,\n35393:26214,\n35394:26800,\n35395:28023,\n35396:28784,\n35397:30028,\n35398:30342,\n35399:32117,\n35400:33445,\n35401:34809,\n35402:38283,\n35403:38542,\n35404:35997,\n35405:20977,\n35406:21182,\n35407:22806,\n35408:21683,\n35409:23475,\n35410:23830,\n35411:24936,\n35412:27010,\n35413:28079,\n35414:30861,\n35415:33995,\n35416:34903,\n35417:35442,\n35418:37799,\n35419:39608,\n35420:28012,\n35421:39336,\n35422:34521,\n35423:22435,\n35424:26623,\n35425:34510,\n35426:37390,\n35427:21123,\n35428:22151,\n35429:21508,\n35430:24275,\n35431:25313,\n35432:25785,\n35433:26684,\n35434:26680,\n35435:27579,\n35436:29554,\n35437:30906,\n35438:31339,\n35439:35226,\n35440:35282,\n35441:36203,\n35442:36611,\n35443:37101,\n35444:38307,\n35445:38548,\n35446:38761,\n35447:23398,\n35448:23731,\n35449:27005,\n35450:38989,\n35451:38990,\n35452:25499,\n35453:31520,\n35454:27179,\n35456:27263,\n35457:26806,\n35458:39949,\n35459:28511,\n35460:21106,\n35461:21917,\n35462:24688,\n35463:25324,\n35464:27963,\n35465:28167,\n35466:28369,\n35467:33883,\n35468:35088,\n35469:36676,\n35470:19988,\n35471:39993,\n35472:21494,\n35473:26907,\n35474:27194,\n35475:38788,\n35476:26666,\n35477:20828,\n35478:31427,\n35479:33970,\n35480:37340,\n35481:37772,\n35482:22107,\n35483:40232,\n35484:26658,\n35485:33541,\n35486:33841,\n35487:31909,\n35488:21000,\n35489:33477,\n35490:29926,\n35491:20094,\n35492:20355,\n35493:20896,\n35494:23506,\n35495:21002,\n35496:21208,\n35497:21223,\n35498:24059,\n35499:21914,\n35500:22570,\n35501:23014,\n35502:23436,\n35503:23448,\n35504:23515,\n35505:24178,\n35506:24185,\n35507:24739,\n35508:24863,\n35509:24931,\n35510:25022,\n35511:25563,\n35512:25954,\n35513:26577,\n35514:26707,\n35515:26874,\n35516:27454,\n35517:27475,\n35518:27735,\n35519:28450,\n35520:28567,\n35521:28485,\n35522:29872,\n35523:29976,\n35524:30435,\n35525:30475,\n35526:31487,\n35527:31649,\n35528:31777,\n35529:32233,\n35530:32566,\n35531:32752,\n35532:32925,\n35533:33382,\n35534:33694,\n35535:35251,\n35536:35532,\n35537:36011,\n35538:36996,\n35539:37969,\n35540:38291,\n35541:38289,\n35542:38306,\n35543:38501,\n35544:38867,\n35545:39208,\n35546:33304,\n35547:20024,\n35548:21547,\n35549:23736,\n35550:24012,\n35551:29609,\n35552:30284,\n35553:30524,\n35554:23721,\n35555:32747,\n35556:36107,\n35557:38593,\n35558:38929,\n35559:38996,\n35560:39000,\n35561:20225,\n35562:20238,\n35563:21361,\n35564:21916,\n35565:22120,\n35566:22522,\n35567:22855,\n35568:23305,\n35569:23492,\n35570:23696,\n35571:24076,\n35572:24190,\n35573:24524,\n35574:25582,\n35575:26426,\n35576:26071,\n35577:26082,\n35578:26399,\n35579:26827,\n35580:26820,\n35648:27231,\n35649:24112,\n35650:27589,\n35651:27671,\n35652:27773,\n35653:30079,\n35654:31048,\n35655:23395,\n35656:31232,\n35657:32000,\n35658:24509,\n35659:35215,\n35660:35352,\n35661:36020,\n35662:36215,\n35663:36556,\n35664:36637,\n35665:39138,\n35666:39438,\n35667:39740,\n35668:20096,\n35669:20605,\n35670:20736,\n35671:22931,\n35672:23452,\n35673:25135,\n35674:25216,\n35675:25836,\n35676:27450,\n35677:29344,\n35678:30097,\n35679:31047,\n35680:32681,\n35681:34811,\n35682:35516,\n35683:35696,\n35684:25516,\n35685:33738,\n35686:38816,\n35687:21513,\n35688:21507,\n35689:21931,\n35690:26708,\n35691:27224,\n35692:35440,\n35693:30759,\n35694:26485,\n35695:40653,\n35696:21364,\n35697:23458,\n35698:33050,\n35699:34384,\n35700:36870,\n35701:19992,\n35702:20037,\n35703:20167,\n35704:20241,\n35705:21450,\n35706:21560,\n35707:23470,\n35708:24339,\n35709:24613,\n35710:25937,\n35712:26429,\n35713:27714,\n35714:27762,\n35715:27875,\n35716:28792,\n35717:29699,\n35718:31350,\n35719:31406,\n35720:31496,\n35721:32026,\n35722:31998,\n35723:32102,\n35724:26087,\n35725:29275,\n35726:21435,\n35727:23621,\n35728:24040,\n35729:25298,\n35730:25312,\n35731:25369,\n35732:28192,\n35733:34394,\n35734:35377,\n35735:36317,\n35736:37624,\n35737:28417,\n35738:31142,\n35739:39770,\n35740:20136,\n35741:20139,\n35742:20140,\n35743:20379,\n35744:20384,\n35745:20689,\n35746:20807,\n35747:31478,\n35748:20849,\n35749:20982,\n35750:21332,\n35751:21281,\n35752:21375,\n35753:21483,\n35754:21932,\n35755:22659,\n35756:23777,\n35757:24375,\n35758:24394,\n35759:24623,\n35760:24656,\n35761:24685,\n35762:25375,\n35763:25945,\n35764:27211,\n35765:27841,\n35766:29378,\n35767:29421,\n35768:30703,\n35769:33016,\n35770:33029,\n35771:33288,\n35772:34126,\n35773:37111,\n35774:37857,\n35775:38911,\n35776:39255,\n35777:39514,\n35778:20208,\n35779:20957,\n35780:23597,\n35781:26241,\n35782:26989,\n35783:23616,\n35784:26354,\n35785:26997,\n35786:29577,\n35787:26704,\n35788:31873,\n35789:20677,\n35790:21220,\n35791:22343,\n35792:24062,\n35793:37670,\n35794:26020,\n35795:27427,\n35796:27453,\n35797:29748,\n35798:31105,\n35799:31165,\n35800:31563,\n35801:32202,\n35802:33465,\n35803:33740,\n35804:34943,\n35805:35167,\n35806:35641,\n35807:36817,\n35808:37329,\n35809:21535,\n35810:37504,\n35811:20061,\n35812:20534,\n35813:21477,\n35814:21306,\n35815:29399,\n35816:29590,\n35817:30697,\n35818:33510,\n35819:36527,\n35820:39366,\n35821:39368,\n35822:39378,\n35823:20855,\n35824:24858,\n35825:34398,\n35826:21936,\n35827:31354,\n35828:20598,\n35829:23507,\n35830:36935,\n35831:38533,\n35832:20018,\n35833:27355,\n35834:37351,\n35835:23633,\n35836:23624,\n35904:25496,\n35905:31391,\n35906:27795,\n35907:38772,\n35908:36705,\n35909:31402,\n35910:29066,\n35911:38536,\n35912:31874,\n35913:26647,\n35914:32368,\n35915:26705,\n35916:37740,\n35917:21234,\n35918:21531,\n35919:34219,\n35920:35347,\n35921:32676,\n35922:36557,\n35923:37089,\n35924:21350,\n35925:34952,\n35926:31041,\n35927:20418,\n35928:20670,\n35929:21009,\n35930:20804,\n35931:21843,\n35932:22317,\n35933:29674,\n35934:22411,\n35935:22865,\n35936:24418,\n35937:24452,\n35938:24693,\n35939:24950,\n35940:24935,\n35941:25001,\n35942:25522,\n35943:25658,\n35944:25964,\n35945:26223,\n35946:26690,\n35947:28179,\n35948:30054,\n35949:31293,\n35950:31995,\n35951:32076,\n35952:32153,\n35953:32331,\n35954:32619,\n35955:33550,\n35956:33610,\n35957:34509,\n35958:35336,\n35959:35427,\n35960:35686,\n35961:36605,\n35962:38938,\n35963:40335,\n35964:33464,\n35965:36814,\n35966:39912,\n35968:21127,\n35969:25119,\n35970:25731,\n35971:28608,\n35972:38553,\n35973:26689,\n35974:20625,\n35975:27424,\n35976:27770,\n35977:28500,\n35978:31348,\n35979:32080,\n35980:34880,\n35981:35363,\n35982:26376,\n35983:20214,\n35984:20537,\n35985:20518,\n35986:20581,\n35987:20860,\n35988:21048,\n35989:21091,\n35990:21927,\n35991:22287,\n35992:22533,\n35993:23244,\n35994:24314,\n35995:25010,\n35996:25080,\n35997:25331,\n35998:25458,\n35999:26908,\n36000:27177,\n36001:29309,\n36002:29356,\n36003:29486,\n36004:30740,\n36005:30831,\n36006:32121,\n36007:30476,\n36008:32937,\n36009:35211,\n36010:35609,\n36011:36066,\n36012:36562,\n36013:36963,\n36014:37749,\n36015:38522,\n36016:38997,\n36017:39443,\n36018:40568,\n36019:20803,\n36020:21407,\n36021:21427,\n36022:24187,\n36023:24358,\n36024:28187,\n36025:28304,\n36026:29572,\n36027:29694,\n36028:32067,\n36029:33335,\n36030:35328,\n36031:35578,\n36032:38480,\n36033:20046,\n36034:20491,\n36035:21476,\n36036:21628,\n36037:22266,\n36038:22993,\n36039:23396,\n36040:24049,\n36041:24235,\n36042:24359,\n36043:25144,\n36044:25925,\n36045:26543,\n36046:28246,\n36047:29392,\n36048:31946,\n36049:34996,\n36050:32929,\n36051:32993,\n36052:33776,\n36053:34382,\n36054:35463,\n36055:36328,\n36056:37431,\n36057:38599,\n36058:39015,\n36059:40723,\n36060:20116,\n36061:20114,\n36062:20237,\n36063:21320,\n36064:21577,\n36065:21566,\n36066:23087,\n36067:24460,\n36068:24481,\n36069:24735,\n36070:26791,\n36071:27278,\n36072:29786,\n36073:30849,\n36074:35486,\n36075:35492,\n36076:35703,\n36077:37264,\n36078:20062,\n36079:39881,\n36080:20132,\n36081:20348,\n36082:20399,\n36083:20505,\n36084:20502,\n36085:20809,\n36086:20844,\n36087:21151,\n36088:21177,\n36089:21246,\n36090:21402,\n36091:21475,\n36092:21521,\n36160:21518,\n36161:21897,\n36162:22353,\n36163:22434,\n36164:22909,\n36165:23380,\n36166:23389,\n36167:23439,\n36168:24037,\n36169:24039,\n36170:24055,\n36171:24184,\n36172:24195,\n36173:24218,\n36174:24247,\n36175:24344,\n36176:24658,\n36177:24908,\n36178:25239,\n36179:25304,\n36180:25511,\n36181:25915,\n36182:26114,\n36183:26179,\n36184:26356,\n36185:26477,\n36186:26657,\n36187:26775,\n36188:27083,\n36189:27743,\n36190:27946,\n36191:28009,\n36192:28207,\n36193:28317,\n36194:30002,\n36195:30343,\n36196:30828,\n36197:31295,\n36198:31968,\n36199:32005,\n36200:32024,\n36201:32094,\n36202:32177,\n36203:32789,\n36204:32771,\n36205:32943,\n36206:32945,\n36207:33108,\n36208:33167,\n36209:33322,\n36210:33618,\n36211:34892,\n36212:34913,\n36213:35611,\n36214:36002,\n36215:36092,\n36216:37066,\n36217:37237,\n36218:37489,\n36219:30783,\n36220:37628,\n36221:38308,\n36222:38477,\n36224:38917,\n36225:39321,\n36226:39640,\n36227:40251,\n36228:21083,\n36229:21163,\n36230:21495,\n36231:21512,\n36232:22741,\n36233:25335,\n36234:28640,\n36235:35946,\n36236:36703,\n36237:40633,\n36238:20811,\n36239:21051,\n36240:21578,\n36241:22269,\n36242:31296,\n36243:37239,\n36244:40288,\n36245:40658,\n36246:29508,\n36247:28425,\n36248:33136,\n36249:29969,\n36250:24573,\n36251:24794,\n36252:39592,\n36253:29403,\n36254:36796,\n36255:27492,\n36256:38915,\n36257:20170,\n36258:22256,\n36259:22372,\n36260:22718,\n36261:23130,\n36262:24680,\n36263:25031,\n36264:26127,\n36265:26118,\n36266:26681,\n36267:26801,\n36268:28151,\n36269:30165,\n36270:32058,\n36271:33390,\n36272:39746,\n36273:20123,\n36274:20304,\n36275:21449,\n36276:21766,\n36277:23919,\n36278:24038,\n36279:24046,\n36280:26619,\n36281:27801,\n36282:29811,\n36283:30722,\n36284:35408,\n36285:37782,\n36286:35039,\n36287:22352,\n36288:24231,\n36289:25387,\n36290:20661,\n36291:20652,\n36292:20877,\n36293:26368,\n36294:21705,\n36295:22622,\n36296:22971,\n36297:23472,\n36298:24425,\n36299:25165,\n36300:25505,\n36301:26685,\n36302:27507,\n36303:28168,\n36304:28797,\n36305:37319,\n36306:29312,\n36307:30741,\n36308:30758,\n36309:31085,\n36310:25998,\n36311:32048,\n36312:33756,\n36313:35009,\n36314:36617,\n36315:38555,\n36316:21092,\n36317:22312,\n36318:26448,\n36319:32618,\n36320:36001,\n36321:20916,\n36322:22338,\n36323:38442,\n36324:22586,\n36325:27018,\n36326:32948,\n36327:21682,\n36328:23822,\n36329:22524,\n36330:30869,\n36331:40442,\n36332:20316,\n36333:21066,\n36334:21643,\n36335:25662,\n36336:26152,\n36337:26388,\n36338:26613,\n36339:31364,\n36340:31574,\n36341:32034,\n36342:37679,\n36343:26716,\n36344:39853,\n36345:31545,\n36346:21273,\n36347:20874,\n36348:21047,\n36416:23519,\n36417:25334,\n36418:25774,\n36419:25830,\n36420:26413,\n36421:27578,\n36422:34217,\n36423:38609,\n36424:30352,\n36425:39894,\n36426:25420,\n36427:37638,\n36428:39851,\n36429:30399,\n36430:26194,\n36431:19977,\n36432:20632,\n36433:21442,\n36434:23665,\n36435:24808,\n36436:25746,\n36437:25955,\n36438:26719,\n36439:29158,\n36440:29642,\n36441:29987,\n36442:31639,\n36443:32386,\n36444:34453,\n36445:35715,\n36446:36059,\n36447:37240,\n36448:39184,\n36449:26028,\n36450:26283,\n36451:27531,\n36452:20181,\n36453:20180,\n36454:20282,\n36455:20351,\n36456:21050,\n36457:21496,\n36458:21490,\n36459:21987,\n36460:22235,\n36461:22763,\n36462:22987,\n36463:22985,\n36464:23039,\n36465:23376,\n36466:23629,\n36467:24066,\n36468:24107,\n36469:24535,\n36470:24605,\n36471:25351,\n36472:25903,\n36473:23388,\n36474:26031,\n36475:26045,\n36476:26088,\n36477:26525,\n36478:27490,\n36480:27515,\n36481:27663,\n36482:29509,\n36483:31049,\n36484:31169,\n36485:31992,\n36486:32025,\n36487:32043,\n36488:32930,\n36489:33026,\n36490:33267,\n36491:35222,\n36492:35422,\n36493:35433,\n36494:35430,\n36495:35468,\n36496:35566,\n36497:36039,\n36498:36060,\n36499:38604,\n36500:39164,\n36501:27503,\n36502:20107,\n36503:20284,\n36504:20365,\n36505:20816,\n36506:23383,\n36507:23546,\n36508:24904,\n36509:25345,\n36510:26178,\n36511:27425,\n36512:28363,\n36513:27835,\n36514:29246,\n36515:29885,\n36516:30164,\n36517:30913,\n36518:31034,\n36519:32780,\n36520:32819,\n36521:33258,\n36522:33940,\n36523:36766,\n36524:27728,\n36525:40575,\n36526:24335,\n36527:35672,\n36528:40235,\n36529:31482,\n36530:36600,\n36531:23437,\n36532:38635,\n36533:19971,\n36534:21489,\n36535:22519,\n36536:22833,\n36537:23241,\n36538:23460,\n36539:24713,\n36540:28287,\n36541:28422,\n36542:30142,\n36543:36074,\n36544:23455,\n36545:34048,\n36546:31712,\n36547:20594,\n36548:26612,\n36549:33437,\n36550:23649,\n36551:34122,\n36552:32286,\n36553:33294,\n36554:20889,\n36555:23556,\n36556:25448,\n36557:36198,\n36558:26012,\n36559:29038,\n36560:31038,\n36561:32023,\n36562:32773,\n36563:35613,\n36564:36554,\n36565:36974,\n36566:34503,\n36567:37034,\n36568:20511,\n36569:21242,\n36570:23610,\n36571:26451,\n36572:28796,\n36573:29237,\n36574:37196,\n36575:37320,\n36576:37675,\n36577:33509,\n36578:23490,\n36579:24369,\n36580:24825,\n36581:20027,\n36582:21462,\n36583:23432,\n36584:25163,\n36585:26417,\n36586:27530,\n36587:29417,\n36588:29664,\n36589:31278,\n36590:33131,\n36591:36259,\n36592:37202,\n36593:39318,\n36594:20754,\n36595:21463,\n36596:21610,\n36597:23551,\n36598:25480,\n36599:27193,\n36600:32172,\n36601:38656,\n36602:22234,\n36603:21454,\n36604:21608,\n36672:23447,\n36673:23601,\n36674:24030,\n36675:20462,\n36676:24833,\n36677:25342,\n36678:27954,\n36679:31168,\n36680:31179,\n36681:32066,\n36682:32333,\n36683:32722,\n36684:33261,\n36685:33311,\n36686:33936,\n36687:34886,\n36688:35186,\n36689:35728,\n36690:36468,\n36691:36655,\n36692:36913,\n36693:37195,\n36694:37228,\n36695:38598,\n36696:37276,\n36697:20160,\n36698:20303,\n36699:20805,\n36700:21313,\n36701:24467,\n36702:25102,\n36703:26580,\n36704:27713,\n36705:28171,\n36706:29539,\n36707:32294,\n36708:37325,\n36709:37507,\n36710:21460,\n36711:22809,\n36712:23487,\n36713:28113,\n36714:31069,\n36715:32302,\n36716:31899,\n36717:22654,\n36718:29087,\n36719:20986,\n36720:34899,\n36721:36848,\n36722:20426,\n36723:23803,\n36724:26149,\n36725:30636,\n36726:31459,\n36727:33308,\n36728:39423,\n36729:20934,\n36730:24490,\n36731:26092,\n36732:26991,\n36733:27529,\n36734:28147,\n36736:28310,\n36737:28516,\n36738:30462,\n36739:32020,\n36740:24033,\n36741:36981,\n36742:37255,\n36743:38918,\n36744:20966,\n36745:21021,\n36746:25152,\n36747:26257,\n36748:26329,\n36749:28186,\n36750:24246,\n36751:32210,\n36752:32626,\n36753:26360,\n36754:34223,\n36755:34295,\n36756:35576,\n36757:21161,\n36758:21465,\n36759:22899,\n36760:24207,\n36761:24464,\n36762:24661,\n36763:37604,\n36764:38500,\n36765:20663,\n36766:20767,\n36767:21213,\n36768:21280,\n36769:21319,\n36770:21484,\n36771:21736,\n36772:21830,\n36773:21809,\n36774:22039,\n36775:22888,\n36776:22974,\n36777:23100,\n36778:23477,\n36779:23558,\n36780:23567,\n36781:23569,\n36782:23578,\n36783:24196,\n36784:24202,\n36785:24288,\n36786:24432,\n36787:25215,\n36788:25220,\n36789:25307,\n36790:25484,\n36791:25463,\n36792:26119,\n36793:26124,\n36794:26157,\n36795:26230,\n36796:26494,\n36797:26786,\n36798:27167,\n36799:27189,\n36800:27836,\n36801:28040,\n36802:28169,\n36803:28248,\n36804:28988,\n36805:28966,\n36806:29031,\n36807:30151,\n36808:30465,\n36809:30813,\n36810:30977,\n36811:31077,\n36812:31216,\n36813:31456,\n36814:31505,\n36815:31911,\n36816:32057,\n36817:32918,\n36818:33750,\n36819:33931,\n36820:34121,\n36821:34909,\n36822:35059,\n36823:35359,\n36824:35388,\n36825:35412,\n36826:35443,\n36827:35937,\n36828:36062,\n36829:37284,\n36830:37478,\n36831:37758,\n36832:37912,\n36833:38556,\n36834:38808,\n36835:19978,\n36836:19976,\n36837:19998,\n36838:20055,\n36839:20887,\n36840:21104,\n36841:22478,\n36842:22580,\n36843:22732,\n36844:23330,\n36845:24120,\n36846:24773,\n36847:25854,\n36848:26465,\n36849:26454,\n36850:27972,\n36851:29366,\n36852:30067,\n36853:31331,\n36854:33976,\n36855:35698,\n36856:37304,\n36857:37664,\n36858:22065,\n36859:22516,\n36860:39166,\n36928:25325,\n36929:26893,\n36930:27542,\n36931:29165,\n36932:32340,\n36933:32887,\n36934:33394,\n36935:35302,\n36936:39135,\n36937:34645,\n36938:36785,\n36939:23611,\n36940:20280,\n36941:20449,\n36942:20405,\n36943:21767,\n36944:23072,\n36945:23517,\n36946:23529,\n36947:24515,\n36948:24910,\n36949:25391,\n36950:26032,\n36951:26187,\n36952:26862,\n36953:27035,\n36954:28024,\n36955:28145,\n36956:30003,\n36957:30137,\n36958:30495,\n36959:31070,\n36960:31206,\n36961:32051,\n36962:33251,\n36963:33455,\n36964:34218,\n36965:35242,\n36966:35386,\n36967:36523,\n36968:36763,\n36969:36914,\n36970:37341,\n36971:38663,\n36972:20154,\n36973:20161,\n36974:20995,\n36975:22645,\n36976:22764,\n36977:23563,\n36978:29978,\n36979:23613,\n36980:33102,\n36981:35338,\n36982:36805,\n36983:38499,\n36984:38765,\n36985:31525,\n36986:35535,\n36987:38920,\n36988:37218,\n36989:22259,\n36990:21416,\n36992:36887,\n36993:21561,\n36994:22402,\n36995:24101,\n36996:25512,\n36997:27700,\n36998:28810,\n36999:30561,\n37000:31883,\n37001:32736,\n37002:34928,\n37003:36930,\n37004:37204,\n37005:37648,\n37006:37656,\n37007:38543,\n37008:29790,\n37009:39620,\n37010:23815,\n37011:23913,\n37012:25968,\n37013:26530,\n37014:36264,\n37015:38619,\n37016:25454,\n37017:26441,\n37018:26905,\n37019:33733,\n37020:38935,\n37021:38592,\n37022:35070,\n37023:28548,\n37024:25722,\n37025:23544,\n37026:19990,\n37027:28716,\n37028:30045,\n37029:26159,\n37030:20932,\n37031:21046,\n37032:21218,\n37033:22995,\n37034:24449,\n37035:24615,\n37036:25104,\n37037:25919,\n37038:25972,\n37039:26143,\n37040:26228,\n37041:26866,\n37042:26646,\n37043:27491,\n37044:28165,\n37045:29298,\n37046:29983,\n37047:30427,\n37048:31934,\n37049:32854,\n37050:22768,\n37051:35069,\n37052:35199,\n37053:35488,\n37054:35475,\n37055:35531,\n37056:36893,\n37057:37266,\n37058:38738,\n37059:38745,\n37060:25993,\n37061:31246,\n37062:33030,\n37063:38587,\n37064:24109,\n37065:24796,\n37066:25114,\n37067:26021,\n37068:26132,\n37069:26512,\n37070:30707,\n37071:31309,\n37072:31821,\n37073:32318,\n37074:33034,\n37075:36012,\n37076:36196,\n37077:36321,\n37078:36447,\n37079:30889,\n37080:20999,\n37081:25305,\n37082:25509,\n37083:25666,\n37084:25240,\n37085:35373,\n37086:31363,\n37087:31680,\n37088:35500,\n37089:38634,\n37090:32118,\n37091:33292,\n37092:34633,\n37093:20185,\n37094:20808,\n37095:21315,\n37096:21344,\n37097:23459,\n37098:23554,\n37099:23574,\n37100:24029,\n37101:25126,\n37102:25159,\n37103:25776,\n37104:26643,\n37105:26676,\n37106:27849,\n37107:27973,\n37108:27927,\n37109:26579,\n37110:28508,\n37111:29006,\n37112:29053,\n37113:26059,\n37114:31359,\n37115:31661,\n37116:32218,\n37184:32330,\n37185:32680,\n37186:33146,\n37187:33307,\n37188:33337,\n37189:34214,\n37190:35438,\n37191:36046,\n37192:36341,\n37193:36984,\n37194:36983,\n37195:37549,\n37196:37521,\n37197:38275,\n37198:39854,\n37199:21069,\n37200:21892,\n37201:28472,\n37202:28982,\n37203:20840,\n37204:31109,\n37205:32341,\n37206:33203,\n37207:31950,\n37208:22092,\n37209:22609,\n37210:23720,\n37211:25514,\n37212:26366,\n37213:26365,\n37214:26970,\n37215:29401,\n37216:30095,\n37217:30094,\n37218:30990,\n37219:31062,\n37220:31199,\n37221:31895,\n37222:32032,\n37223:32068,\n37224:34311,\n37225:35380,\n37226:38459,\n37227:36961,\n37228:40736,\n37229:20711,\n37230:21109,\n37231:21452,\n37232:21474,\n37233:20489,\n37234:21930,\n37235:22766,\n37236:22863,\n37237:29245,\n37238:23435,\n37239:23652,\n37240:21277,\n37241:24803,\n37242:24819,\n37243:25436,\n37244:25475,\n37245:25407,\n37246:25531,\n37248:25805,\n37249:26089,\n37250:26361,\n37251:24035,\n37252:27085,\n37253:27133,\n37254:28437,\n37255:29157,\n37256:20105,\n37257:30185,\n37258:30456,\n37259:31379,\n37260:31967,\n37261:32207,\n37262:32156,\n37263:32865,\n37264:33609,\n37265:33624,\n37266:33900,\n37267:33980,\n37268:34299,\n37269:35013,\n37270:36208,\n37271:36865,\n37272:36973,\n37273:37783,\n37274:38684,\n37275:39442,\n37276:20687,\n37277:22679,\n37278:24974,\n37279:33235,\n37280:34101,\n37281:36104,\n37282:36896,\n37283:20419,\n37284:20596,\n37285:21063,\n37286:21363,\n37287:24687,\n37288:25417,\n37289:26463,\n37290:28204,\n37291:36275,\n37292:36895,\n37293:20439,\n37294:23646,\n37295:36042,\n37296:26063,\n37297:32154,\n37298:21330,\n37299:34966,\n37300:20854,\n37301:25539,\n37302:23384,\n37303:23403,\n37304:23562,\n37305:25613,\n37306:26449,\n37307:36956,\n37308:20182,\n37309:22810,\n37310:22826,\n37311:27760,\n37312:35409,\n37313:21822,\n37314:22549,\n37315:22949,\n37316:24816,\n37317:25171,\n37318:26561,\n37319:33333,\n37320:26965,\n37321:38464,\n37322:39364,\n37323:39464,\n37324:20307,\n37325:22534,\n37326:23550,\n37327:32784,\n37328:23729,\n37329:24111,\n37330:24453,\n37331:24608,\n37332:24907,\n37333:25140,\n37334:26367,\n37335:27888,\n37336:28382,\n37337:32974,\n37338:33151,\n37339:33492,\n37340:34955,\n37341:36024,\n37342:36864,\n37343:36910,\n37344:38538,\n37345:40667,\n37346:39899,\n37347:20195,\n37348:21488,\n37349:22823,\n37350:31532,\n37351:37261,\n37352:38988,\n37353:40441,\n37354:28381,\n37355:28711,\n37356:21331,\n37357:21828,\n37358:23429,\n37359:25176,\n37360:25246,\n37361:25299,\n37362:27810,\n37363:28655,\n37364:29730,\n37365:35351,\n37366:37944,\n37367:28609,\n37368:35582,\n37369:33592,\n37370:20967,\n37371:34552,\n37372:21482,\n37440:21481,\n37441:20294,\n37442:36948,\n37443:36784,\n37444:22890,\n37445:33073,\n37446:24061,\n37447:31466,\n37448:36799,\n37449:26842,\n37450:35895,\n37451:29432,\n37452:40008,\n37453:27197,\n37454:35504,\n37455:20025,\n37456:21336,\n37457:22022,\n37458:22374,\n37459:25285,\n37460:25506,\n37461:26086,\n37462:27470,\n37463:28129,\n37464:28251,\n37465:28845,\n37466:30701,\n37467:31471,\n37468:31658,\n37469:32187,\n37470:32829,\n37471:32966,\n37472:34507,\n37473:35477,\n37474:37723,\n37475:22243,\n37476:22727,\n37477:24382,\n37478:26029,\n37479:26262,\n37480:27264,\n37481:27573,\n37482:30007,\n37483:35527,\n37484:20516,\n37485:30693,\n37486:22320,\n37487:24347,\n37488:24677,\n37489:26234,\n37490:27744,\n37491:30196,\n37492:31258,\n37493:32622,\n37494:33268,\n37495:34584,\n37496:36933,\n37497:39347,\n37498:31689,\n37499:30044,\n37500:31481,\n37501:31569,\n37502:33988,\n37504:36880,\n37505:31209,\n37506:31378,\n37507:33590,\n37508:23265,\n37509:30528,\n37510:20013,\n37511:20210,\n37512:23449,\n37513:24544,\n37514:25277,\n37515:26172,\n37516:26609,\n37517:27880,\n37518:34411,\n37519:34935,\n37520:35387,\n37521:37198,\n37522:37619,\n37523:39376,\n37524:27159,\n37525:28710,\n37526:29482,\n37527:33511,\n37528:33879,\n37529:36015,\n37530:19969,\n37531:20806,\n37532:20939,\n37533:21899,\n37534:23541,\n37535:24086,\n37536:24115,\n37537:24193,\n37538:24340,\n37539:24373,\n37540:24427,\n37541:24500,\n37542:25074,\n37543:25361,\n37544:26274,\n37545:26397,\n37546:28526,\n37547:29266,\n37548:30010,\n37549:30522,\n37550:32884,\n37551:33081,\n37552:33144,\n37553:34678,\n37554:35519,\n37555:35548,\n37556:36229,\n37557:36339,\n37558:37530,\n37559:38263,\n37560:38914,\n37561:40165,\n37562:21189,\n37563:25431,\n37564:30452,\n37565:26389,\n37566:27784,\n37567:29645,\n37568:36035,\n37569:37806,\n37570:38515,\n37571:27941,\n37572:22684,\n37573:26894,\n37574:27084,\n37575:36861,\n37576:37786,\n37577:30171,\n37578:36890,\n37579:22618,\n37580:26626,\n37581:25524,\n37582:27131,\n37583:20291,\n37584:28460,\n37585:26584,\n37586:36795,\n37587:34086,\n37588:32180,\n37589:37716,\n37590:26943,\n37591:28528,\n37592:22378,\n37593:22775,\n37594:23340,\n37595:32044,\n37596:29226,\n37597:21514,\n37598:37347,\n37599:40372,\n37600:20141,\n37601:20302,\n37602:20572,\n37603:20597,\n37604:21059,\n37605:35998,\n37606:21576,\n37607:22564,\n37608:23450,\n37609:24093,\n37610:24213,\n37611:24237,\n37612:24311,\n37613:24351,\n37614:24716,\n37615:25269,\n37616:25402,\n37617:25552,\n37618:26799,\n37619:27712,\n37620:30855,\n37621:31118,\n37622:31243,\n37623:32224,\n37624:33351,\n37625:35330,\n37626:35558,\n37627:36420,\n37628:36883,\n37696:37048,\n37697:37165,\n37698:37336,\n37699:40718,\n37700:27877,\n37701:25688,\n37702:25826,\n37703:25973,\n37704:28404,\n37705:30340,\n37706:31515,\n37707:36969,\n37708:37841,\n37709:28346,\n37710:21746,\n37711:24505,\n37712:25764,\n37713:36685,\n37714:36845,\n37715:37444,\n37716:20856,\n37717:22635,\n37718:22825,\n37719:23637,\n37720:24215,\n37721:28155,\n37722:32399,\n37723:29980,\n37724:36028,\n37725:36578,\n37726:39003,\n37727:28857,\n37728:20253,\n37729:27583,\n37730:28593,\n37731:30000,\n37732:38651,\n37733:20814,\n37734:21520,\n37735:22581,\n37736:22615,\n37737:22956,\n37738:23648,\n37739:24466,\n37740:26007,\n37741:26460,\n37742:28193,\n37743:30331,\n37744:33759,\n37745:36077,\n37746:36884,\n37747:37117,\n37748:37709,\n37749:30757,\n37750:30778,\n37751:21162,\n37752:24230,\n37753:22303,\n37754:22900,\n37755:24594,\n37756:20498,\n37757:20826,\n37758:20908,\n37760:20941,\n37761:20992,\n37762:21776,\n37763:22612,\n37764:22616,\n37765:22871,\n37766:23445,\n37767:23798,\n37768:23947,\n37769:24764,\n37770:25237,\n37771:25645,\n37772:26481,\n37773:26691,\n37774:26812,\n37775:26847,\n37776:30423,\n37777:28120,\n37778:28271,\n37779:28059,\n37780:28783,\n37781:29128,\n37782:24403,\n37783:30168,\n37784:31095,\n37785:31561,\n37786:31572,\n37787:31570,\n37788:31958,\n37789:32113,\n37790:21040,\n37791:33891,\n37792:34153,\n37793:34276,\n37794:35342,\n37795:35588,\n37796:35910,\n37797:36367,\n37798:36867,\n37799:36879,\n37800:37913,\n37801:38518,\n37802:38957,\n37803:39472,\n37804:38360,\n37805:20685,\n37806:21205,\n37807:21516,\n37808:22530,\n37809:23566,\n37810:24999,\n37811:25758,\n37812:27934,\n37813:30643,\n37814:31461,\n37815:33012,\n37816:33796,\n37817:36947,\n37818:37509,\n37819:23776,\n37820:40199,\n37821:21311,\n37822:24471,\n37823:24499,\n37824:28060,\n37825:29305,\n37826:30563,\n37827:31167,\n37828:31716,\n37829:27602,\n37830:29420,\n37831:35501,\n37832:26627,\n37833:27233,\n37834:20984,\n37835:31361,\n37836:26932,\n37837:23626,\n37838:40182,\n37839:33515,\n37840:23493,\n37841:37193,\n37842:28702,\n37843:22136,\n37844:23663,\n37845:24775,\n37846:25958,\n37847:27788,\n37848:35930,\n37849:36929,\n37850:38931,\n37851:21585,\n37852:26311,\n37853:37389,\n37854:22856,\n37855:37027,\n37856:20869,\n37857:20045,\n37858:20970,\n37859:34201,\n37860:35598,\n37861:28760,\n37862:25466,\n37863:37707,\n37864:26978,\n37865:39348,\n37866:32260,\n37867:30071,\n37868:21335,\n37869:26976,\n37870:36575,\n37871:38627,\n37872:27741,\n37873:20108,\n37874:23612,\n37875:24336,\n37876:36841,\n37877:21250,\n37878:36049,\n37879:32905,\n37880:34425,\n37881:24319,\n37882:26085,\n37883:20083,\n37884:20837,\n37952:22914,\n37953:23615,\n37954:38894,\n37955:20219,\n37956:22922,\n37957:24525,\n37958:35469,\n37959:28641,\n37960:31152,\n37961:31074,\n37962:23527,\n37963:33905,\n37964:29483,\n37965:29105,\n37966:24180,\n37967:24565,\n37968:25467,\n37969:25754,\n37970:29123,\n37971:31896,\n37972:20035,\n37973:24316,\n37974:20043,\n37975:22492,\n37976:22178,\n37977:24745,\n37978:28611,\n37979:32013,\n37980:33021,\n37981:33075,\n37982:33215,\n37983:36786,\n37984:35223,\n37985:34468,\n37986:24052,\n37987:25226,\n37988:25773,\n37989:35207,\n37990:26487,\n37991:27874,\n37992:27966,\n37993:29750,\n37994:30772,\n37995:23110,\n37996:32629,\n37997:33453,\n37998:39340,\n37999:20467,\n38000:24259,\n38001:25309,\n38002:25490,\n38003:25943,\n38004:26479,\n38005:30403,\n38006:29260,\n38007:32972,\n38008:32954,\n38009:36649,\n38010:37197,\n38011:20493,\n38012:22521,\n38013:23186,\n38014:26757,\n38016:26995,\n38017:29028,\n38018:29437,\n38019:36023,\n38020:22770,\n38021:36064,\n38022:38506,\n38023:36889,\n38024:34687,\n38025:31204,\n38026:30695,\n38027:33833,\n38028:20271,\n38029:21093,\n38030:21338,\n38031:25293,\n38032:26575,\n38033:27850,\n38034:30333,\n38035:31636,\n38036:31893,\n38037:33334,\n38038:34180,\n38039:36843,\n38040:26333,\n38041:28448,\n38042:29190,\n38043:32283,\n38044:33707,\n38045:39361,\n38046:40614,\n38047:20989,\n38048:31665,\n38049:30834,\n38050:31672,\n38051:32903,\n38052:31560,\n38053:27368,\n38054:24161,\n38055:32908,\n38056:30033,\n38057:30048,\n38058:20843,\n38059:37474,\n38060:28300,\n38061:30330,\n38062:37271,\n38063:39658,\n38064:20240,\n38065:32624,\n38066:25244,\n38067:31567,\n38068:38309,\n38069:40169,\n38070:22138,\n38071:22617,\n38072:34532,\n38073:38588,\n38074:20276,\n38075:21028,\n38076:21322,\n38077:21453,\n38078:21467,\n38079:24070,\n38080:25644,\n38081:26001,\n38082:26495,\n38083:27710,\n38084:27726,\n38085:29256,\n38086:29359,\n38087:29677,\n38088:30036,\n38089:32321,\n38090:33324,\n38091:34281,\n38092:36009,\n38093:31684,\n38094:37318,\n38095:29033,\n38096:38930,\n38097:39151,\n38098:25405,\n38099:26217,\n38100:30058,\n38101:30436,\n38102:30928,\n38103:34115,\n38104:34542,\n38105:21290,\n38106:21329,\n38107:21542,\n38108:22915,\n38109:24199,\n38110:24444,\n38111:24754,\n38112:25161,\n38113:25209,\n38114:25259,\n38115:26000,\n38116:27604,\n38117:27852,\n38118:30130,\n38119:30382,\n38120:30865,\n38121:31192,\n38122:32203,\n38123:32631,\n38124:32933,\n38125:34987,\n38126:35513,\n38127:36027,\n38128:36991,\n38129:38750,\n38130:39131,\n38131:27147,\n38132:31800,\n38133:20633,\n38134:23614,\n38135:24494,\n38136:26503,\n38137:27608,\n38138:29749,\n38139:30473,\n38140:32654,\n38208:40763,\n38209:26570,\n38210:31255,\n38211:21305,\n38212:30091,\n38213:39661,\n38214:24422,\n38215:33181,\n38216:33777,\n38217:32920,\n38218:24380,\n38219:24517,\n38220:30050,\n38221:31558,\n38222:36924,\n38223:26727,\n38224:23019,\n38225:23195,\n38226:32016,\n38227:30334,\n38228:35628,\n38229:20469,\n38230:24426,\n38231:27161,\n38232:27703,\n38233:28418,\n38234:29922,\n38235:31080,\n38236:34920,\n38237:35413,\n38238:35961,\n38239:24287,\n38240:25551,\n38241:30149,\n38242:31186,\n38243:33495,\n38244:37672,\n38245:37618,\n38246:33948,\n38247:34541,\n38248:39981,\n38249:21697,\n38250:24428,\n38251:25996,\n38252:27996,\n38253:28693,\n38254:36007,\n38255:36051,\n38256:38971,\n38257:25935,\n38258:29942,\n38259:19981,\n38260:20184,\n38261:22496,\n38262:22827,\n38263:23142,\n38264:23500,\n38265:20904,\n38266:24067,\n38267:24220,\n38268:24598,\n38269:25206,\n38270:25975,\n38272:26023,\n38273:26222,\n38274:28014,\n38275:29238,\n38276:31526,\n38277:33104,\n38278:33178,\n38279:33433,\n38280:35676,\n38281:36000,\n38282:36070,\n38283:36212,\n38284:38428,\n38285:38468,\n38286:20398,\n38287:25771,\n38288:27494,\n38289:33310,\n38290:33889,\n38291:34154,\n38292:37096,\n38293:23553,\n38294:26963,\n38295:39080,\n38296:33914,\n38297:34135,\n38298:20239,\n38299:21103,\n38300:24489,\n38301:24133,\n38302:26381,\n38303:31119,\n38304:33145,\n38305:35079,\n38306:35206,\n38307:28149,\n38308:24343,\n38309:25173,\n38310:27832,\n38311:20175,\n38312:29289,\n38313:39826,\n38314:20998,\n38315:21563,\n38316:22132,\n38317:22707,\n38318:24996,\n38319:25198,\n38320:28954,\n38321:22894,\n38322:31881,\n38323:31966,\n38324:32027,\n38325:38640,\n38326:25991,\n38327:32862,\n38328:19993,\n38329:20341,\n38330:20853,\n38331:22592,\n38332:24163,\n38333:24179,\n38334:24330,\n38335:26564,\n38336:20006,\n38337:34109,\n38338:38281,\n38339:38491,\n38340:31859,\n38341:38913,\n38342:20731,\n38343:22721,\n38344:30294,\n38345:30887,\n38346:21029,\n38347:30629,\n38348:34065,\n38349:31622,\n38350:20559,\n38351:22793,\n38352:29255,\n38353:31687,\n38354:32232,\n38355:36794,\n38356:36820,\n38357:36941,\n38358:20415,\n38359:21193,\n38360:23081,\n38361:24321,\n38362:38829,\n38363:20445,\n38364:33303,\n38365:37610,\n38366:22275,\n38367:25429,\n38368:27497,\n38369:29995,\n38370:35036,\n38371:36628,\n38372:31298,\n38373:21215,\n38374:22675,\n38375:24917,\n38376:25098,\n38377:26286,\n38378:27597,\n38379:31807,\n38380:33769,\n38381:20515,\n38382:20472,\n38383:21253,\n38384:21574,\n38385:22577,\n38386:22857,\n38387:23453,\n38388:23792,\n38389:23791,\n38390:23849,\n38391:24214,\n38392:25265,\n38393:25447,\n38394:25918,\n38395:26041,\n38396:26379,\n38464:27861,\n38465:27873,\n38466:28921,\n38467:30770,\n38468:32299,\n38469:32990,\n38470:33459,\n38471:33804,\n38472:34028,\n38473:34562,\n38474:35090,\n38475:35370,\n38476:35914,\n38477:37030,\n38478:37586,\n38479:39165,\n38480:40179,\n38481:40300,\n38482:20047,\n38483:20129,\n38484:20621,\n38485:21078,\n38486:22346,\n38487:22952,\n38488:24125,\n38489:24536,\n38490:24537,\n38491:25151,\n38492:26292,\n38493:26395,\n38494:26576,\n38495:26834,\n38496:20882,\n38497:32033,\n38498:32938,\n38499:33192,\n38500:35584,\n38501:35980,\n38502:36031,\n38503:37502,\n38504:38450,\n38505:21536,\n38506:38956,\n38507:21271,\n38508:20693,\n38509:21340,\n38510:22696,\n38511:25778,\n38512:26420,\n38513:29287,\n38514:30566,\n38515:31302,\n38516:37350,\n38517:21187,\n38518:27809,\n38519:27526,\n38520:22528,\n38521:24140,\n38522:22868,\n38523:26412,\n38524:32763,\n38525:20961,\n38526:30406,\n38528:25705,\n38529:30952,\n38530:39764,\n38531:40635,\n38532:22475,\n38533:22969,\n38534:26151,\n38535:26522,\n38536:27598,\n38537:21737,\n38538:27097,\n38539:24149,\n38540:33180,\n38541:26517,\n38542:39850,\n38543:26622,\n38544:40018,\n38545:26717,\n38546:20134,\n38547:20451,\n38548:21448,\n38549:25273,\n38550:26411,\n38551:27819,\n38552:36804,\n38553:20397,\n38554:32365,\n38555:40639,\n38556:19975,\n38557:24930,\n38558:28288,\n38559:28459,\n38560:34067,\n38561:21619,\n38562:26410,\n38563:39749,\n38564:24051,\n38565:31637,\n38566:23724,\n38567:23494,\n38568:34588,\n38569:28234,\n38570:34001,\n38571:31252,\n38572:33032,\n38573:22937,\n38574:31885,\n38575:27665,\n38576:30496,\n38577:21209,\n38578:22818,\n38579:28961,\n38580:29279,\n38581:30683,\n38582:38695,\n38583:40289,\n38584:26891,\n38585:23167,\n38586:23064,\n38587:20901,\n38588:21517,\n38589:21629,\n38590:26126,\n38591:30431,\n38592:36855,\n38593:37528,\n38594:40180,\n38595:23018,\n38596:29277,\n38597:28357,\n38598:20813,\n38599:26825,\n38600:32191,\n38601:32236,\n38602:38754,\n38603:40634,\n38604:25720,\n38605:27169,\n38606:33538,\n38607:22916,\n38608:23391,\n38609:27611,\n38610:29467,\n38611:30450,\n38612:32178,\n38613:32791,\n38614:33945,\n38615:20786,\n38616:26408,\n38617:40665,\n38618:30446,\n38619:26466,\n38620:21247,\n38621:39173,\n38622:23588,\n38623:25147,\n38624:31870,\n38625:36016,\n38626:21839,\n38627:24758,\n38628:32011,\n38629:38272,\n38630:21249,\n38631:20063,\n38632:20918,\n38633:22812,\n38634:29242,\n38635:32822,\n38636:37326,\n38637:24357,\n38638:30690,\n38639:21380,\n38640:24441,\n38641:32004,\n38642:34220,\n38643:35379,\n38644:36493,\n38645:38742,\n38646:26611,\n38647:34222,\n38648:37971,\n38649:24841,\n38650:24840,\n38651:27833,\n38652:30290,\n38720:35565,\n38721:36664,\n38722:21807,\n38723:20305,\n38724:20778,\n38725:21191,\n38726:21451,\n38727:23461,\n38728:24189,\n38729:24736,\n38730:24962,\n38731:25558,\n38732:26377,\n38733:26586,\n38734:28263,\n38735:28044,\n38736:29494,\n38737:29495,\n38738:30001,\n38739:31056,\n38740:35029,\n38741:35480,\n38742:36938,\n38743:37009,\n38744:37109,\n38745:38596,\n38746:34701,\n38747:22805,\n38748:20104,\n38749:20313,\n38750:19982,\n38751:35465,\n38752:36671,\n38753:38928,\n38754:20653,\n38755:24188,\n38756:22934,\n38757:23481,\n38758:24248,\n38759:25562,\n38760:25594,\n38761:25793,\n38762:26332,\n38763:26954,\n38764:27096,\n38765:27915,\n38766:28342,\n38767:29076,\n38768:29992,\n38769:31407,\n38770:32650,\n38771:32768,\n38772:33865,\n38773:33993,\n38774:35201,\n38775:35617,\n38776:36362,\n38777:36965,\n38778:38525,\n38779:39178,\n38780:24958,\n38781:25233,\n38782:27442,\n38784:27779,\n38785:28020,\n38786:32716,\n38787:32764,\n38788:28096,\n38789:32645,\n38790:34746,\n38791:35064,\n38792:26469,\n38793:33713,\n38794:38972,\n38795:38647,\n38796:27931,\n38797:32097,\n38798:33853,\n38799:37226,\n38800:20081,\n38801:21365,\n38802:23888,\n38803:27396,\n38804:28651,\n38805:34253,\n38806:34349,\n38807:35239,\n38808:21033,\n38809:21519,\n38810:23653,\n38811:26446,\n38812:26792,\n38813:29702,\n38814:29827,\n38815:30178,\n38816:35023,\n38817:35041,\n38818:37324,\n38819:38626,\n38820:38520,\n38821:24459,\n38822:29575,\n38823:31435,\n38824:33870,\n38825:25504,\n38826:30053,\n38827:21129,\n38828:27969,\n38829:28316,\n38830:29705,\n38831:30041,\n38832:30827,\n38833:31890,\n38834:38534,\n38835:31452,\n38836:40845,\n38837:20406,\n38838:24942,\n38839:26053,\n38840:34396,\n38841:20102,\n38842:20142,\n38843:20698,\n38844:20001,\n38845:20940,\n38846:23534,\n38847:26009,\n38848:26753,\n38849:28092,\n38850:29471,\n38851:30274,\n38852:30637,\n38853:31260,\n38854:31975,\n38855:33391,\n38856:35538,\n38857:36988,\n38858:37327,\n38859:38517,\n38860:38936,\n38861:21147,\n38862:32209,\n38863:20523,\n38864:21400,\n38865:26519,\n38866:28107,\n38867:29136,\n38868:29747,\n38869:33256,\n38870:36650,\n38871:38563,\n38872:40023,\n38873:40607,\n38874:29792,\n38875:22593,\n38876:28057,\n38877:32047,\n38878:39006,\n38879:20196,\n38880:20278,\n38881:20363,\n38882:20919,\n38883:21169,\n38884:23994,\n38885:24604,\n38886:29618,\n38887:31036,\n38888:33491,\n38889:37428,\n38890:38583,\n38891:38646,\n38892:38666,\n38893:40599,\n38894:40802,\n38895:26278,\n38896:27508,\n38897:21015,\n38898:21155,\n38899:28872,\n38900:35010,\n38901:24265,\n38902:24651,\n38903:24976,\n38904:28451,\n38905:29001,\n38906:31806,\n38907:32244,\n38908:32879,\n38976:34030,\n38977:36899,\n38978:37676,\n38979:21570,\n38980:39791,\n38981:27347,\n38982:28809,\n38983:36034,\n38984:36335,\n38985:38706,\n38986:21172,\n38987:23105,\n38988:24266,\n38989:24324,\n38990:26391,\n38991:27004,\n38992:27028,\n38993:28010,\n38994:28431,\n38995:29282,\n38996:29436,\n38997:31725,\n38998:32769,\n38999:32894,\n39000:34635,\n39001:37070,\n39002:20845,\n39003:40595,\n39004:31108,\n39005:32907,\n39006:37682,\n39007:35542,\n39008:20525,\n39009:21644,\n39010:35441,\n39011:27498,\n39012:36036,\n39013:33031,\n39014:24785,\n39015:26528,\n39016:40434,\n39017:20121,\n39018:20120,\n39019:39952,\n39020:35435,\n39021:34241,\n39022:34152,\n39023:26880,\n39024:28286,\n39025:30871,\n39026:33109,\n39071:24332,\n39072:19984,\n39073:19989,\n39074:20010,\n39075:20017,\n39076:20022,\n39077:20028,\n39078:20031,\n39079:20034,\n39080:20054,\n39081:20056,\n39082:20098,\n39083:20101,\n39084:35947,\n39085:20106,\n39086:33298,\n39087:24333,\n39088:20110,\n39089:20126,\n39090:20127,\n39091:20128,\n39092:20130,\n39093:20144,\n39094:20147,\n39095:20150,\n39096:20174,\n39097:20173,\n39098:20164,\n39099:20166,\n39100:20162,\n39101:20183,\n39102:20190,\n39103:20205,\n39104:20191,\n39105:20215,\n39106:20233,\n39107:20314,\n39108:20272,\n39109:20315,\n39110:20317,\n39111:20311,\n39112:20295,\n39113:20342,\n39114:20360,\n39115:20367,\n39116:20376,\n39117:20347,\n39118:20329,\n39119:20336,\n39120:20369,\n39121:20335,\n39122:20358,\n39123:20374,\n39124:20760,\n39125:20436,\n39126:20447,\n39127:20430,\n39128:20440,\n39129:20443,\n39130:20433,\n39131:20442,\n39132:20432,\n39133:20452,\n39134:20453,\n39135:20506,\n39136:20520,\n39137:20500,\n39138:20522,\n39139:20517,\n39140:20485,\n39141:20252,\n39142:20470,\n39143:20513,\n39144:20521,\n39145:20524,\n39146:20478,\n39147:20463,\n39148:20497,\n39149:20486,\n39150:20547,\n39151:20551,\n39152:26371,\n39153:20565,\n39154:20560,\n39155:20552,\n39156:20570,\n39157:20566,\n39158:20588,\n39159:20600,\n39160:20608,\n39161:20634,\n39162:20613,\n39163:20660,\n39164:20658,\n39232:20681,\n39233:20682,\n39234:20659,\n39235:20674,\n39236:20694,\n39237:20702,\n39238:20709,\n39239:20717,\n39240:20707,\n39241:20718,\n39242:20729,\n39243:20725,\n39244:20745,\n39245:20737,\n39246:20738,\n39247:20758,\n39248:20757,\n39249:20756,\n39250:20762,\n39251:20769,\n39252:20794,\n39253:20791,\n39254:20796,\n39255:20795,\n39256:20799,\n39257:20800,\n39258:20818,\n39259:20812,\n39260:20820,\n39261:20834,\n39262:31480,\n39263:20841,\n39264:20842,\n39265:20846,\n39266:20864,\n39267:20866,\n39268:22232,\n39269:20876,\n39270:20873,\n39271:20879,\n39272:20881,\n39273:20883,\n39274:20885,\n39275:20886,\n39276:20900,\n39277:20902,\n39278:20898,\n39279:20905,\n39280:20906,\n39281:20907,\n39282:20915,\n39283:20913,\n39284:20914,\n39285:20912,\n39286:20917,\n39287:20925,\n39288:20933,\n39289:20937,\n39290:20955,\n39291:20960,\n39292:34389,\n39293:20969,\n39294:20973,\n39296:20976,\n39297:20981,\n39298:20990,\n39299:20996,\n39300:21003,\n39301:21012,\n39302:21006,\n39303:21031,\n39304:21034,\n39305:21038,\n39306:21043,\n39307:21049,\n39308:21071,\n39309:21060,\n39310:21067,\n39311:21068,\n39312:21086,\n39313:21076,\n39314:21098,\n39315:21108,\n39316:21097,\n39317:21107,\n39318:21119,\n39319:21117,\n39320:21133,\n39321:21140,\n39322:21138,\n39323:21105,\n39324:21128,\n39325:21137,\n39326:36776,\n39327:36775,\n39328:21164,\n39329:21165,\n39330:21180,\n39331:21173,\n39332:21185,\n39333:21197,\n39334:21207,\n39335:21214,\n39336:21219,\n39337:21222,\n39338:39149,\n39339:21216,\n39340:21235,\n39341:21237,\n39342:21240,\n39343:21241,\n39344:21254,\n39345:21256,\n39346:30008,\n39347:21261,\n39348:21264,\n39349:21263,\n39350:21269,\n39351:21274,\n39352:21283,\n39353:21295,\n39354:21297,\n39355:21299,\n39356:21304,\n39357:21312,\n39358:21318,\n39359:21317,\n39360:19991,\n39361:21321,\n39362:21325,\n39363:20950,\n39364:21342,\n39365:21353,\n39366:21358,\n39367:22808,\n39368:21371,\n39369:21367,\n39370:21378,\n39371:21398,\n39372:21408,\n39373:21414,\n39374:21413,\n39375:21422,\n39376:21424,\n39377:21430,\n39378:21443,\n39379:31762,\n39380:38617,\n39381:21471,\n39382:26364,\n39383:29166,\n39384:21486,\n39385:21480,\n39386:21485,\n39387:21498,\n39388:21505,\n39389:21565,\n39390:21568,\n39391:21548,\n39392:21549,\n39393:21564,\n39394:21550,\n39395:21558,\n39396:21545,\n39397:21533,\n39398:21582,\n39399:21647,\n39400:21621,\n39401:21646,\n39402:21599,\n39403:21617,\n39404:21623,\n39405:21616,\n39406:21650,\n39407:21627,\n39408:21632,\n39409:21622,\n39410:21636,\n39411:21648,\n39412:21638,\n39413:21703,\n39414:21666,\n39415:21688,\n39416:21669,\n39417:21676,\n39418:21700,\n39419:21704,\n39420:21672,\n39488:21675,\n39489:21698,\n39490:21668,\n39491:21694,\n39492:21692,\n39493:21720,\n39494:21733,\n39495:21734,\n39496:21775,\n39497:21780,\n39498:21757,\n39499:21742,\n39500:21741,\n39501:21754,\n39502:21730,\n39503:21817,\n39504:21824,\n39505:21859,\n39506:21836,\n39507:21806,\n39508:21852,\n39509:21829,\n39510:21846,\n39511:21847,\n39512:21816,\n39513:21811,\n39514:21853,\n39515:21913,\n39516:21888,\n39517:21679,\n39518:21898,\n39519:21919,\n39520:21883,\n39521:21886,\n39522:21912,\n39523:21918,\n39524:21934,\n39525:21884,\n39526:21891,\n39527:21929,\n39528:21895,\n39529:21928,\n39530:21978,\n39531:21957,\n39532:21983,\n39533:21956,\n39534:21980,\n39535:21988,\n39536:21972,\n39537:22036,\n39538:22007,\n39539:22038,\n39540:22014,\n39541:22013,\n39542:22043,\n39543:22009,\n39544:22094,\n39545:22096,\n39546:29151,\n39547:22068,\n39548:22070,\n39549:22066,\n39550:22072,\n39552:22123,\n39553:22116,\n39554:22063,\n39555:22124,\n39556:22122,\n39557:22150,\n39558:22144,\n39559:22154,\n39560:22176,\n39561:22164,\n39562:22159,\n39563:22181,\n39564:22190,\n39565:22198,\n39566:22196,\n39567:22210,\n39568:22204,\n39569:22209,\n39570:22211,\n39571:22208,\n39572:22216,\n39573:22222,\n39574:22225,\n39575:22227,\n39576:22231,\n39577:22254,\n39578:22265,\n39579:22272,\n39580:22271,\n39581:22276,\n39582:22281,\n39583:22280,\n39584:22283,\n39585:22285,\n39586:22291,\n39587:22296,\n39588:22294,\n39589:21959,\n39590:22300,\n39591:22310,\n39592:22327,\n39593:22328,\n39594:22350,\n39595:22331,\n39596:22336,\n39597:22351,\n39598:22377,\n39599:22464,\n39600:22408,\n39601:22369,\n39602:22399,\n39603:22409,\n39604:22419,\n39605:22432,\n39606:22451,\n39607:22436,\n39608:22442,\n39609:22448,\n39610:22467,\n39611:22470,\n39612:22484,\n39613:22482,\n39614:22483,\n39615:22538,\n39616:22486,\n39617:22499,\n39618:22539,\n39619:22553,\n39620:22557,\n39621:22642,\n39622:22561,\n39623:22626,\n39624:22603,\n39625:22640,\n39626:27584,\n39627:22610,\n39628:22589,\n39629:22649,\n39630:22661,\n39631:22713,\n39632:22687,\n39633:22699,\n39634:22714,\n39635:22750,\n39636:22715,\n39637:22712,\n39638:22702,\n39639:22725,\n39640:22739,\n39641:22737,\n39642:22743,\n39643:22745,\n39644:22744,\n39645:22757,\n39646:22748,\n39647:22756,\n39648:22751,\n39649:22767,\n39650:22778,\n39651:22777,\n39652:22779,\n39653:22780,\n39654:22781,\n39655:22786,\n39656:22794,\n39657:22800,\n39658:22811,\n39659:26790,\n39660:22821,\n39661:22828,\n39662:22829,\n39663:22834,\n39664:22840,\n39665:22846,\n39666:31442,\n39667:22869,\n39668:22864,\n39669:22862,\n39670:22874,\n39671:22872,\n39672:22882,\n39673:22880,\n39674:22887,\n39675:22892,\n39676:22889,\n39744:22904,\n39745:22913,\n39746:22941,\n39747:20318,\n39748:20395,\n39749:22947,\n39750:22962,\n39751:22982,\n39752:23016,\n39753:23004,\n39754:22925,\n39755:23001,\n39756:23002,\n39757:23077,\n39758:23071,\n39759:23057,\n39760:23068,\n39761:23049,\n39762:23066,\n39763:23104,\n39764:23148,\n39765:23113,\n39766:23093,\n39767:23094,\n39768:23138,\n39769:23146,\n39770:23194,\n39771:23228,\n39772:23230,\n39773:23243,\n39774:23234,\n39775:23229,\n39776:23267,\n39777:23255,\n39778:23270,\n39779:23273,\n39780:23254,\n39781:23290,\n39782:23291,\n39783:23308,\n39784:23307,\n39785:23318,\n39786:23346,\n39787:23248,\n39788:23338,\n39789:23350,\n39790:23358,\n39791:23363,\n39792:23365,\n39793:23360,\n39794:23377,\n39795:23381,\n39796:23386,\n39797:23387,\n39798:23397,\n39799:23401,\n39800:23408,\n39801:23411,\n39802:23413,\n39803:23416,\n39804:25992,\n39805:23418,\n39806:23424,\n39808:23427,\n39809:23462,\n39810:23480,\n39811:23491,\n39812:23495,\n39813:23497,\n39814:23508,\n39815:23504,\n39816:23524,\n39817:23526,\n39818:23522,\n39819:23518,\n39820:23525,\n39821:23531,\n39822:23536,\n39823:23542,\n39824:23539,\n39825:23557,\n39826:23559,\n39827:23560,\n39828:23565,\n39829:23571,\n39830:23584,\n39831:23586,\n39832:23592,\n39833:23608,\n39834:23609,\n39835:23617,\n39836:23622,\n39837:23630,\n39838:23635,\n39839:23632,\n39840:23631,\n39841:23409,\n39842:23660,\n39843:23662,\n39844:20066,\n39845:23670,\n39846:23673,\n39847:23692,\n39848:23697,\n39849:23700,\n39850:22939,\n39851:23723,\n39852:23739,\n39853:23734,\n39854:23740,\n39855:23735,\n39856:23749,\n39857:23742,\n39858:23751,\n39859:23769,\n39860:23785,\n39861:23805,\n39862:23802,\n39863:23789,\n39864:23948,\n39865:23786,\n39866:23819,\n39867:23829,\n39868:23831,\n39869:23900,\n39870:23839,\n39871:23835,\n39872:23825,\n39873:23828,\n39874:23842,\n39875:23834,\n39876:23833,\n39877:23832,\n39878:23884,\n39879:23890,\n39880:23886,\n39881:23883,\n39882:23916,\n39883:23923,\n39884:23926,\n39885:23943,\n39886:23940,\n39887:23938,\n39888:23970,\n39889:23965,\n39890:23980,\n39891:23982,\n39892:23997,\n39893:23952,\n39894:23991,\n39895:23996,\n39896:24009,\n39897:24013,\n39898:24019,\n39899:24018,\n39900:24022,\n39901:24027,\n39902:24043,\n39903:24050,\n39904:24053,\n39905:24075,\n39906:24090,\n39907:24089,\n39908:24081,\n39909:24091,\n39910:24118,\n39911:24119,\n39912:24132,\n39913:24131,\n39914:24128,\n39915:24142,\n39916:24151,\n39917:24148,\n39918:24159,\n39919:24162,\n39920:24164,\n39921:24135,\n39922:24181,\n39923:24182,\n39924:24186,\n39925:40636,\n39926:24191,\n39927:24224,\n39928:24257,\n39929:24258,\n39930:24264,\n39931:24272,\n39932:24271,\n40000:24278,\n40001:24291,\n40002:24285,\n40003:24282,\n40004:24283,\n40005:24290,\n40006:24289,\n40007:24296,\n40008:24297,\n40009:24300,\n40010:24305,\n40011:24307,\n40012:24304,\n40013:24308,\n40014:24312,\n40015:24318,\n40016:24323,\n40017:24329,\n40018:24413,\n40019:24412,\n40020:24331,\n40021:24337,\n40022:24342,\n40023:24361,\n40024:24365,\n40025:24376,\n40026:24385,\n40027:24392,\n40028:24396,\n40029:24398,\n40030:24367,\n40031:24401,\n40032:24406,\n40033:24407,\n40034:24409,\n40035:24417,\n40036:24429,\n40037:24435,\n40038:24439,\n40039:24451,\n40040:24450,\n40041:24447,\n40042:24458,\n40043:24456,\n40044:24465,\n40045:24455,\n40046:24478,\n40047:24473,\n40048:24472,\n40049:24480,\n40050:24488,\n40051:24493,\n40052:24508,\n40053:24534,\n40054:24571,\n40055:24548,\n40056:24568,\n40057:24561,\n40058:24541,\n40059:24755,\n40060:24575,\n40061:24609,\n40062:24672,\n40064:24601,\n40065:24592,\n40066:24617,\n40067:24590,\n40068:24625,\n40069:24603,\n40070:24597,\n40071:24619,\n40072:24614,\n40073:24591,\n40074:24634,\n40075:24666,\n40076:24641,\n40077:24682,\n40078:24695,\n40079:24671,\n40080:24650,\n40081:24646,\n40082:24653,\n40083:24675,\n40084:24643,\n40085:24676,\n40086:24642,\n40087:24684,\n40088:24683,\n40089:24665,\n40090:24705,\n40091:24717,\n40092:24807,\n40093:24707,\n40094:24730,\n40095:24708,\n40096:24731,\n40097:24726,\n40098:24727,\n40099:24722,\n40100:24743,\n40101:24715,\n40102:24801,\n40103:24760,\n40104:24800,\n40105:24787,\n40106:24756,\n40107:24560,\n40108:24765,\n40109:24774,\n40110:24757,\n40111:24792,\n40112:24909,\n40113:24853,\n40114:24838,\n40115:24822,\n40116:24823,\n40117:24832,\n40118:24820,\n40119:24826,\n40120:24835,\n40121:24865,\n40122:24827,\n40123:24817,\n40124:24845,\n40125:24846,\n40126:24903,\n40127:24894,\n40128:24872,\n40129:24871,\n40130:24906,\n40131:24895,\n40132:24892,\n40133:24876,\n40134:24884,\n40135:24893,\n40136:24898,\n40137:24900,\n40138:24947,\n40139:24951,\n40140:24920,\n40141:24921,\n40142:24922,\n40143:24939,\n40144:24948,\n40145:24943,\n40146:24933,\n40147:24945,\n40148:24927,\n40149:24925,\n40150:24915,\n40151:24949,\n40152:24985,\n40153:24982,\n40154:24967,\n40155:25004,\n40156:24980,\n40157:24986,\n40158:24970,\n40159:24977,\n40160:25003,\n40161:25006,\n40162:25036,\n40163:25034,\n40164:25033,\n40165:25079,\n40166:25032,\n40167:25027,\n40168:25030,\n40169:25018,\n40170:25035,\n40171:32633,\n40172:25037,\n40173:25062,\n40174:25059,\n40175:25078,\n40176:25082,\n40177:25076,\n40178:25087,\n40179:25085,\n40180:25084,\n40181:25086,\n40182:25088,\n40183:25096,\n40184:25097,\n40185:25101,\n40186:25100,\n40187:25108,\n40188:25115,\n40256:25118,\n40257:25121,\n40258:25130,\n40259:25134,\n40260:25136,\n40261:25138,\n40262:25139,\n40263:25153,\n40264:25166,\n40265:25182,\n40266:25187,\n40267:25179,\n40268:25184,\n40269:25192,\n40270:25212,\n40271:25218,\n40272:25225,\n40273:25214,\n40274:25234,\n40275:25235,\n40276:25238,\n40277:25300,\n40278:25219,\n40279:25236,\n40280:25303,\n40281:25297,\n40282:25275,\n40283:25295,\n40284:25343,\n40285:25286,\n40286:25812,\n40287:25288,\n40288:25308,\n40289:25292,\n40290:25290,\n40291:25282,\n40292:25287,\n40293:25243,\n40294:25289,\n40295:25356,\n40296:25326,\n40297:25329,\n40298:25383,\n40299:25346,\n40300:25352,\n40301:25327,\n40302:25333,\n40303:25424,\n40304:25406,\n40305:25421,\n40306:25628,\n40307:25423,\n40308:25494,\n40309:25486,\n40310:25472,\n40311:25515,\n40312:25462,\n40313:25507,\n40314:25487,\n40315:25481,\n40316:25503,\n40317:25525,\n40318:25451,\n40320:25449,\n40321:25534,\n40322:25577,\n40323:25536,\n40324:25542,\n40325:25571,\n40326:25545,\n40327:25554,\n40328:25590,\n40329:25540,\n40330:25622,\n40331:25652,\n40332:25606,\n40333:25619,\n40334:25638,\n40335:25654,\n40336:25885,\n40337:25623,\n40338:25640,\n40339:25615,\n40340:25703,\n40341:25711,\n40342:25718,\n40343:25678,\n40344:25898,\n40345:25749,\n40346:25747,\n40347:25765,\n40348:25769,\n40349:25736,\n40350:25788,\n40351:25818,\n40352:25810,\n40353:25797,\n40354:25799,\n40355:25787,\n40356:25816,\n40357:25794,\n40358:25841,\n40359:25831,\n40360:33289,\n40361:25824,\n40362:25825,\n40363:25260,\n40364:25827,\n40365:25839,\n40366:25900,\n40367:25846,\n40368:25844,\n40369:25842,\n40370:25850,\n40371:25856,\n40372:25853,\n40373:25880,\n40374:25884,\n40375:25861,\n40376:25892,\n40377:25891,\n40378:25899,\n40379:25908,\n40380:25909,\n40381:25911,\n40382:25910,\n40383:25912,\n40384:30027,\n40385:25928,\n40386:25942,\n40387:25941,\n40388:25933,\n40389:25944,\n40390:25950,\n40391:25949,\n40392:25970,\n40393:25976,\n40394:25986,\n40395:25987,\n40396:35722,\n40397:26011,\n40398:26015,\n40399:26027,\n40400:26039,\n40401:26051,\n40402:26054,\n40403:26049,\n40404:26052,\n40405:26060,\n40406:26066,\n40407:26075,\n40408:26073,\n40409:26080,\n40410:26081,\n40411:26097,\n40412:26482,\n40413:26122,\n40414:26115,\n40415:26107,\n40416:26483,\n40417:26165,\n40418:26166,\n40419:26164,\n40420:26140,\n40421:26191,\n40422:26180,\n40423:26185,\n40424:26177,\n40425:26206,\n40426:26205,\n40427:26212,\n40428:26215,\n40429:26216,\n40430:26207,\n40431:26210,\n40432:26224,\n40433:26243,\n40434:26248,\n40435:26254,\n40436:26249,\n40437:26244,\n40438:26264,\n40439:26269,\n40440:26305,\n40441:26297,\n40442:26313,\n40443:26302,\n40444:26300,\n40512:26308,\n40513:26296,\n40514:26326,\n40515:26330,\n40516:26336,\n40517:26175,\n40518:26342,\n40519:26345,\n40520:26352,\n40521:26357,\n40522:26359,\n40523:26383,\n40524:26390,\n40525:26398,\n40526:26406,\n40527:26407,\n40528:38712,\n40529:26414,\n40530:26431,\n40531:26422,\n40532:26433,\n40533:26424,\n40534:26423,\n40535:26438,\n40536:26462,\n40537:26464,\n40538:26457,\n40539:26467,\n40540:26468,\n40541:26505,\n40542:26480,\n40543:26537,\n40544:26492,\n40545:26474,\n40546:26508,\n40547:26507,\n40548:26534,\n40549:26529,\n40550:26501,\n40551:26551,\n40552:26607,\n40553:26548,\n40554:26604,\n40555:26547,\n40556:26601,\n40557:26552,\n40558:26596,\n40559:26590,\n40560:26589,\n40561:26594,\n40562:26606,\n40563:26553,\n40564:26574,\n40565:26566,\n40566:26599,\n40567:27292,\n40568:26654,\n40569:26694,\n40570:26665,\n40571:26688,\n40572:26701,\n40573:26674,\n40574:26702,\n40576:26803,\n40577:26667,\n40578:26713,\n40579:26723,\n40580:26743,\n40581:26751,\n40582:26783,\n40583:26767,\n40584:26797,\n40585:26772,\n40586:26781,\n40587:26779,\n40588:26755,\n40589:27310,\n40590:26809,\n40591:26740,\n40592:26805,\n40593:26784,\n40594:26810,\n40595:26895,\n40596:26765,\n40597:26750,\n40598:26881,\n40599:26826,\n40600:26888,\n40601:26840,\n40602:26914,\n40603:26918,\n40604:26849,\n40605:26892,\n40606:26829,\n40607:26836,\n40608:26855,\n40609:26837,\n40610:26934,\n40611:26898,\n40612:26884,\n40613:26839,\n40614:26851,\n40615:26917,\n40616:26873,\n40617:26848,\n40618:26863,\n40619:26920,\n40620:26922,\n40621:26906,\n40622:26915,\n40623:26913,\n40624:26822,\n40625:27001,\n40626:26999,\n40627:26972,\n40628:27000,\n40629:26987,\n40630:26964,\n40631:27006,\n40632:26990,\n40633:26937,\n40634:26996,\n40635:26941,\n40636:26969,\n40637:26928,\n40638:26977,\n40639:26974,\n40640:26973,\n40641:27009,\n40642:26986,\n40643:27058,\n40644:27054,\n40645:27088,\n40646:27071,\n40647:27073,\n40648:27091,\n40649:27070,\n40650:27086,\n40651:23528,\n40652:27082,\n40653:27101,\n40654:27067,\n40655:27075,\n40656:27047,\n40657:27182,\n40658:27025,\n40659:27040,\n40660:27036,\n40661:27029,\n40662:27060,\n40663:27102,\n40664:27112,\n40665:27138,\n40666:27163,\n40667:27135,\n40668:27402,\n40669:27129,\n40670:27122,\n40671:27111,\n40672:27141,\n40673:27057,\n40674:27166,\n40675:27117,\n40676:27156,\n40677:27115,\n40678:27146,\n40679:27154,\n40680:27329,\n40681:27171,\n40682:27155,\n40683:27204,\n40684:27148,\n40685:27250,\n40686:27190,\n40687:27256,\n40688:27207,\n40689:27234,\n40690:27225,\n40691:27238,\n40692:27208,\n40693:27192,\n40694:27170,\n40695:27280,\n40696:27277,\n40697:27296,\n40698:27268,\n40699:27298,\n40700:27299,\n40768:27287,\n40769:34327,\n40770:27323,\n40771:27331,\n40772:27330,\n40773:27320,\n40774:27315,\n40775:27308,\n40776:27358,\n40777:27345,\n40778:27359,\n40779:27306,\n40780:27354,\n40781:27370,\n40782:27387,\n40783:27397,\n40784:34326,\n40785:27386,\n40786:27410,\n40787:27414,\n40788:39729,\n40789:27423,\n40790:27448,\n40791:27447,\n40792:30428,\n40793:27449,\n40794:39150,\n40795:27463,\n40796:27459,\n40797:27465,\n40798:27472,\n40799:27481,\n40800:27476,\n40801:27483,\n40802:27487,\n40803:27489,\n40804:27512,\n40805:27513,\n40806:27519,\n40807:27520,\n40808:27524,\n40809:27523,\n40810:27533,\n40811:27544,\n40812:27541,\n40813:27550,\n40814:27556,\n40815:27562,\n40816:27563,\n40817:27567,\n40818:27570,\n40819:27569,\n40820:27571,\n40821:27575,\n40822:27580,\n40823:27590,\n40824:27595,\n40825:27603,\n40826:27615,\n40827:27628,\n40828:27627,\n40829:27635,\n40830:27631,\n40832:40638,\n40833:27656,\n40834:27667,\n40835:27668,\n40836:27675,\n40837:27684,\n40838:27683,\n40839:27742,\n40840:27733,\n40841:27746,\n40842:27754,\n40843:27778,\n40844:27789,\n40845:27802,\n40846:27777,\n40847:27803,\n40848:27774,\n40849:27752,\n40850:27763,\n40851:27794,\n40852:27792,\n40853:27844,\n40854:27889,\n40855:27859,\n40856:27837,\n40857:27863,\n40858:27845,\n40859:27869,\n40860:27822,\n40861:27825,\n40862:27838,\n40863:27834,\n40864:27867,\n40865:27887,\n40866:27865,\n40867:27882,\n40868:27935,\n40869:34893,\n40870:27958,\n40871:27947,\n40872:27965,\n40873:27960,\n40874:27929,\n40875:27957,\n40876:27955,\n40877:27922,\n40878:27916,\n40879:28003,\n40880:28051,\n40881:28004,\n40882:27994,\n40883:28025,\n40884:27993,\n40885:28046,\n40886:28053,\n40887:28644,\n40888:28037,\n40889:28153,\n40890:28181,\n40891:28170,\n40892:28085,\n40893:28103,\n40894:28134,\n40895:28088,\n40896:28102,\n40897:28140,\n40898:28126,\n40899:28108,\n40900:28136,\n40901:28114,\n40902:28101,\n40903:28154,\n40904:28121,\n40905:28132,\n40906:28117,\n40907:28138,\n40908:28142,\n40909:28205,\n40910:28270,\n40911:28206,\n40912:28185,\n40913:28274,\n40914:28255,\n40915:28222,\n40916:28195,\n40917:28267,\n40918:28203,\n40919:28278,\n40920:28237,\n40921:28191,\n40922:28227,\n40923:28218,\n40924:28238,\n40925:28196,\n40926:28415,\n40927:28189,\n40928:28216,\n40929:28290,\n40930:28330,\n40931:28312,\n40932:28361,\n40933:28343,\n40934:28371,\n40935:28349,\n40936:28335,\n40937:28356,\n40938:28338,\n40939:28372,\n40940:28373,\n40941:28303,\n40942:28325,\n40943:28354,\n40944:28319,\n40945:28481,\n40946:28433,\n40947:28748,\n40948:28396,\n40949:28408,\n40950:28414,\n40951:28479,\n40952:28402,\n40953:28465,\n40954:28399,\n40955:28466,\n40956:28364,\n57408:28478,\n57409:28435,\n57410:28407,\n57411:28550,\n57412:28538,\n57413:28536,\n57414:28545,\n57415:28544,\n57416:28527,\n57417:28507,\n57418:28659,\n57419:28525,\n57420:28546,\n57421:28540,\n57422:28504,\n57423:28558,\n57424:28561,\n57425:28610,\n57426:28518,\n57427:28595,\n57428:28579,\n57429:28577,\n57430:28580,\n57431:28601,\n57432:28614,\n57433:28586,\n57434:28639,\n57435:28629,\n57436:28652,\n57437:28628,\n57438:28632,\n57439:28657,\n57440:28654,\n57441:28635,\n57442:28681,\n57443:28683,\n57444:28666,\n57445:28689,\n57446:28673,\n57447:28687,\n57448:28670,\n57449:28699,\n57450:28698,\n57451:28532,\n57452:28701,\n57453:28696,\n57454:28703,\n57455:28720,\n57456:28734,\n57457:28722,\n57458:28753,\n57459:28771,\n57460:28825,\n57461:28818,\n57462:28847,\n57463:28913,\n57464:28844,\n57465:28856,\n57466:28851,\n57467:28846,\n57468:28895,\n57469:28875,\n57470:28893,\n57472:28889,\n57473:28937,\n57474:28925,\n57475:28956,\n57476:28953,\n57477:29029,\n57478:29013,\n57479:29064,\n57480:29030,\n57481:29026,\n57482:29004,\n57483:29014,\n57484:29036,\n57485:29071,\n57486:29179,\n57487:29060,\n57488:29077,\n57489:29096,\n57490:29100,\n57491:29143,\n57492:29113,\n57493:29118,\n57494:29138,\n57495:29129,\n57496:29140,\n57497:29134,\n57498:29152,\n57499:29164,\n57500:29159,\n57501:29173,\n57502:29180,\n57503:29177,\n57504:29183,\n57505:29197,\n57506:29200,\n57507:29211,\n57508:29224,\n57509:29229,\n57510:29228,\n57511:29232,\n57512:29234,\n57513:29243,\n57514:29244,\n57515:29247,\n57516:29248,\n57517:29254,\n57518:29259,\n57519:29272,\n57520:29300,\n57521:29310,\n57522:29314,\n57523:29313,\n57524:29319,\n57525:29330,\n57526:29334,\n57527:29346,\n57528:29351,\n57529:29369,\n57530:29362,\n57531:29379,\n57532:29382,\n57533:29380,\n57534:29390,\n57535:29394,\n57536:29410,\n57537:29408,\n57538:29409,\n57539:29433,\n57540:29431,\n57541:20495,\n57542:29463,\n57543:29450,\n57544:29468,\n57545:29462,\n57546:29469,\n57547:29492,\n57548:29487,\n57549:29481,\n57550:29477,\n57551:29502,\n57552:29518,\n57553:29519,\n57554:40664,\n57555:29527,\n57556:29546,\n57557:29544,\n57558:29552,\n57559:29560,\n57560:29557,\n57561:29563,\n57562:29562,\n57563:29640,\n57564:29619,\n57565:29646,\n57566:29627,\n57567:29632,\n57568:29669,\n57569:29678,\n57570:29662,\n57571:29858,\n57572:29701,\n57573:29807,\n57574:29733,\n57575:29688,\n57576:29746,\n57577:29754,\n57578:29781,\n57579:29759,\n57580:29791,\n57581:29785,\n57582:29761,\n57583:29788,\n57584:29801,\n57585:29808,\n57586:29795,\n57587:29802,\n57588:29814,\n57589:29822,\n57590:29835,\n57591:29854,\n57592:29863,\n57593:29898,\n57594:29903,\n57595:29908,\n57596:29681,\n57664:29920,\n57665:29923,\n57666:29927,\n57667:29929,\n57668:29934,\n57669:29938,\n57670:29936,\n57671:29937,\n57672:29944,\n57673:29943,\n57674:29956,\n57675:29955,\n57676:29957,\n57677:29964,\n57678:29966,\n57679:29965,\n57680:29973,\n57681:29971,\n57682:29982,\n57683:29990,\n57684:29996,\n57685:30012,\n57686:30020,\n57687:30029,\n57688:30026,\n57689:30025,\n57690:30043,\n57691:30022,\n57692:30042,\n57693:30057,\n57694:30052,\n57695:30055,\n57696:30059,\n57697:30061,\n57698:30072,\n57699:30070,\n57700:30086,\n57701:30087,\n57702:30068,\n57703:30090,\n57704:30089,\n57705:30082,\n57706:30100,\n57707:30106,\n57708:30109,\n57709:30117,\n57710:30115,\n57711:30146,\n57712:30131,\n57713:30147,\n57714:30133,\n57715:30141,\n57716:30136,\n57717:30140,\n57718:30129,\n57719:30157,\n57720:30154,\n57721:30162,\n57722:30169,\n57723:30179,\n57724:30174,\n57725:30206,\n57726:30207,\n57728:30204,\n57729:30209,\n57730:30192,\n57731:30202,\n57732:30194,\n57733:30195,\n57734:30219,\n57735:30221,\n57736:30217,\n57737:30239,\n57738:30247,\n57739:30240,\n57740:30241,\n57741:30242,\n57742:30244,\n57743:30260,\n57744:30256,\n57745:30267,\n57746:30279,\n57747:30280,\n57748:30278,\n57749:30300,\n57750:30296,\n57751:30305,\n57752:30306,\n57753:30312,\n57754:30313,\n57755:30314,\n57756:30311,\n57757:30316,\n57758:30320,\n57759:30322,\n57760:30326,\n57761:30328,\n57762:30332,\n57763:30336,\n57764:30339,\n57765:30344,\n57766:30347,\n57767:30350,\n57768:30358,\n57769:30355,\n57770:30361,\n57771:30362,\n57772:30384,\n57773:30388,\n57774:30392,\n57775:30393,\n57776:30394,\n57777:30402,\n57778:30413,\n57779:30422,\n57780:30418,\n57781:30430,\n57782:30433,\n57783:30437,\n57784:30439,\n57785:30442,\n57786:34351,\n57787:30459,\n57788:30472,\n57789:30471,\n57790:30468,\n57791:30505,\n57792:30500,\n57793:30494,\n57794:30501,\n57795:30502,\n57796:30491,\n57797:30519,\n57798:30520,\n57799:30535,\n57800:30554,\n57801:30568,\n57802:30571,\n57803:30555,\n57804:30565,\n57805:30591,\n57806:30590,\n57807:30585,\n57808:30606,\n57809:30603,\n57810:30609,\n57811:30624,\n57812:30622,\n57813:30640,\n57814:30646,\n57815:30649,\n57816:30655,\n57817:30652,\n57818:30653,\n57819:30651,\n57820:30663,\n57821:30669,\n57822:30679,\n57823:30682,\n57824:30684,\n57825:30691,\n57826:30702,\n57827:30716,\n57828:30732,\n57829:30738,\n57830:31014,\n57831:30752,\n57832:31018,\n57833:30789,\n57834:30862,\n57835:30836,\n57836:30854,\n57837:30844,\n57838:30874,\n57839:30860,\n57840:30883,\n57841:30901,\n57842:30890,\n57843:30895,\n57844:30929,\n57845:30918,\n57846:30923,\n57847:30932,\n57848:30910,\n57849:30908,\n57850:30917,\n57851:30922,\n57852:30956,\n57920:30951,\n57921:30938,\n57922:30973,\n57923:30964,\n57924:30983,\n57925:30994,\n57926:30993,\n57927:31001,\n57928:31020,\n57929:31019,\n57930:31040,\n57931:31072,\n57932:31063,\n57933:31071,\n57934:31066,\n57935:31061,\n57936:31059,\n57937:31098,\n57938:31103,\n57939:31114,\n57940:31133,\n57941:31143,\n57942:40779,\n57943:31146,\n57944:31150,\n57945:31155,\n57946:31161,\n57947:31162,\n57948:31177,\n57949:31189,\n57950:31207,\n57951:31212,\n57952:31201,\n57953:31203,\n57954:31240,\n57955:31245,\n57956:31256,\n57957:31257,\n57958:31264,\n57959:31263,\n57960:31104,\n57961:31281,\n57962:31291,\n57963:31294,\n57964:31287,\n57965:31299,\n57966:31319,\n57967:31305,\n57968:31329,\n57969:31330,\n57970:31337,\n57971:40861,\n57972:31344,\n57973:31353,\n57974:31357,\n57975:31368,\n57976:31383,\n57977:31381,\n57978:31384,\n57979:31382,\n57980:31401,\n57981:31432,\n57982:31408,\n57984:31414,\n57985:31429,\n57986:31428,\n57987:31423,\n57988:36995,\n57989:31431,\n57990:31434,\n57991:31437,\n57992:31439,\n57993:31445,\n57994:31443,\n57995:31449,\n57996:31450,\n57997:31453,\n57998:31457,\n57999:31458,\n58000:31462,\n58001:31469,\n58002:31472,\n58003:31490,\n58004:31503,\n58005:31498,\n58006:31494,\n58007:31539,\n58008:31512,\n58009:31513,\n58010:31518,\n58011:31541,\n58012:31528,\n58013:31542,\n58014:31568,\n58015:31610,\n58016:31492,\n58017:31565,\n58018:31499,\n58019:31564,\n58020:31557,\n58021:31605,\n58022:31589,\n58023:31604,\n58024:31591,\n58025:31600,\n58026:31601,\n58027:31596,\n58028:31598,\n58029:31645,\n58030:31640,\n58031:31647,\n58032:31629,\n58033:31644,\n58034:31642,\n58035:31627,\n58036:31634,\n58037:31631,\n58038:31581,\n58039:31641,\n58040:31691,\n58041:31681,\n58042:31692,\n58043:31695,\n58044:31668,\n58045:31686,\n58046:31709,\n58047:31721,\n58048:31761,\n58049:31764,\n58050:31718,\n58051:31717,\n58052:31840,\n58053:31744,\n58054:31751,\n58055:31763,\n58056:31731,\n58057:31735,\n58058:31767,\n58059:31757,\n58060:31734,\n58061:31779,\n58062:31783,\n58063:31786,\n58064:31775,\n58065:31799,\n58066:31787,\n58067:31805,\n58068:31820,\n58069:31811,\n58070:31828,\n58071:31823,\n58072:31808,\n58073:31824,\n58074:31832,\n58075:31839,\n58076:31844,\n58077:31830,\n58078:31845,\n58079:31852,\n58080:31861,\n58081:31875,\n58082:31888,\n58083:31908,\n58084:31917,\n58085:31906,\n58086:31915,\n58087:31905,\n58088:31912,\n58089:31923,\n58090:31922,\n58091:31921,\n58092:31918,\n58093:31929,\n58094:31933,\n58095:31936,\n58096:31941,\n58097:31938,\n58098:31960,\n58099:31954,\n58100:31964,\n58101:31970,\n58102:39739,\n58103:31983,\n58104:31986,\n58105:31988,\n58106:31990,\n58107:31994,\n58108:32006,\n58176:32002,\n58177:32028,\n58178:32021,\n58179:32010,\n58180:32069,\n58181:32075,\n58182:32046,\n58183:32050,\n58184:32063,\n58185:32053,\n58186:32070,\n58187:32115,\n58188:32086,\n58189:32078,\n58190:32114,\n58191:32104,\n58192:32110,\n58193:32079,\n58194:32099,\n58195:32147,\n58196:32137,\n58197:32091,\n58198:32143,\n58199:32125,\n58200:32155,\n58201:32186,\n58202:32174,\n58203:32163,\n58204:32181,\n58205:32199,\n58206:32189,\n58207:32171,\n58208:32317,\n58209:32162,\n58210:32175,\n58211:32220,\n58212:32184,\n58213:32159,\n58214:32176,\n58215:32216,\n58216:32221,\n58217:32228,\n58218:32222,\n58219:32251,\n58220:32242,\n58221:32225,\n58222:32261,\n58223:32266,\n58224:32291,\n58225:32289,\n58226:32274,\n58227:32305,\n58228:32287,\n58229:32265,\n58230:32267,\n58231:32290,\n58232:32326,\n58233:32358,\n58234:32315,\n58235:32309,\n58236:32313,\n58237:32323,\n58238:32311,\n58240:32306,\n58241:32314,\n58242:32359,\n58243:32349,\n58244:32342,\n58245:32350,\n58246:32345,\n58247:32346,\n58248:32377,\n58249:32362,\n58250:32361,\n58251:32380,\n58252:32379,\n58253:32387,\n58254:32213,\n58255:32381,\n58256:36782,\n58257:32383,\n58258:32392,\n58259:32393,\n58260:32396,\n58261:32402,\n58262:32400,\n58263:32403,\n58264:32404,\n58265:32406,\n58266:32398,\n58267:32411,\n58268:32412,\n58269:32568,\n58270:32570,\n58271:32581,\n58272:32588,\n58273:32589,\n58274:32590,\n58275:32592,\n58276:32593,\n58277:32597,\n58278:32596,\n58279:32600,\n58280:32607,\n58281:32608,\n58282:32616,\n58283:32617,\n58284:32615,\n58285:32632,\n58286:32642,\n58287:32646,\n58288:32643,\n58289:32648,\n58290:32647,\n58291:32652,\n58292:32660,\n58293:32670,\n58294:32669,\n58295:32666,\n58296:32675,\n58297:32687,\n58298:32690,\n58299:32697,\n58300:32686,\n58301:32694,\n58302:32696,\n58303:35697,\n58304:32709,\n58305:32710,\n58306:32714,\n58307:32725,\n58308:32724,\n58309:32737,\n58310:32742,\n58311:32745,\n58312:32755,\n58313:32761,\n58314:39132,\n58315:32774,\n58316:32772,\n58317:32779,\n58318:32786,\n58319:32792,\n58320:32793,\n58321:32796,\n58322:32801,\n58323:32808,\n58324:32831,\n58325:32827,\n58326:32842,\n58327:32838,\n58328:32850,\n58329:32856,\n58330:32858,\n58331:32863,\n58332:32866,\n58333:32872,\n58334:32883,\n58335:32882,\n58336:32880,\n58337:32886,\n58338:32889,\n58339:32893,\n58340:32895,\n58341:32900,\n58342:32902,\n58343:32901,\n58344:32923,\n58345:32915,\n58346:32922,\n58347:32941,\n58348:20880,\n58349:32940,\n58350:32987,\n58351:32997,\n58352:32985,\n58353:32989,\n58354:32964,\n58355:32986,\n58356:32982,\n58357:33033,\n58358:33007,\n58359:33009,\n58360:33051,\n58361:33065,\n58362:33059,\n58363:33071,\n58364:33099,\n58432:38539,\n58433:33094,\n58434:33086,\n58435:33107,\n58436:33105,\n58437:33020,\n58438:33137,\n58439:33134,\n58440:33125,\n58441:33126,\n58442:33140,\n58443:33155,\n58444:33160,\n58445:33162,\n58446:33152,\n58447:33154,\n58448:33184,\n58449:33173,\n58450:33188,\n58451:33187,\n58452:33119,\n58453:33171,\n58454:33193,\n58455:33200,\n58456:33205,\n58457:33214,\n58458:33208,\n58459:33213,\n58460:33216,\n58461:33218,\n58462:33210,\n58463:33225,\n58464:33229,\n58465:33233,\n58466:33241,\n58467:33240,\n58468:33224,\n58469:33242,\n58470:33247,\n58471:33248,\n58472:33255,\n58473:33274,\n58474:33275,\n58475:33278,\n58476:33281,\n58477:33282,\n58478:33285,\n58479:33287,\n58480:33290,\n58481:33293,\n58482:33296,\n58483:33302,\n58484:33321,\n58485:33323,\n58486:33336,\n58487:33331,\n58488:33344,\n58489:33369,\n58490:33368,\n58491:33373,\n58492:33370,\n58493:33375,\n58494:33380,\n58496:33378,\n58497:33384,\n58498:33386,\n58499:33387,\n58500:33326,\n58501:33393,\n58502:33399,\n58503:33400,\n58504:33406,\n58505:33421,\n58506:33426,\n58507:33451,\n58508:33439,\n58509:33467,\n58510:33452,\n58511:33505,\n58512:33507,\n58513:33503,\n58514:33490,\n58515:33524,\n58516:33523,\n58517:33530,\n58518:33683,\n58519:33539,\n58520:33531,\n58521:33529,\n58522:33502,\n58523:33542,\n58524:33500,\n58525:33545,\n58526:33497,\n58527:33589,\n58528:33588,\n58529:33558,\n58530:33586,\n58531:33585,\n58532:33600,\n58533:33593,\n58534:33616,\n58535:33605,\n58536:33583,\n58537:33579,\n58538:33559,\n58539:33560,\n58540:33669,\n58541:33690,\n58542:33706,\n58543:33695,\n58544:33698,\n58545:33686,\n58546:33571,\n58547:33678,\n58548:33671,\n58549:33674,\n58550:33660,\n58551:33717,\n58552:33651,\n58553:33653,\n58554:33696,\n58555:33673,\n58556:33704,\n58557:33780,\n58558:33811,\n58559:33771,\n58560:33742,\n58561:33789,\n58562:33795,\n58563:33752,\n58564:33803,\n58565:33729,\n58566:33783,\n58567:33799,\n58568:33760,\n58569:33778,\n58570:33805,\n58571:33826,\n58572:33824,\n58573:33725,\n58574:33848,\n58575:34054,\n58576:33787,\n58577:33901,\n58578:33834,\n58579:33852,\n58580:34138,\n58581:33924,\n58582:33911,\n58583:33899,\n58584:33965,\n58585:33902,\n58586:33922,\n58587:33897,\n58588:33862,\n58589:33836,\n58590:33903,\n58591:33913,\n58592:33845,\n58593:33994,\n58594:33890,\n58595:33977,\n58596:33983,\n58597:33951,\n58598:34009,\n58599:33997,\n58600:33979,\n58601:34010,\n58602:34000,\n58603:33985,\n58604:33990,\n58605:34006,\n58606:33953,\n58607:34081,\n58608:34047,\n58609:34036,\n58610:34071,\n58611:34072,\n58612:34092,\n58613:34079,\n58614:34069,\n58615:34068,\n58616:34044,\n58617:34112,\n58618:34147,\n58619:34136,\n58620:34120,\n58688:34113,\n58689:34306,\n58690:34123,\n58691:34133,\n58692:34176,\n58693:34212,\n58694:34184,\n58695:34193,\n58696:34186,\n58697:34216,\n58698:34157,\n58699:34196,\n58700:34203,\n58701:34282,\n58702:34183,\n58703:34204,\n58704:34167,\n58705:34174,\n58706:34192,\n58707:34249,\n58708:34234,\n58709:34255,\n58710:34233,\n58711:34256,\n58712:34261,\n58713:34269,\n58714:34277,\n58715:34268,\n58716:34297,\n58717:34314,\n58718:34323,\n58719:34315,\n58720:34302,\n58721:34298,\n58722:34310,\n58723:34338,\n58724:34330,\n58725:34352,\n58726:34367,\n58727:34381,\n58728:20053,\n58729:34388,\n58730:34399,\n58731:34407,\n58732:34417,\n58733:34451,\n58734:34467,\n58735:34473,\n58736:34474,\n58737:34443,\n58738:34444,\n58739:34486,\n58740:34479,\n58741:34500,\n58742:34502,\n58743:34480,\n58744:34505,\n58745:34851,\n58746:34475,\n58747:34516,\n58748:34526,\n58749:34537,\n58750:34540,\n58752:34527,\n58753:34523,\n58754:34543,\n58755:34578,\n58756:34566,\n58757:34568,\n58758:34560,\n58759:34563,\n58760:34555,\n58761:34577,\n58762:34569,\n58763:34573,\n58764:34553,\n58765:34570,\n58766:34612,\n58767:34623,\n58768:34615,\n58769:34619,\n58770:34597,\n58771:34601,\n58772:34586,\n58773:34656,\n58774:34655,\n58775:34680,\n58776:34636,\n58777:34638,\n58778:34676,\n58779:34647,\n58780:34664,\n58781:34670,\n58782:34649,\n58783:34643,\n58784:34659,\n58785:34666,\n58786:34821,\n58787:34722,\n58788:34719,\n58789:34690,\n58790:34735,\n58791:34763,\n58792:34749,\n58793:34752,\n58794:34768,\n58795:38614,\n58796:34731,\n58797:34756,\n58798:34739,\n58799:34759,\n58800:34758,\n58801:34747,\n58802:34799,\n58803:34802,\n58804:34784,\n58805:34831,\n58806:34829,\n58807:34814,\n58808:34806,\n58809:34807,\n58810:34830,\n58811:34770,\n58812:34833,\n58813:34838,\n58814:34837,\n58815:34850,\n58816:34849,\n58817:34865,\n58818:34870,\n58819:34873,\n58820:34855,\n58821:34875,\n58822:34884,\n58823:34882,\n58824:34898,\n58825:34905,\n58826:34910,\n58827:34914,\n58828:34923,\n58829:34945,\n58830:34942,\n58831:34974,\n58832:34933,\n58833:34941,\n58834:34997,\n58835:34930,\n58836:34946,\n58837:34967,\n58838:34962,\n58839:34990,\n58840:34969,\n58841:34978,\n58842:34957,\n58843:34980,\n58844:34992,\n58845:35007,\n58846:34993,\n58847:35011,\n58848:35012,\n58849:35028,\n58850:35032,\n58851:35033,\n58852:35037,\n58853:35065,\n58854:35074,\n58855:35068,\n58856:35060,\n58857:35048,\n58858:35058,\n58859:35076,\n58860:35084,\n58861:35082,\n58862:35091,\n58863:35139,\n58864:35102,\n58865:35109,\n58866:35114,\n58867:35115,\n58868:35137,\n58869:35140,\n58870:35131,\n58871:35126,\n58872:35128,\n58873:35148,\n58874:35101,\n58875:35168,\n58876:35166,\n58944:35174,\n58945:35172,\n58946:35181,\n58947:35178,\n58948:35183,\n58949:35188,\n58950:35191,\n58951:35198,\n58952:35203,\n58953:35208,\n58954:35210,\n58955:35219,\n58956:35224,\n58957:35233,\n58958:35241,\n58959:35238,\n58960:35244,\n58961:35247,\n58962:35250,\n58963:35258,\n58964:35261,\n58965:35263,\n58966:35264,\n58967:35290,\n58968:35292,\n58969:35293,\n58970:35303,\n58971:35316,\n58972:35320,\n58973:35331,\n58974:35350,\n58975:35344,\n58976:35340,\n58977:35355,\n58978:35357,\n58979:35365,\n58980:35382,\n58981:35393,\n58982:35419,\n58983:35410,\n58984:35398,\n58985:35400,\n58986:35452,\n58987:35437,\n58988:35436,\n58989:35426,\n58990:35461,\n58991:35458,\n58992:35460,\n58993:35496,\n58994:35489,\n58995:35473,\n58996:35493,\n58997:35494,\n58998:35482,\n58999:35491,\n59000:35524,\n59001:35533,\n59002:35522,\n59003:35546,\n59004:35563,\n59005:35571,\n59006:35559,\n59008:35556,\n59009:35569,\n59010:35604,\n59011:35552,\n59012:35554,\n59013:35575,\n59014:35550,\n59015:35547,\n59016:35596,\n59017:35591,\n59018:35610,\n59019:35553,\n59020:35606,\n59021:35600,\n59022:35607,\n59023:35616,\n59024:35635,\n59025:38827,\n59026:35622,\n59027:35627,\n59028:35646,\n59029:35624,\n59030:35649,\n59031:35660,\n59032:35663,\n59033:35662,\n59034:35657,\n59035:35670,\n59036:35675,\n59037:35674,\n59038:35691,\n59039:35679,\n59040:35692,\n59041:35695,\n59042:35700,\n59043:35709,\n59044:35712,\n59045:35724,\n59046:35726,\n59047:35730,\n59048:35731,\n59049:35734,\n59050:35737,\n59051:35738,\n59052:35898,\n59053:35905,\n59054:35903,\n59055:35912,\n59056:35916,\n59057:35918,\n59058:35920,\n59059:35925,\n59060:35938,\n59061:35948,\n59062:35960,\n59063:35962,\n59064:35970,\n59065:35977,\n59066:35973,\n59067:35978,\n59068:35981,\n59069:35982,\n59070:35988,\n59071:35964,\n59072:35992,\n59073:25117,\n59074:36013,\n59075:36010,\n59076:36029,\n59077:36018,\n59078:36019,\n59079:36014,\n59080:36022,\n59081:36040,\n59082:36033,\n59083:36068,\n59084:36067,\n59085:36058,\n59086:36093,\n59087:36090,\n59088:36091,\n59089:36100,\n59090:36101,\n59091:36106,\n59092:36103,\n59093:36111,\n59094:36109,\n59095:36112,\n59096:40782,\n59097:36115,\n59098:36045,\n59099:36116,\n59100:36118,\n59101:36199,\n59102:36205,\n59103:36209,\n59104:36211,\n59105:36225,\n59106:36249,\n59107:36290,\n59108:36286,\n59109:36282,\n59110:36303,\n59111:36314,\n59112:36310,\n59113:36300,\n59114:36315,\n59115:36299,\n59116:36330,\n59117:36331,\n59118:36319,\n59119:36323,\n59120:36348,\n59121:36360,\n59122:36361,\n59123:36351,\n59124:36381,\n59125:36382,\n59126:36368,\n59127:36383,\n59128:36418,\n59129:36405,\n59130:36400,\n59131:36404,\n59132:36426,\n59200:36423,\n59201:36425,\n59202:36428,\n59203:36432,\n59204:36424,\n59205:36441,\n59206:36452,\n59207:36448,\n59208:36394,\n59209:36451,\n59210:36437,\n59211:36470,\n59212:36466,\n59213:36476,\n59214:36481,\n59215:36487,\n59216:36485,\n59217:36484,\n59218:36491,\n59219:36490,\n59220:36499,\n59221:36497,\n59222:36500,\n59223:36505,\n59224:36522,\n59225:36513,\n59226:36524,\n59227:36528,\n59228:36550,\n59229:36529,\n59230:36542,\n59231:36549,\n59232:36552,\n59233:36555,\n59234:36571,\n59235:36579,\n59236:36604,\n59237:36603,\n59238:36587,\n59239:36606,\n59240:36618,\n59241:36613,\n59242:36629,\n59243:36626,\n59244:36633,\n59245:36627,\n59246:36636,\n59247:36639,\n59248:36635,\n59249:36620,\n59250:36646,\n59251:36659,\n59252:36667,\n59253:36665,\n59254:36677,\n59255:36674,\n59256:36670,\n59257:36684,\n59258:36681,\n59259:36678,\n59260:36686,\n59261:36695,\n59262:36700,\n59264:36706,\n59265:36707,\n59266:36708,\n59267:36764,\n59268:36767,\n59269:36771,\n59270:36781,\n59271:36783,\n59272:36791,\n59273:36826,\n59274:36837,\n59275:36834,\n59276:36842,\n59277:36847,\n59278:36999,\n59279:36852,\n59280:36869,\n59281:36857,\n59282:36858,\n59283:36881,\n59284:36885,\n59285:36897,\n59286:36877,\n59287:36894,\n59288:36886,\n59289:36875,\n59290:36903,\n59291:36918,\n59292:36917,\n59293:36921,\n59294:36856,\n59295:36943,\n59296:36944,\n59297:36945,\n59298:36946,\n59299:36878,\n59300:36937,\n59301:36926,\n59302:36950,\n59303:36952,\n59304:36958,\n59305:36968,\n59306:36975,\n59307:36982,\n59308:38568,\n59309:36978,\n59310:36994,\n59311:36989,\n59312:36993,\n59313:36992,\n59314:37002,\n59315:37001,\n59316:37007,\n59317:37032,\n59318:37039,\n59319:37041,\n59320:37045,\n59321:37090,\n59322:37092,\n59323:25160,\n59324:37083,\n59325:37122,\n59326:37138,\n59327:37145,\n59328:37170,\n59329:37168,\n59330:37194,\n59331:37206,\n59332:37208,\n59333:37219,\n59334:37221,\n59335:37225,\n59336:37235,\n59337:37234,\n59338:37259,\n59339:37257,\n59340:37250,\n59341:37282,\n59342:37291,\n59343:37295,\n59344:37290,\n59345:37301,\n59346:37300,\n59347:37306,\n59348:37312,\n59349:37313,\n59350:37321,\n59351:37323,\n59352:37328,\n59353:37334,\n59354:37343,\n59355:37345,\n59356:37339,\n59357:37372,\n59358:37365,\n59359:37366,\n59360:37406,\n59361:37375,\n59362:37396,\n59363:37420,\n59364:37397,\n59365:37393,\n59366:37470,\n59367:37463,\n59368:37445,\n59369:37449,\n59370:37476,\n59371:37448,\n59372:37525,\n59373:37439,\n59374:37451,\n59375:37456,\n59376:37532,\n59377:37526,\n59378:37523,\n59379:37531,\n59380:37466,\n59381:37583,\n59382:37561,\n59383:37559,\n59384:37609,\n59385:37647,\n59386:37626,\n59387:37700,\n59388:37678,\n59456:37657,\n59457:37666,\n59458:37658,\n59459:37667,\n59460:37690,\n59461:37685,\n59462:37691,\n59463:37724,\n59464:37728,\n59465:37756,\n59466:37742,\n59467:37718,\n59468:37808,\n59469:37804,\n59470:37805,\n59471:37780,\n59472:37817,\n59473:37846,\n59474:37847,\n59475:37864,\n59476:37861,\n59477:37848,\n59478:37827,\n59479:37853,\n59480:37840,\n59481:37832,\n59482:37860,\n59483:37914,\n59484:37908,\n59485:37907,\n59486:37891,\n59487:37895,\n59488:37904,\n59489:37942,\n59490:37931,\n59491:37941,\n59492:37921,\n59493:37946,\n59494:37953,\n59495:37970,\n59496:37956,\n59497:37979,\n59498:37984,\n59499:37986,\n59500:37982,\n59501:37994,\n59502:37417,\n59503:38000,\n59504:38005,\n59505:38007,\n59506:38013,\n59507:37978,\n59508:38012,\n59509:38014,\n59510:38017,\n59511:38015,\n59512:38274,\n59513:38279,\n59514:38282,\n59515:38292,\n59516:38294,\n59517:38296,\n59518:38297,\n59520:38304,\n59521:38312,\n59522:38311,\n59523:38317,\n59524:38332,\n59525:38331,\n59526:38329,\n59527:38334,\n59528:38346,\n59529:28662,\n59530:38339,\n59531:38349,\n59532:38348,\n59533:38357,\n59534:38356,\n59535:38358,\n59536:38364,\n59537:38369,\n59538:38373,\n59539:38370,\n59540:38433,\n59541:38440,\n59542:38446,\n59543:38447,\n59544:38466,\n59545:38476,\n59546:38479,\n59547:38475,\n59548:38519,\n59549:38492,\n59550:38494,\n59551:38493,\n59552:38495,\n59553:38502,\n59554:38514,\n59555:38508,\n59556:38541,\n59557:38552,\n59558:38549,\n59559:38551,\n59560:38570,\n59561:38567,\n59562:38577,\n59563:38578,\n59564:38576,\n59565:38580,\n59566:38582,\n59567:38584,\n59568:38585,\n59569:38606,\n59570:38603,\n59571:38601,\n59572:38605,\n59573:35149,\n59574:38620,\n59575:38669,\n59576:38613,\n59577:38649,\n59578:38660,\n59579:38662,\n59580:38664,\n59581:38675,\n59582:38670,\n59583:38673,\n59584:38671,\n59585:38678,\n59586:38681,\n59587:38692,\n59588:38698,\n59589:38704,\n59590:38713,\n59591:38717,\n59592:38718,\n59593:38724,\n59594:38726,\n59595:38728,\n59596:38722,\n59597:38729,\n59598:38748,\n59599:38752,\n59600:38756,\n59601:38758,\n59602:38760,\n59603:21202,\n59604:38763,\n59605:38769,\n59606:38777,\n59607:38789,\n59608:38780,\n59609:38785,\n59610:38778,\n59611:38790,\n59612:38795,\n59613:38799,\n59614:38800,\n59615:38812,\n59616:38824,\n59617:38822,\n59618:38819,\n59619:38835,\n59620:38836,\n59621:38851,\n59622:38854,\n59623:38856,\n59624:38859,\n59625:38876,\n59626:38893,\n59627:40783,\n59628:38898,\n59629:31455,\n59630:38902,\n59631:38901,\n59632:38927,\n59633:38924,\n59634:38968,\n59635:38948,\n59636:38945,\n59637:38967,\n59638:38973,\n59639:38982,\n59640:38991,\n59641:38987,\n59642:39019,\n59643:39023,\n59644:39024,\n59712:39025,\n59713:39028,\n59714:39027,\n59715:39082,\n59716:39087,\n59717:39089,\n59718:39094,\n59719:39108,\n59720:39107,\n59721:39110,\n59722:39145,\n59723:39147,\n59724:39171,\n59725:39177,\n59726:39186,\n59727:39188,\n59728:39192,\n59729:39201,\n59730:39197,\n59731:39198,\n59732:39204,\n59733:39200,\n59734:39212,\n59735:39214,\n59736:39229,\n59737:39230,\n59738:39234,\n59739:39241,\n59740:39237,\n59741:39248,\n59742:39243,\n59743:39249,\n59744:39250,\n59745:39244,\n59746:39253,\n59747:39319,\n59748:39320,\n59749:39333,\n59750:39341,\n59751:39342,\n59752:39356,\n59753:39391,\n59754:39387,\n59755:39389,\n59756:39384,\n59757:39377,\n59758:39405,\n59759:39406,\n59760:39409,\n59761:39410,\n59762:39419,\n59763:39416,\n59764:39425,\n59765:39439,\n59766:39429,\n59767:39394,\n59768:39449,\n59769:39467,\n59770:39479,\n59771:39493,\n59772:39490,\n59773:39488,\n59774:39491,\n59776:39486,\n59777:39509,\n59778:39501,\n59779:39515,\n59780:39511,\n59781:39519,\n59782:39522,\n59783:39525,\n59784:39524,\n59785:39529,\n59786:39531,\n59787:39530,\n59788:39597,\n59789:39600,\n59790:39612,\n59791:39616,\n59792:39631,\n59793:39633,\n59794:39635,\n59795:39636,\n59796:39646,\n59797:39647,\n59798:39650,\n59799:39651,\n59800:39654,\n59801:39663,\n59802:39659,\n59803:39662,\n59804:39668,\n59805:39665,\n59806:39671,\n59807:39675,\n59808:39686,\n59809:39704,\n59810:39706,\n59811:39711,\n59812:39714,\n59813:39715,\n59814:39717,\n59815:39719,\n59816:39720,\n59817:39721,\n59818:39722,\n59819:39726,\n59820:39727,\n59821:39730,\n59822:39748,\n59823:39747,\n59824:39759,\n59825:39757,\n59826:39758,\n59827:39761,\n59828:39768,\n59829:39796,\n59830:39827,\n59831:39811,\n59832:39825,\n59833:39830,\n59834:39831,\n59835:39839,\n59836:39840,\n59837:39848,\n59838:39860,\n59839:39872,\n59840:39882,\n59841:39865,\n59842:39878,\n59843:39887,\n59844:39889,\n59845:39890,\n59846:39907,\n59847:39906,\n59848:39908,\n59849:39892,\n59850:39905,\n59851:39994,\n59852:39922,\n59853:39921,\n59854:39920,\n59855:39957,\n59856:39956,\n59857:39945,\n59858:39955,\n59859:39948,\n59860:39942,\n59861:39944,\n59862:39954,\n59863:39946,\n59864:39940,\n59865:39982,\n59866:39963,\n59867:39973,\n59868:39972,\n59869:39969,\n59870:39984,\n59871:40007,\n59872:39986,\n59873:40006,\n59874:39998,\n59875:40026,\n59876:40032,\n59877:40039,\n59878:40054,\n59879:40056,\n59880:40167,\n59881:40172,\n59882:40176,\n59883:40201,\n59884:40200,\n59885:40171,\n59886:40195,\n59887:40198,\n59888:40234,\n59889:40230,\n59890:40367,\n59891:40227,\n59892:40223,\n59893:40260,\n59894:40213,\n59895:40210,\n59896:40257,\n59897:40255,\n59898:40254,\n59899:40262,\n59900:40264,\n59968:40285,\n59969:40286,\n59970:40292,\n59971:40273,\n59972:40272,\n59973:40281,\n59974:40306,\n59975:40329,\n59976:40327,\n59977:40363,\n59978:40303,\n59979:40314,\n59980:40346,\n59981:40356,\n59982:40361,\n59983:40370,\n59984:40388,\n59985:40385,\n59986:40379,\n59987:40376,\n59988:40378,\n59989:40390,\n59990:40399,\n59991:40386,\n59992:40409,\n59993:40403,\n59994:40440,\n59995:40422,\n59996:40429,\n59997:40431,\n59998:40445,\n59999:40474,\n60000:40475,\n60001:40478,\n60002:40565,\n60003:40569,\n60004:40573,\n60005:40577,\n60006:40584,\n60007:40587,\n60008:40588,\n60009:40594,\n60010:40597,\n60011:40593,\n60012:40605,\n60013:40613,\n60014:40617,\n60015:40632,\n60016:40618,\n60017:40621,\n60018:38753,\n60019:40652,\n60020:40654,\n60021:40655,\n60022:40656,\n60023:40660,\n60024:40668,\n60025:40670,\n60026:40669,\n60027:40672,\n60028:40677,\n60029:40680,\n60030:40687,\n60032:40692,\n60033:40694,\n60034:40695,\n60035:40697,\n60036:40699,\n60037:40700,\n60038:40701,\n60039:40711,\n60040:40712,\n60041:30391,\n60042:40725,\n60043:40737,\n60044:40748,\n60045:40766,\n60046:40778,\n60047:40786,\n60048:40788,\n60049:40803,\n60050:40799,\n60051:40800,\n60052:40801,\n60053:40806,\n60054:40807,\n60055:40812,\n60056:40810,\n60057:40823,\n60058:40818,\n60059:40822,\n60060:40853,\n60061:40860,\n60062:40864,\n60063:22575,\n60064:27079,\n60065:36953,\n60066:29796,\n60067:20956,\n60068:29081,\n60736:32394,\n60737:35100,\n60738:37704,\n60739:37512,\n60740:34012,\n60741:20425,\n60742:28859,\n60743:26161,\n60744:26824,\n60745:37625,\n60746:26363,\n60747:24389,\n60748:20008,\n60749:20193,\n60750:20220,\n60751:20224,\n60752:20227,\n60753:20281,\n60754:20310,\n60755:20370,\n60756:20362,\n60757:20378,\n60758:20372,\n60759:20429,\n60760:20544,\n60761:20514,\n60762:20479,\n60763:20510,\n60764:20550,\n60765:20592,\n60766:20546,\n60767:20628,\n60768:20724,\n60769:20696,\n60770:20810,\n60771:20836,\n60772:20893,\n60773:20926,\n60774:20972,\n60775:21013,\n60776:21148,\n60777:21158,\n60778:21184,\n60779:21211,\n60780:21248,\n60781:21255,\n60782:21284,\n60783:21362,\n60784:21395,\n60785:21426,\n60786:21469,\n60787:64014,\n60788:21660,\n60789:21642,\n60790:21673,\n60791:21759,\n60792:21894,\n60793:22361,\n60794:22373,\n60795:22444,\n60796:22472,\n60797:22471,\n60798:64015,\n60800:64016,\n60801:22686,\n60802:22706,\n60803:22795,\n60804:22867,\n60805:22875,\n60806:22877,\n60807:22883,\n60808:22948,\n60809:22970,\n60810:23382,\n60811:23488,\n60812:29999,\n60813:23512,\n60814:23532,\n60815:23582,\n60816:23718,\n60817:23738,\n60818:23797,\n60819:23847,\n60820:23891,\n60821:64017,\n60822:23874,\n60823:23917,\n60824:23992,\n60825:23993,\n60826:24016,\n60827:24353,\n60828:24372,\n60829:24423,\n60830:24503,\n60831:24542,\n60832:24669,\n60833:24709,\n60834:24714,\n60835:24798,\n60836:24789,\n60837:24864,\n60838:24818,\n60839:24849,\n60840:24887,\n60841:24880,\n60842:24984,\n60843:25107,\n60844:25254,\n60845:25589,\n60846:25696,\n60847:25757,\n60848:25806,\n60849:25934,\n60850:26112,\n60851:26133,\n60852:26171,\n60853:26121,\n60854:26158,\n60855:26142,\n60856:26148,\n60857:26213,\n60858:26199,\n60859:26201,\n60860:64018,\n60861:26227,\n60862:26265,\n60863:26272,\n60864:26290,\n60865:26303,\n60866:26362,\n60867:26382,\n60868:63785,\n60869:26470,\n60870:26555,\n60871:26706,\n60872:26560,\n60873:26625,\n60874:26692,\n60875:26831,\n60876:64019,\n60877:26984,\n60878:64020,\n60879:27032,\n60880:27106,\n60881:27184,\n60882:27243,\n60883:27206,\n60884:27251,\n60885:27262,\n60886:27362,\n60887:27364,\n60888:27606,\n60889:27711,\n60890:27740,\n60891:27782,\n60892:27759,\n60893:27866,\n60894:27908,\n60895:28039,\n60896:28015,\n60897:28054,\n60898:28076,\n60899:28111,\n60900:28152,\n60901:28146,\n60902:28156,\n60903:28217,\n60904:28252,\n60905:28199,\n60906:28220,\n60907:28351,\n60908:28552,\n60909:28597,\n60910:28661,\n60911:28677,\n60912:28679,\n60913:28712,\n60914:28805,\n60915:28843,\n60916:28943,\n60917:28932,\n60918:29020,\n60919:28998,\n60920:28999,\n60921:64021,\n60922:29121,\n60923:29182,\n60924:29361,\n60992:29374,\n60993:29476,\n60994:64022,\n60995:29559,\n60996:29629,\n60997:29641,\n60998:29654,\n60999:29667,\n61000:29650,\n61001:29703,\n61002:29685,\n61003:29734,\n61004:29738,\n61005:29737,\n61006:29742,\n61007:29794,\n61008:29833,\n61009:29855,\n61010:29953,\n61011:30063,\n61012:30338,\n61013:30364,\n61014:30366,\n61015:30363,\n61016:30374,\n61017:64023,\n61018:30534,\n61019:21167,\n61020:30753,\n61021:30798,\n61022:30820,\n61023:30842,\n61024:31024,\n61025:64024,\n61026:64025,\n61027:64026,\n61028:31124,\n61029:64027,\n61030:31131,\n61031:31441,\n61032:31463,\n61033:64028,\n61034:31467,\n61035:31646,\n61036:64029,\n61037:32072,\n61038:32092,\n61039:32183,\n61040:32160,\n61041:32214,\n61042:32338,\n61043:32583,\n61044:32673,\n61045:64030,\n61046:33537,\n61047:33634,\n61048:33663,\n61049:33735,\n61050:33782,\n61051:33864,\n61052:33972,\n61053:34131,\n61054:34137,\n61056:34155,\n61057:64031,\n61058:34224,\n61059:64032,\n61060:64033,\n61061:34823,\n61062:35061,\n61063:35346,\n61064:35383,\n61065:35449,\n61066:35495,\n61067:35518,\n61068:35551,\n61069:64034,\n61070:35574,\n61071:35667,\n61072:35711,\n61073:36080,\n61074:36084,\n61075:36114,\n61076:36214,\n61077:64035,\n61078:36559,\n61079:64036,\n61080:64037,\n61081:36967,\n61082:37086,\n61083:64038,\n61084:37141,\n61085:37159,\n61086:37338,\n61087:37335,\n61088:37342,\n61089:37357,\n61090:37358,\n61091:37348,\n61092:37349,\n61093:37382,\n61094:37392,\n61095:37386,\n61096:37434,\n61097:37440,\n61098:37436,\n61099:37454,\n61100:37465,\n61101:37457,\n61102:37433,\n61103:37479,\n61104:37543,\n61105:37495,\n61106:37496,\n61107:37607,\n61108:37591,\n61109:37593,\n61110:37584,\n61111:64039,\n61112:37589,\n61113:37600,\n61114:37587,\n61115:37669,\n61116:37665,\n61117:37627,\n61118:64040,\n61119:37662,\n61120:37631,\n61121:37661,\n61122:37634,\n61123:37744,\n61124:37719,\n61125:37796,\n61126:37830,\n61127:37854,\n61128:37880,\n61129:37937,\n61130:37957,\n61131:37960,\n61132:38290,\n61133:63964,\n61134:64041,\n61135:38557,\n61136:38575,\n61137:38707,\n61138:38715,\n61139:38723,\n61140:38733,\n61141:38735,\n61142:38737,\n61143:38741,\n61144:38999,\n61145:39013,\n61146:64042,\n61147:64043,\n61148:39207,\n61149:64044,\n61150:39326,\n61151:39502,\n61152:39641,\n61153:39644,\n61154:39797,\n61155:39794,\n61156:39823,\n61157:39857,\n61158:39867,\n61159:39936,\n61160:40304,\n61161:40299,\n61162:64045,\n61163:40473,\n61164:40657,\n61167:8560,\n61168:8561,\n61169:8562,\n61170:8563,\n61171:8564,\n61172:8565,\n61173:8566,\n61174:8567,\n61175:8568,\n61176:8569,\n61177:65506,\n61178:65508,\n61179:65287,\n61180:65282,\n61504:57344,\n61505:57345,\n61506:57346,\n61507:57347,\n61508:57348,\n61509:57349,\n61510:57350,\n61511:57351,\n61512:57352,\n61513:57353,\n61514:57354,\n61515:57355,\n61516:57356,\n61517:57357,\n61518:57358,\n61519:57359,\n61520:57360,\n61521:57361,\n61522:57362,\n61523:57363,\n61524:57364,\n61525:57365,\n61526:57366,\n61527:57367,\n61528:57368,\n61529:57369,\n61530:57370,\n61531:57371,\n61532:57372,\n61533:57373,\n61534:57374,\n61535:57375,\n61536:57376,\n61537:57377,\n61538:57378,\n61539:57379,\n61540:57380,\n61541:57381,\n61542:57382,\n61543:57383,\n61544:57384,\n61545:57385,\n61546:57386,\n61547:57387,\n61548:57388,\n61549:57389,\n61550:57390,\n61551:57391,\n61552:57392,\n61553:57393,\n61554:57394,\n61555:57395,\n61556:57396,\n61557:57397,\n61558:57398,\n61559:57399,\n61560:57400,\n61561:57401,\n61562:57402,\n61563:57403,\n61564:57404,\n61565:57405,\n61566:57406,\n61568:57407,\n61569:57408,\n61570:57409,\n61571:57410,\n61572:57411,\n61573:57412,\n61574:57413,\n61575:57414,\n61576:57415,\n61577:57416,\n61578:57417,\n61579:57418,\n61580:57419,\n61581:57420,\n61582:57421,\n61583:57422,\n61584:57423,\n61585:57424,\n61586:57425,\n61587:57426,\n61588:57427,\n61589:57428,\n61590:57429,\n61591:57430,\n61592:57431,\n61593:57432,\n61594:57433,\n61595:57434,\n61596:57435,\n61597:57436,\n61598:57437,\n61599:57438,\n61600:57439,\n61601:57440,\n61602:57441,\n61603:57442,\n61604:57443,\n61605:57444,\n61606:57445,\n61607:57446,\n61608:57447,\n61609:57448,\n61610:57449,\n61611:57450,\n61612:57451,\n61613:57452,\n61614:57453,\n61615:57454,\n61616:57455,\n61617:57456,\n61618:57457,\n61619:57458,\n61620:57459,\n61621:57460,\n61622:57461,\n61623:57462,\n61624:57463,\n61625:57464,\n61626:57465,\n61627:57466,\n61628:57467,\n61629:57468,\n61630:57469,\n61631:57470,\n61632:57471,\n61633:57472,\n61634:57473,\n61635:57474,\n61636:57475,\n61637:57476,\n61638:57477,\n61639:57478,\n61640:57479,\n61641:57480,\n61642:57481,\n61643:57482,\n61644:57483,\n61645:57484,\n61646:57485,\n61647:57486,\n61648:57487,\n61649:57488,\n61650:57489,\n61651:57490,\n61652:57491,\n61653:57492,\n61654:57493,\n61655:57494,\n61656:57495,\n61657:57496,\n61658:57497,\n61659:57498,\n61660:57499,\n61661:57500,\n61662:57501,\n61663:57502,\n61664:57503,\n61665:57504,\n61666:57505,\n61667:57506,\n61668:57507,\n61669:57508,\n61670:57509,\n61671:57510,\n61672:57511,\n61673:57512,\n61674:57513,\n61675:57514,\n61676:57515,\n61677:57516,\n61678:57517,\n61679:57518,\n61680:57519,\n61681:57520,\n61682:57521,\n61683:57522,\n61684:57523,\n61685:57524,\n61686:57525,\n61687:57526,\n61688:57527,\n61689:57528,\n61690:57529,\n61691:57530,\n61692:57531,\n61760:57532,\n61761:57533,\n61762:57534,\n61763:57535,\n61764:57536,\n61765:57537,\n61766:57538,\n61767:57539,\n61768:57540,\n61769:57541,\n61770:57542,\n61771:57543,\n61772:57544,\n61773:57545,\n61774:57546,\n61775:57547,\n61776:57548,\n61777:57549,\n61778:57550,\n61779:57551,\n61780:57552,\n61781:57553,\n61782:57554,\n61783:57555,\n61784:57556,\n61785:57557,\n61786:57558,\n61787:57559,\n61788:57560,\n61789:57561,\n61790:57562,\n61791:57563,\n61792:57564,\n61793:57565,\n61794:57566,\n61795:57567,\n61796:57568,\n61797:57569,\n61798:57570,\n61799:57571,\n61800:57572,\n61801:57573,\n61802:57574,\n61803:57575,\n61804:57576,\n61805:57577,\n61806:57578,\n61807:57579,\n61808:57580,\n61809:57581,\n61810:57582,\n61811:57583,\n61812:57584,\n61813:57585,\n61814:57586,\n61815:57587,\n61816:57588,\n61817:57589,\n61818:57590,\n61819:57591,\n61820:57592,\n61821:57593,\n61822:57594,\n61824:57595,\n61825:57596,\n61826:57597,\n61827:57598,\n61828:57599,\n61829:57600,\n61830:57601,\n61831:57602,\n61832:57603,\n61833:57604,\n61834:57605,\n61835:57606,\n61836:57607,\n61837:57608,\n61838:57609,\n61839:57610,\n61840:57611,\n61841:57612,\n61842:57613,\n61843:57614,\n61844:57615,\n61845:57616,\n61846:57617,\n61847:57618,\n61848:57619,\n61849:57620,\n61850:57621,\n61851:57622,\n61852:57623,\n61853:57624,\n61854:57625,\n61855:57626,\n61856:57627,\n61857:57628,\n61858:57629,\n61859:57630,\n61860:57631,\n61861:57632,\n61862:57633,\n61863:57634,\n61864:57635,\n61865:57636,\n61866:57637,\n61867:57638,\n61868:57639,\n61869:57640,\n61870:57641,\n61871:57642,\n61872:57643,\n61873:57644,\n61874:57645,\n61875:57646,\n61876:57647,\n61877:57648,\n61878:57649,\n61879:57650,\n61880:57651,\n61881:57652,\n61882:57653,\n61883:57654,\n61884:57655,\n61885:57656,\n61886:57657,\n61887:57658,\n61888:57659,\n61889:57660,\n61890:57661,\n61891:57662,\n61892:57663,\n61893:57664,\n61894:57665,\n61895:57666,\n61896:57667,\n61897:57668,\n61898:57669,\n61899:57670,\n61900:57671,\n61901:57672,\n61902:57673,\n61903:57674,\n61904:57675,\n61905:57676,\n61906:57677,\n61907:57678,\n61908:57679,\n61909:57680,\n61910:57681,\n61911:57682,\n61912:57683,\n61913:57684,\n61914:57685,\n61915:57686,\n61916:57687,\n61917:57688,\n61918:57689,\n61919:57690,\n61920:57691,\n61921:57692,\n61922:57693,\n61923:57694,\n61924:57695,\n61925:57696,\n61926:57697,\n61927:57698,\n61928:57699,\n61929:57700,\n61930:57701,\n61931:57702,\n61932:57703,\n61933:57704,\n61934:57705,\n61935:57706,\n61936:57707,\n61937:57708,\n61938:57709,\n61939:57710,\n61940:57711,\n61941:57712,\n61942:57713,\n61943:57714,\n61944:57715,\n61945:57716,\n61946:57717,\n61947:57718,\n61948:57719,\n62016:57720,\n62017:57721,\n62018:57722,\n62019:57723,\n62020:57724,\n62021:57725,\n62022:57726,\n62023:57727,\n62024:57728,\n62025:57729,\n62026:57730,\n62027:57731,\n62028:57732,\n62029:57733,\n62030:57734,\n62031:57735,\n62032:57736,\n62033:57737,\n62034:57738,\n62035:57739,\n62036:57740,\n62037:57741,\n62038:57742,\n62039:57743,\n62040:57744,\n62041:57745,\n62042:57746,\n62043:57747,\n62044:57748,\n62045:57749,\n62046:57750,\n62047:57751,\n62048:57752,\n62049:57753,\n62050:57754,\n62051:57755,\n62052:57756,\n62053:57757,\n62054:57758,\n62055:57759,\n62056:57760,\n62057:57761,\n62058:57762,\n62059:57763,\n62060:57764,\n62061:57765,\n62062:57766,\n62063:57767,\n62064:57768,\n62065:57769,\n62066:57770,\n62067:57771,\n62068:57772,\n62069:57773,\n62070:57774,\n62071:57775,\n62072:57776,\n62073:57777,\n62074:57778,\n62075:57779,\n62076:57780,\n62077:57781,\n62078:57782,\n62080:57783,\n62081:57784,\n62082:57785,\n62083:57786,\n62084:57787,\n62085:57788,\n62086:57789,\n62087:57790,\n62088:57791,\n62089:57792,\n62090:57793,\n62091:57794,\n62092:57795,\n62093:57796,\n62094:57797,\n62095:57798,\n62096:57799,\n62097:57800,\n62098:57801,\n62099:57802,\n62100:57803,\n62101:57804,\n62102:57805,\n62103:57806,\n62104:57807,\n62105:57808,\n62106:57809,\n62107:57810,\n62108:57811,\n62109:57812,\n62110:57813,\n62111:57814,\n62112:57815,\n62113:57816,\n62114:57817,\n62115:57818,\n62116:57819,\n62117:57820,\n62118:57821,\n62119:57822,\n62120:57823,\n62121:57824,\n62122:57825,\n62123:57826,\n62124:57827,\n62125:57828,\n62126:57829,\n62127:57830,\n62128:57831,\n62129:57832,\n62130:57833,\n62131:57834,\n62132:57835,\n62133:57836,\n62134:57837,\n62135:57838,\n62136:57839,\n62137:57840,\n62138:57841,\n62139:57842,\n62140:57843,\n62141:57844,\n62142:57845,\n62143:57846,\n62144:57847,\n62145:57848,\n62146:57849,\n62147:57850,\n62148:57851,\n62149:57852,\n62150:57853,\n62151:57854,\n62152:57855,\n62153:57856,\n62154:57857,\n62155:57858,\n62156:57859,\n62157:57860,\n62158:57861,\n62159:57862,\n62160:57863,\n62161:57864,\n62162:57865,\n62163:57866,\n62164:57867,\n62165:57868,\n62166:57869,\n62167:57870,\n62168:57871,\n62169:57872,\n62170:57873,\n62171:57874,\n62172:57875,\n62173:57876,\n62174:57877,\n62175:57878,\n62176:57879,\n62177:57880,\n62178:57881,\n62179:57882,\n62180:57883,\n62181:57884,\n62182:57885,\n62183:57886,\n62184:57887,\n62185:57888,\n62186:57889,\n62187:57890,\n62188:57891,\n62189:57892,\n62190:57893,\n62191:57894,\n62192:57895,\n62193:57896,\n62194:57897,\n62195:57898,\n62196:57899,\n62197:57900,\n62198:57901,\n62199:57902,\n62200:57903,\n62201:57904,\n62202:57905,\n62203:57906,\n62204:57907,\n62272:57908,\n62273:57909,\n62274:57910,\n62275:57911,\n62276:57912,\n62277:57913,\n62278:57914,\n62279:57915,\n62280:57916,\n62281:57917,\n62282:57918,\n62283:57919,\n62284:57920,\n62285:57921,\n62286:57922,\n62287:57923,\n62288:57924,\n62289:57925,\n62290:57926,\n62291:57927,\n62292:57928,\n62293:57929,\n62294:57930,\n62295:57931,\n62296:57932,\n62297:57933,\n62298:57934,\n62299:57935,\n62300:57936,\n62301:57937,\n62302:57938,\n62303:57939,\n62304:57940,\n62305:57941,\n62306:57942,\n62307:57943,\n62308:57944,\n62309:57945,\n62310:57946,\n62311:57947,\n62312:57948,\n62313:57949,\n62314:57950,\n62315:57951,\n62316:57952,\n62317:57953,\n62318:57954,\n62319:57955,\n62320:57956,\n62321:57957,\n62322:57958,\n62323:57959,\n62324:57960,\n62325:57961,\n62326:57962,\n62327:57963,\n62328:57964,\n62329:57965,\n62330:57966,\n62331:57967,\n62332:57968,\n62333:57969,\n62334:57970,\n62336:57971,\n62337:57972,\n62338:57973,\n62339:57974,\n62340:57975,\n62341:57976,\n62342:57977,\n62343:57978,\n62344:57979,\n62345:57980,\n62346:57981,\n62347:57982,\n62348:57983,\n62349:57984,\n62350:57985,\n62351:57986,\n62352:57987,\n62353:57988,\n62354:57989,\n62355:57990,\n62356:57991,\n62357:57992,\n62358:57993,\n62359:57994,\n62360:57995,\n62361:57996,\n62362:57997,\n62363:57998,\n62364:57999,\n62365:58000,\n62366:58001,\n62367:58002,\n62368:58003,\n62369:58004,\n62370:58005,\n62371:58006,\n62372:58007,\n62373:58008,\n62374:58009,\n62375:58010,\n62376:58011,\n62377:58012,\n62378:58013,\n62379:58014,\n62380:58015,\n62381:58016,\n62382:58017,\n62383:58018,\n62384:58019,\n62385:58020,\n62386:58021,\n62387:58022,\n62388:58023,\n62389:58024,\n62390:58025,\n62391:58026,\n62392:58027,\n62393:58028,\n62394:58029,\n62395:58030,\n62396:58031,\n62397:58032,\n62398:58033,\n62399:58034,\n62400:58035,\n62401:58036,\n62402:58037,\n62403:58038,\n62404:58039,\n62405:58040,\n62406:58041,\n62407:58042,\n62408:58043,\n62409:58044,\n62410:58045,\n62411:58046,\n62412:58047,\n62413:58048,\n62414:58049,\n62415:58050,\n62416:58051,\n62417:58052,\n62418:58053,\n62419:58054,\n62420:58055,\n62421:58056,\n62422:58057,\n62423:58058,\n62424:58059,\n62425:58060,\n62426:58061,\n62427:58062,\n62428:58063,\n62429:58064,\n62430:58065,\n62431:58066,\n62432:58067,\n62433:58068,\n62434:58069,\n62435:58070,\n62436:58071,\n62437:58072,\n62438:58073,\n62439:58074,\n62440:58075,\n62441:58076,\n62442:58077,\n62443:58078,\n62444:58079,\n62445:58080,\n62446:58081,\n62447:58082,\n62448:58083,\n62449:58084,\n62450:58085,\n62451:58086,\n62452:58087,\n62453:58088,\n62454:58089,\n62455:58090,\n62456:58091,\n62457:58092,\n62458:58093,\n62459:58094,\n62460:58095,\n62528:58096,\n62529:58097,\n62530:58098,\n62531:58099,\n62532:58100,\n62533:58101,\n62534:58102,\n62535:58103,\n62536:58104,\n62537:58105,\n62538:58106,\n62539:58107,\n62540:58108,\n62541:58109,\n62542:58110,\n62543:58111,\n62544:58112,\n62545:58113,\n62546:58114,\n62547:58115,\n62548:58116,\n62549:58117,\n62550:58118,\n62551:58119,\n62552:58120,\n62553:58121,\n62554:58122,\n62555:58123,\n62556:58124,\n62557:58125,\n62558:58126,\n62559:58127,\n62560:58128,\n62561:58129,\n62562:58130,\n62563:58131,\n62564:58132,\n62565:58133,\n62566:58134,\n62567:58135,\n62568:58136,\n62569:58137,\n62570:58138,\n62571:58139,\n62572:58140,\n62573:58141,\n62574:58142,\n62575:58143,\n62576:58144,\n62577:58145,\n62578:58146,\n62579:58147,\n62580:58148,\n62581:58149,\n62582:58150,\n62583:58151,\n62584:58152,\n62585:58153,\n62586:58154,\n62587:58155,\n62588:58156,\n62589:58157,\n62590:58158,\n62592:58159,\n62593:58160,\n62594:58161,\n62595:58162,\n62596:58163,\n62597:58164,\n62598:58165,\n62599:58166,\n62600:58167,\n62601:58168,\n62602:58169,\n62603:58170,\n62604:58171,\n62605:58172,\n62606:58173,\n62607:58174,\n62608:58175,\n62609:58176,\n62610:58177,\n62611:58178,\n62612:58179,\n62613:58180,\n62614:58181,\n62615:58182,\n62616:58183,\n62617:58184,\n62618:58185,\n62619:58186,\n62620:58187,\n62621:58188,\n62622:58189,\n62623:58190,\n62624:58191,\n62625:58192,\n62626:58193,\n62627:58194,\n62628:58195,\n62629:58196,\n62630:58197,\n62631:58198,\n62632:58199,\n62633:58200,\n62634:58201,\n62635:58202,\n62636:58203,\n62637:58204,\n62638:58205,\n62639:58206,\n62640:58207,\n62641:58208,\n62642:58209,\n62643:58210,\n62644:58211,\n62645:58212,\n62646:58213,\n62647:58214,\n62648:58215,\n62649:58216,\n62650:58217,\n62651:58218,\n62652:58219,\n62653:58220,\n62654:58221,\n62655:58222,\n62656:58223,\n62657:58224,\n62658:58225,\n62659:58226,\n62660:58227,\n62661:58228,\n62662:58229,\n62663:58230,\n62664:58231,\n62665:58232,\n62666:58233,\n62667:58234,\n62668:58235,\n62669:58236,\n62670:58237,\n62671:58238,\n62672:58239,\n62673:58240,\n62674:58241,\n62675:58242,\n62676:58243,\n62677:58244,\n62678:58245,\n62679:58246,\n62680:58247,\n62681:58248,\n62682:58249,\n62683:58250,\n62684:58251,\n62685:58252,\n62686:58253,\n62687:58254,\n62688:58255,\n62689:58256,\n62690:58257,\n62691:58258,\n62692:58259,\n62693:58260,\n62694:58261,\n62695:58262,\n62696:58263,\n62697:58264,\n62698:58265,\n62699:58266,\n62700:58267,\n62701:58268,\n62702:58269,\n62703:58270,\n62704:58271,\n62705:58272,\n62706:58273,\n62707:58274,\n62708:58275,\n62709:58276,\n62710:58277,\n62711:58278,\n62712:58279,\n62713:58280,\n62714:58281,\n62715:58282,\n62716:58283,\n62784:58284,\n62785:58285,\n62786:58286,\n62787:58287,\n62788:58288,\n62789:58289,\n62790:58290,\n62791:58291,\n62792:58292,\n62793:58293,\n62794:58294,\n62795:58295,\n62796:58296,\n62797:58297,\n62798:58298,\n62799:58299,\n62800:58300,\n62801:58301,\n62802:58302,\n62803:58303,\n62804:58304,\n62805:58305,\n62806:58306,\n62807:58307,\n62808:58308,\n62809:58309,\n62810:58310,\n62811:58311,\n62812:58312,\n62813:58313,\n62814:58314,\n62815:58315,\n62816:58316,\n62817:58317,\n62818:58318,\n62819:58319,\n62820:58320,\n62821:58321,\n62822:58322,\n62823:58323,\n62824:58324,\n62825:58325,\n62826:58326,\n62827:58327,\n62828:58328,\n62829:58329,\n62830:58330,\n62831:58331,\n62832:58332,\n62833:58333,\n62834:58334,\n62835:58335,\n62836:58336,\n62837:58337,\n62838:58338,\n62839:58339,\n62840:58340,\n62841:58341,\n62842:58342,\n62843:58343,\n62844:58344,\n62845:58345,\n62846:58346,\n62848:58347,\n62849:58348,\n62850:58349,\n62851:58350,\n62852:58351,\n62853:58352,\n62854:58353,\n62855:58354,\n62856:58355,\n62857:58356,\n62858:58357,\n62859:58358,\n62860:58359,\n62861:58360,\n62862:58361,\n62863:58362,\n62864:58363,\n62865:58364,\n62866:58365,\n62867:58366,\n62868:58367,\n62869:58368,\n62870:58369,\n62871:58370,\n62872:58371,\n62873:58372,\n62874:58373,\n62875:58374,\n62876:58375,\n62877:58376,\n62878:58377,\n62879:58378,\n62880:58379,\n62881:58380,\n62882:58381,\n62883:58382,\n62884:58383,\n62885:58384,\n62886:58385,\n62887:58386,\n62888:58387,\n62889:58388,\n62890:58389,\n62891:58390,\n62892:58391,\n62893:58392,\n62894:58393,\n62895:58394,\n62896:58395,\n62897:58396,\n62898:58397,\n62899:58398,\n62900:58399,\n62901:58400,\n62902:58401,\n62903:58402,\n62904:58403,\n62905:58404,\n62906:58405,\n62907:58406,\n62908:58407,\n62909:58408,\n62910:58409,\n62911:58410,\n62912:58411,\n62913:58412,\n62914:58413,\n62915:58414,\n62916:58415,\n62917:58416,\n62918:58417,\n62919:58418,\n62920:58419,\n62921:58420,\n62922:58421,\n62923:58422,\n62924:58423,\n62925:58424,\n62926:58425,\n62927:58426,\n62928:58427,\n62929:58428,\n62930:58429,\n62931:58430,\n62932:58431,\n62933:58432,\n62934:58433,\n62935:58434,\n62936:58435,\n62937:58436,\n62938:58437,\n62939:58438,\n62940:58439,\n62941:58440,\n62942:58441,\n62943:58442,\n62944:58443,\n62945:58444,\n62946:58445,\n62947:58446,\n62948:58447,\n62949:58448,\n62950:58449,\n62951:58450,\n62952:58451,\n62953:58452,\n62954:58453,\n62955:58454,\n62956:58455,\n62957:58456,\n62958:58457,\n62959:58458,\n62960:58459,\n62961:58460,\n62962:58461,\n62963:58462,\n62964:58463,\n62965:58464,\n62966:58465,\n62967:58466,\n62968:58467,\n62969:58468,\n62970:58469,\n62971:58470,\n62972:58471,\n63040:58472,\n63041:58473,\n63042:58474,\n63043:58475,\n63044:58476,\n63045:58477,\n63046:58478,\n63047:58479,\n63048:58480,\n63049:58481,\n63050:58482,\n63051:58483,\n63052:58484,\n63053:58485,\n63054:58486,\n63055:58487,\n63056:58488,\n63057:58489,\n63058:58490,\n63059:58491,\n63060:58492,\n63061:58493,\n63062:58494,\n63063:58495,\n63064:58496,\n63065:58497,\n63066:58498,\n63067:58499,\n63068:58500,\n63069:58501,\n63070:58502,\n63071:58503,\n63072:58504,\n63073:58505,\n63074:58506,\n63075:58507,\n63076:58508,\n63077:58509,\n63078:58510,\n63079:58511,\n63080:58512,\n63081:58513,\n63082:58514,\n63083:58515,\n63084:58516,\n63085:58517,\n63086:58518,\n63087:58519,\n63088:58520,\n63089:58521,\n63090:58522,\n63091:58523,\n63092:58524,\n63093:58525,\n63094:58526,\n63095:58527,\n63096:58528,\n63097:58529,\n63098:58530,\n63099:58531,\n63100:58532,\n63101:58533,\n63102:58534,\n63104:58535,\n63105:58536,\n63106:58537,\n63107:58538,\n63108:58539,\n63109:58540,\n63110:58541,\n63111:58542,\n63112:58543,\n63113:58544,\n63114:58545,\n63115:58546,\n63116:58547,\n63117:58548,\n63118:58549,\n63119:58550,\n63120:58551,\n63121:58552,\n63122:58553,\n63123:58554,\n63124:58555,\n63125:58556,\n63126:58557,\n63127:58558,\n63128:58559,\n63129:58560,\n63130:58561,\n63131:58562,\n63132:58563,\n63133:58564,\n63134:58565,\n63135:58566,\n63136:58567,\n63137:58568,\n63138:58569,\n63139:58570,\n63140:58571,\n63141:58572,\n63142:58573,\n63143:58574,\n63144:58575,\n63145:58576,\n63146:58577,\n63147:58578,\n63148:58579,\n63149:58580,\n63150:58581,\n63151:58582,\n63152:58583,\n63153:58584,\n63154:58585,\n63155:58586,\n63156:58587,\n63157:58588,\n63158:58589,\n63159:58590,\n63160:58591,\n63161:58592,\n63162:58593,\n63163:58594,\n63164:58595,\n63165:58596,\n63166:58597,\n63167:58598,\n63168:58599,\n63169:58600,\n63170:58601,\n63171:58602,\n63172:58603,\n63173:58604,\n63174:58605,\n63175:58606,\n63176:58607,\n63177:58608,\n63178:58609,\n63179:58610,\n63180:58611,\n63181:58612,\n63182:58613,\n63183:58614,\n63184:58615,\n63185:58616,\n63186:58617,\n63187:58618,\n63188:58619,\n63189:58620,\n63190:58621,\n63191:58622,\n63192:58623,\n63193:58624,\n63194:58625,\n63195:58626,\n63196:58627,\n63197:58628,\n63198:58629,\n63199:58630,\n63200:58631,\n63201:58632,\n63202:58633,\n63203:58634,\n63204:58635,\n63205:58636,\n63206:58637,\n63207:58638,\n63208:58639,\n63209:58640,\n63210:58641,\n63211:58642,\n63212:58643,\n63213:58644,\n63214:58645,\n63215:58646,\n63216:58647,\n63217:58648,\n63218:58649,\n63219:58650,\n63220:58651,\n63221:58652,\n63222:58653,\n63223:58654,\n63224:58655,\n63225:58656,\n63226:58657,\n63227:58658,\n63228:58659,\n63296:58660,\n63297:58661,\n63298:58662,\n63299:58663,\n63300:58664,\n63301:58665,\n63302:58666,\n63303:58667,\n63304:58668,\n63305:58669,\n63306:58670,\n63307:58671,\n63308:58672,\n63309:58673,\n63310:58674,\n63311:58675,\n63312:58676,\n63313:58677,\n63314:58678,\n63315:58679,\n63316:58680,\n63317:58681,\n63318:58682,\n63319:58683,\n63320:58684,\n63321:58685,\n63322:58686,\n63323:58687,\n63324:58688,\n63325:58689,\n63326:58690,\n63327:58691,\n63328:58692,\n63329:58693,\n63330:58694,\n63331:58695,\n63332:58696,\n63333:58697,\n63334:58698,\n63335:58699,\n63336:58700,\n63337:58701,\n63338:58702,\n63339:58703,\n63340:58704,\n63341:58705,\n63342:58706,\n63343:58707,\n63344:58708,\n63345:58709,\n63346:58710,\n63347:58711,\n63348:58712,\n63349:58713,\n63350:58714,\n63351:58715,\n63352:58716,\n63353:58717,\n63354:58718,\n63355:58719,\n63356:58720,\n63357:58721,\n63358:58722,\n63360:58723,\n63361:58724,\n63362:58725,\n63363:58726,\n63364:58727,\n63365:58728,\n63366:58729,\n63367:58730,\n63368:58731,\n63369:58732,\n63370:58733,\n63371:58734,\n63372:58735,\n63373:58736,\n63374:58737,\n63375:58738,\n63376:58739,\n63377:58740,\n63378:58741,\n63379:58742,\n63380:58743,\n63381:58744,\n63382:58745,\n63383:58746,\n63384:58747,\n63385:58748,\n63386:58749,\n63387:58750,\n63388:58751,\n63389:58752,\n63390:58753,\n63391:58754,\n63392:58755,\n63393:58756,\n63394:58757,\n63395:58758,\n63396:58759,\n63397:58760,\n63398:58761,\n63399:58762,\n63400:58763,\n63401:58764,\n63402:58765,\n63403:58766,\n63404:58767,\n63405:58768,\n63406:58769,\n63407:58770,\n63408:58771,\n63409:58772,\n63410:58773,\n63411:58774,\n63412:58775,\n63413:58776,\n63414:58777,\n63415:58778,\n63416:58779,\n63417:58780,\n63418:58781,\n63419:58782,\n63420:58783,\n63421:58784,\n63422:58785,\n63423:58786,\n63424:58787,\n63425:58788,\n63426:58789,\n63427:58790,\n63428:58791,\n63429:58792,\n63430:58793,\n63431:58794,\n63432:58795,\n63433:58796,\n63434:58797,\n63435:58798,\n63436:58799,\n63437:58800,\n63438:58801,\n63439:58802,\n63440:58803,\n63441:58804,\n63442:58805,\n63443:58806,\n63444:58807,\n63445:58808,\n63446:58809,\n63447:58810,\n63448:58811,\n63449:58812,\n63450:58813,\n63451:58814,\n63452:58815,\n63453:58816,\n63454:58817,\n63455:58818,\n63456:58819,\n63457:58820,\n63458:58821,\n63459:58822,\n63460:58823,\n63461:58824,\n63462:58825,\n63463:58826,\n63464:58827,\n63465:58828,\n63466:58829,\n63467:58830,\n63468:58831,\n63469:58832,\n63470:58833,\n63471:58834,\n63472:58835,\n63473:58836,\n63474:58837,\n63475:58838,\n63476:58839,\n63477:58840,\n63478:58841,\n63479:58842,\n63480:58843,\n63481:58844,\n63482:58845,\n63483:58846,\n63484:58847,\n63552:58848,\n63553:58849,\n63554:58850,\n63555:58851,\n63556:58852,\n63557:58853,\n63558:58854,\n63559:58855,\n63560:58856,\n63561:58857,\n63562:58858,\n63563:58859,\n63564:58860,\n63565:58861,\n63566:58862,\n63567:58863,\n63568:58864,\n63569:58865,\n63570:58866,\n63571:58867,\n63572:58868,\n63573:58869,\n63574:58870,\n63575:58871,\n63576:58872,\n63577:58873,\n63578:58874,\n63579:58875,\n63580:58876,\n63581:58877,\n63582:58878,\n63583:58879,\n63584:58880,\n63585:58881,\n63586:58882,\n63587:58883,\n63588:58884,\n63589:58885,\n63590:58886,\n63591:58887,\n63592:58888,\n63593:58889,\n63594:58890,\n63595:58891,\n63596:58892,\n63597:58893,\n63598:58894,\n63599:58895,\n63600:58896,\n63601:58897,\n63602:58898,\n63603:58899,\n63604:58900,\n63605:58901,\n63606:58902,\n63607:58903,\n63608:58904,\n63609:58905,\n63610:58906,\n63611:58907,\n63612:58908,\n63613:58909,\n63614:58910,\n63616:58911,\n63617:58912,\n63618:58913,\n63619:58914,\n63620:58915,\n63621:58916,\n63622:58917,\n63623:58918,\n63624:58919,\n63625:58920,\n63626:58921,\n63627:58922,\n63628:58923,\n63629:58924,\n63630:58925,\n63631:58926,\n63632:58927,\n63633:58928,\n63634:58929,\n63635:58930,\n63636:58931,\n63637:58932,\n63638:58933,\n63639:58934,\n63640:58935,\n63641:58936,\n63642:58937,\n63643:58938,\n63644:58939,\n63645:58940,\n63646:58941,\n63647:58942,\n63648:58943,\n63649:58944,\n63650:58945,\n63651:58946,\n63652:58947,\n63653:58948,\n63654:58949,\n63655:58950,\n63656:58951,\n63657:58952,\n63658:58953,\n63659:58954,\n63660:58955,\n63661:58956,\n63662:58957,\n63663:58958,\n63664:58959,\n63665:58960,\n63666:58961,\n63667:58962,\n63668:58963,\n63669:58964,\n63670:58965,\n63671:58966,\n63672:58967,\n63673:58968,\n63674:58969,\n63675:58970,\n63676:58971,\n63677:58972,\n63678:58973,\n63679:58974,\n63680:58975,\n63681:58976,\n63682:58977,\n63683:58978,\n63684:58979,\n63685:58980,\n63686:58981,\n63687:58982,\n63688:58983,\n63689:58984,\n63690:58985,\n63691:58986,\n63692:58987,\n63693:58988,\n63694:58989,\n63695:58990,\n63696:58991,\n63697:58992,\n63698:58993,\n63699:58994,\n63700:58995,\n63701:58996,\n63702:58997,\n63703:58998,\n63704:58999,\n63705:59000,\n63706:59001,\n63707:59002,\n63708:59003,\n63709:59004,\n63710:59005,\n63711:59006,\n63712:59007,\n63713:59008,\n63714:59009,\n63715:59010,\n63716:59011,\n63717:59012,\n63718:59013,\n63719:59014,\n63720:59015,\n63721:59016,\n63722:59017,\n63723:59018,\n63724:59019,\n63725:59020,\n63726:59021,\n63727:59022,\n63728:59023,\n63729:59024,\n63730:59025,\n63731:59026,\n63732:59027,\n63733:59028,\n63734:59029,\n63735:59030,\n63736:59031,\n63737:59032,\n63738:59033,\n63739:59034,\n63740:59035,\n64064:8560,\n64065:8561,\n64066:8562,\n64067:8563,\n64068:8564,\n64069:8565,\n64070:8566,\n64071:8567,\n64072:8568,\n64073:8569,\n64074:8544,\n64075:8545,\n64076:8546,\n64077:8547,\n64078:8548,\n64079:8549,\n64080:8550,\n64081:8551,\n64082:8552,\n64083:8553,\n64084:65506,\n64085:65508,\n64086:65287,\n64087:65282,\n64088:12849,\n64089:8470,\n64090:8481,\n64091:8757,\n64092:32394,\n64093:35100,\n64094:37704,\n64095:37512,\n64096:34012,\n64097:20425,\n64098:28859,\n64099:26161,\n64100:26824,\n64101:37625,\n64102:26363,\n64103:24389,\n64104:20008,\n64105:20193,\n64106:20220,\n64107:20224,\n64108:20227,\n64109:20281,\n64110:20310,\n64111:20370,\n64112:20362,\n64113:20378,\n64114:20372,\n64115:20429,\n64116:20544,\n64117:20514,\n64118:20479,\n64119:20510,\n64120:20550,\n64121:20592,\n64122:20546,\n64123:20628,\n64124:20724,\n64125:20696,\n64126:20810,\n64128:20836,\n64129:20893,\n64130:20926,\n64131:20972,\n64132:21013,\n64133:21148,\n64134:21158,\n64135:21184,\n64136:21211,\n64137:21248,\n64138:21255,\n64139:21284,\n64140:21362,\n64141:21395,\n64142:21426,\n64143:21469,\n64144:64014,\n64145:21660,\n64146:21642,\n64147:21673,\n64148:21759,\n64149:21894,\n64150:22361,\n64151:22373,\n64152:22444,\n64153:22472,\n64154:22471,\n64155:64015,\n64156:64016,\n64157:22686,\n64158:22706,\n64159:22795,\n64160:22867,\n64161:22875,\n64162:22877,\n64163:22883,\n64164:22948,\n64165:22970,\n64166:23382,\n64167:23488,\n64168:29999,\n64169:23512,\n64170:23532,\n64171:23582,\n64172:23718,\n64173:23738,\n64174:23797,\n64175:23847,\n64176:23891,\n64177:64017,\n64178:23874,\n64179:23917,\n64180:23992,\n64181:23993,\n64182:24016,\n64183:24353,\n64184:24372,\n64185:24423,\n64186:24503,\n64187:24542,\n64188:24669,\n64189:24709,\n64190:24714,\n64191:24798,\n64192:24789,\n64193:24864,\n64194:24818,\n64195:24849,\n64196:24887,\n64197:24880,\n64198:24984,\n64199:25107,\n64200:25254,\n64201:25589,\n64202:25696,\n64203:25757,\n64204:25806,\n64205:25934,\n64206:26112,\n64207:26133,\n64208:26171,\n64209:26121,\n64210:26158,\n64211:26142,\n64212:26148,\n64213:26213,\n64214:26199,\n64215:26201,\n64216:64018,\n64217:26227,\n64218:26265,\n64219:26272,\n64220:26290,\n64221:26303,\n64222:26362,\n64223:26382,\n64224:63785,\n64225:26470,\n64226:26555,\n64227:26706,\n64228:26560,\n64229:26625,\n64230:26692,\n64231:26831,\n64232:64019,\n64233:26984,\n64234:64020,\n64235:27032,\n64236:27106,\n64237:27184,\n64238:27243,\n64239:27206,\n64240:27251,\n64241:27262,\n64242:27362,\n64243:27364,\n64244:27606,\n64245:27711,\n64246:27740,\n64247:27782,\n64248:27759,\n64249:27866,\n64250:27908,\n64251:28039,\n64252:28015,\n64320:28054,\n64321:28076,\n64322:28111,\n64323:28152,\n64324:28146,\n64325:28156,\n64326:28217,\n64327:28252,\n64328:28199,\n64329:28220,\n64330:28351,\n64331:28552,\n64332:28597,\n64333:28661,\n64334:28677,\n64335:28679,\n64336:28712,\n64337:28805,\n64338:28843,\n64339:28943,\n64340:28932,\n64341:29020,\n64342:28998,\n64343:28999,\n64344:64021,\n64345:29121,\n64346:29182,\n64347:29361,\n64348:29374,\n64349:29476,\n64350:64022,\n64351:29559,\n64352:29629,\n64353:29641,\n64354:29654,\n64355:29667,\n64356:29650,\n64357:29703,\n64358:29685,\n64359:29734,\n64360:29738,\n64361:29737,\n64362:29742,\n64363:29794,\n64364:29833,\n64365:29855,\n64366:29953,\n64367:30063,\n64368:30338,\n64369:30364,\n64370:30366,\n64371:30363,\n64372:30374,\n64373:64023,\n64374:30534,\n64375:21167,\n64376:30753,\n64377:30798,\n64378:30820,\n64379:30842,\n64380:31024,\n64381:64024,\n64382:64025,\n64384:64026,\n64385:31124,\n64386:64027,\n64387:31131,\n64388:31441,\n64389:31463,\n64390:64028,\n64391:31467,\n64392:31646,\n64393:64029,\n64394:32072,\n64395:32092,\n64396:32183,\n64397:32160,\n64398:32214,\n64399:32338,\n64400:32583,\n64401:32673,\n64402:64030,\n64403:33537,\n64404:33634,\n64405:33663,\n64406:33735,\n64407:33782,\n64408:33864,\n64409:33972,\n64410:34131,\n64411:34137,\n64412:34155,\n64413:64031,\n64414:34224,\n64415:64032,\n64416:64033,\n64417:34823,\n64418:35061,\n64419:35346,\n64420:35383,\n64421:35449,\n64422:35495,\n64423:35518,\n64424:35551,\n64425:64034,\n64426:35574,\n64427:35667,\n64428:35711,\n64429:36080,\n64430:36084,\n64431:36114,\n64432:36214,\n64433:64035,\n64434:36559,\n64435:64036,\n64436:64037,\n64437:36967,\n64438:37086,\n64439:64038,\n64440:37141,\n64441:37159,\n64442:37338,\n64443:37335,\n64444:37342,\n64445:37357,\n64446:37358,\n64447:37348,\n64448:37349,\n64449:37382,\n64450:37392,\n64451:37386,\n64452:37434,\n64453:37440,\n64454:37436,\n64455:37454,\n64456:37465,\n64457:37457,\n64458:37433,\n64459:37479,\n64460:37543,\n64461:37495,\n64462:37496,\n64463:37607,\n64464:37591,\n64465:37593,\n64466:37584,\n64467:64039,\n64468:37589,\n64469:37600,\n64470:37587,\n64471:37669,\n64472:37665,\n64473:37627,\n64474:64040,\n64475:37662,\n64476:37631,\n64477:37661,\n64478:37634,\n64479:37744,\n64480:37719,\n64481:37796,\n64482:37830,\n64483:37854,\n64484:37880,\n64485:37937,\n64486:37957,\n64487:37960,\n64488:38290,\n64489:63964,\n64490:64041,\n64491:38557,\n64492:38575,\n64493:38707,\n64494:38715,\n64495:38723,\n64496:38733,\n64497:38735,\n64498:38737,\n64499:38741,\n64500:38999,\n64501:39013,\n64502:64042,\n64503:64043,\n64504:39207,\n64505:64044,\n64506:39326,\n64507:39502,\n64508:39641,\n64576:39644,\n64577:39797,\n64578:39794,\n64579:39823,\n64580:39857,\n64581:39867,\n64582:39936,\n64583:40304,\n64584:40299,\n64585:64045,\n64586:40473,\n64587:40657\n};\n\n/**\n * @author takahiro / https://github.com/takahirox\n */\n\nfunction DataViewEx ( buffer, littleEndian ) {\n\n\tthis.dv = new DataView( buffer );\n\tthis.offset = 0;\n\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\tthis.encoder = new CharsetEncoder();\n\n}\n\nDataViewEx.prototype = {\n\n\tconstructor: DataViewEx,\n\n\tgetInt8: function () {\n\n\t\tvar value = this.dv.getInt8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t},\n\n\tgetInt8Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getInt8() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetUint8: function () {\n\n\t\tvar value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t},\n\n\tgetUint8Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getUint8() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\n\tgetInt16: function () {\n\n\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t},\n\n\tgetInt16Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getInt16() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetUint16: function () {\n\n\t\tvar value = this.dv.getUint16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t},\n\n\tgetUint16Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getUint16() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetInt32: function () {\n\n\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t},\n\n\tgetInt32Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetUint32: function () {\n\n\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t},\n\n\tgetUint32Array: function ( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getUint32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetFloat32: function () {\n\n\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t},\n\n\tgetFloat32Array: function( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetFloat64: function () {\n\n\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t},\n\n\tgetFloat64Array: function( size ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetIndex: function ( type, isUnsigned ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 1:\n\t\t\t\treturn ( isUnsigned === true ) ? this.getUint8() : this.getInt8();\n\n\t\t\tcase 2:\n\t\t\t\treturn ( isUnsigned === true ) ? this.getUint16() : this.getInt16();\n\n\t\t\tcase 4:\n\t\t\t\treturn this.getInt32(); // No Uint32\n\n\t\t\tdefault:\n\t\t\t\tthrow 'unknown number type ' + type + ' exception.';\n\n\t\t}\n\n\t},\n\n\tgetIndexArray: function ( type, size, isUnsigned ) {\n\n\t\tvar a = [];\n\n\t\tfor ( var i = 0; i < size; i++ ) {\n\n\t\t\ta.push( this.getIndex( type, isUnsigned ) );\n\n\t\t}\n\n\t\treturn a;\n\n\t},\n\n\tgetChars: function ( size ) {\n\n\t\tvar str = '';\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tvar value = this.getUint8();\n\t\t\tsize--;\n\n\t\t\tif ( value === 0 ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tstr += String.fromCharCode( value );\n\n\t\t}\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tthis.getUint8();\n\t\t\tsize--;\n\n\t\t}\n\n\t\treturn str;\n\n\t},\n\n\tgetSjisStringsAsUnicode: function ( size ) {\n\n\t\tvar a = [];\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tvar value = this.getUint8();\n\t\t\tsize--;\n\n\t\t\tif ( value === 0 ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\ta.push( value );\n\n\t\t}\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tthis.getUint8();\n\t\t\tsize--;\n\n\t\t}\n\n\t\treturn this.encoder.s2u( new Uint8Array( a ) );\n\n\t},\n\n\tgetUnicodeStrings: function ( size ) {\n\n\t\tvar str = '';\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tvar value = this.getUint16();\n\t\t\tsize -= 2;\n\n\t\t\tif ( value === 0 ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tstr += String.fromCharCode( value );\n\n\t\t}\n\n\t\twhile ( size > 0 ) {\n\n\t\t\tthis.getUint8();\n\t\t\tsize--;\n\n\t\t}\n\n\t\treturn str;\n\n\t},\n\n\tgetTextBuffer: function () {\n\n\t\tvar size = this.getUint32();\n\t\treturn this.getUnicodeStrings( size );\n\n\t}\n\n};\n\n/**\n * @author takahiro / https://github.com/takahirox\n */\n\nfunction DataCreationHelper () {\n}\n\nDataCreationHelper.prototype = {\n\n\tconstructor: DataCreationHelper,\n\n\tleftToRightVector3: function ( v ) {\n\n\t\tv[ 2 ] = -v[ 2 ];\n\n\t},\n\n\tleftToRightQuaternion: function ( q ) {\n\n\t\tq[ 0 ] = -q[ 0 ];\n\t\tq[ 1 ] = -q[ 1 ];\n\n\t},\n\n\tleftToRightEuler: function ( r ) {\n\n\t\tr[ 0 ] = -r[ 0 ];\n\t\tr[ 1 ] = -r[ 1 ];\n\n\t},\n\n\tleftToRightIndexOrder: function ( p ) {\n\n\t\tvar tmp = p[ 2 ];\n\t\tp[ 2 ] = p[ 0 ];\n\t\tp[ 0 ] = tmp;\n\n\t},\n\n\tleftToRightVector3Range: function ( v1, v2 ) {\n\n\t\tvar tmp = -v2[ 2 ];\n\t\tv2[ 2 ] = -v1[ 2 ];\n\t\tv1[ 2 ] = tmp;\n\n\t},\n\n\tleftToRightEulerRange: function ( r1, r2 ) {\n\n\t\tvar tmp1 = -r2[ 0 ];\n\t\tvar tmp2 = -r2[ 1 ];\n\t\tr2[ 0 ] = -r1[ 0 ];\n\t\tr2[ 1 ] = -r1[ 1 ];\n\t\tr1[ 0 ] = tmp1;\n\t\tr1[ 1 ] = tmp2;\n\n\t}\n\n};\n\n/**\n * @author takahiro / https://github.com/takahirox\n */\n\nfunction Parser() {\n}\n\nParser.prototype.parsePmd = function ( buffer, leftToRight ) {\n\n\tvar pmd = {};\n\tvar dv = new DataViewEx( buffer );\n\n\tpmd.metadata = {};\n\tpmd.metadata.format = 'pmd';\n\tpmd.metadata.coordinateSystem = 'left';\n\n\tvar parseHeader = function () {\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.magic = dv.getChars( 3 );\n\n\t\tif ( metadata.magic !== 'Pmd' ) {\n\n\t\t\tthrow 'PMD file magic is not Pmd, but ' + metadata.magic;\n\n\t\t}\n\n\t\tmetadata.version = dv.getFloat32();\n\t\tmetadata.modelName = dv.getSjisStringsAsUnicode( 20 );\n\t\tmetadata.comment = dv.getSjisStringsAsUnicode( 256 );\n\n\t};\n\n\tvar parseVertices = function () {\n\n\t\tvar parseVertex = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.normal = dv.getFloat32Array( 3 );\n\t\t\tp.uv = dv.getFloat32Array( 2 );\n\t\t\tp.skinIndices = dv.getUint16Array( 2 );\n\t\t\tp.skinWeights = [ dv.getUint8() / 100 ];\n\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\n\t\t\tp.edgeFlag = dv.getUint8();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.vertexCount = dv.getUint32();\n\n\t\tpmd.vertices = [];\n\n\t\tfor ( var i = 0; i < metadata.vertexCount; i++ ) {\n\n\t\t\tpmd.vertices.push( parseVertex() );\n\n\t\t}\n\n\t};\n\n\tvar parseFaces = function () {\n\n\t\tvar parseFace = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.indices = dv.getUint16Array( 3 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.faceCount = dv.getUint32() / 3;\n\n\t\tpmd.faces = [];\n\n\t\tfor ( var i = 0; i < metadata.faceCount; i++ ) {\n\n\t\t\tpmd.faces.push( parseFace() );\n\n\t\t}\n\n\t};\n\n\tvar parseMaterials = function () {\n\n\t\tvar parseMaterial = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.diffuse = dv.getFloat32Array( 4 );\n\t\t\tp.shininess = dv.getFloat32();\n\t\t\tp.specular = dv.getFloat32Array( 3 );\n\t\t\tp.ambient = dv.getFloat32Array( 3 );\n\t\t\tp.toonIndex = dv.getInt8();\n\t\t\tp.edgeFlag = dv.getUint8();\n\t\t\tp.faceCount = dv.getUint32() / 3;\n\t\t\tp.fileName = dv.getSjisStringsAsUnicode( 20 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.materialCount = dv.getUint32();\n\n\t\tpmd.materials = [];\n\n\t\tfor ( var i = 0; i < metadata.materialCount; i++ ) {\n\n\t\t\tpmd.materials.push( parseMaterial() );\n\n\t\t}\n\n\t};\n\n\tvar parseBones = function () {\n\n\t\tvar parseBone = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\tp.parentIndex = dv.getInt16();\n\t\t\tp.tailIndex = dv.getInt16();\n\t\t\tp.type = dv.getUint8();\n\t\t\tp.ikIndex = dv.getInt16();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.boneCount = dv.getUint16();\n\n\t\tpmd.bones = [];\n\n\t\tfor ( var i = 0; i < metadata.boneCount; i++ ) {\n\n\t\t\tpmd.bones.push( parseBone() );\n\n\t\t}\n\n\t};\n\n\tvar parseIks = function () {\n\n\t\tvar parseIk = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.target = dv.getUint16();\n\t\t\tp.effector = dv.getUint16();\n\t\t\tp.linkCount = dv.getUint8();\n\t\t\tp.iteration = dv.getUint16();\n\t\t\tp.maxAngle = dv.getFloat32();\n\n\t\t\tp.links = [];\n\t\t\tfor ( var i = 0; i < p.linkCount; i++ ) {\n\n\t\t\t\tvar link = {};\n\t\t\t\tlink.index = dv.getUint16();\n\t\t\t\tp.links.push( link );\n\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.ikCount = dv.getUint16();\n\n\t\tpmd.iks = [];\n\n\t\tfor ( var i = 0; i < metadata.ikCount; i++ ) {\n\n\t\t\tpmd.iks.push( parseIk() );\n\n\t\t}\n\n\t};\n\n\tvar parseMorphs = function () {\n\n\t\tvar parseMorph = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\tp.elementCount = dv.getUint32();\n\t\t\tp.type = dv.getUint8();\n\n\t\t\tp.elements = [];\n\t\t\tfor ( var i = 0; i < p.elementCount; i++ ) {\n\n\t\t\t\tp.elements.push( {\n\t\t\t\t\tindex: dv.getUint32(),\n\t\t\t\t\tposition: dv.getFloat32Array( 3 )\n\t\t\t\t} ) ;\n\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.morphCount = dv.getUint16();\n\n\t\tpmd.morphs = [];\n\n\t\tfor ( var i = 0; i < metadata.morphCount; i++ ) {\n\n\t\t\tpmd.morphs.push( parseMorph() );\n\n\t\t}\n\n\n\t};\n\n\tvar parseMorphFrames = function () {\n\n\t\tvar parseMorphFrame = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.index = dv.getUint16();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.morphFrameCount = dv.getUint8();\n\n\t\tpmd.morphFrames = [];\n\n\t\tfor ( var i = 0; i < metadata.morphFrameCount; i++ ) {\n\n\t\t\tpmd.morphFrames.push( parseMorphFrame() );\n\n\t\t}\n\n\t};\n\n\tvar parseBoneFrameNames = function () {\n\n\t\tvar parseBoneFrameName = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 50 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.boneFrameNameCount = dv.getUint8();\n\n\t\tpmd.boneFrameNames = [];\n\n\t\tfor ( var i = 0; i < metadata.boneFrameNameCount; i++ ) {\n\n\t\t\tpmd.boneFrameNames.push( parseBoneFrameName() );\n\n\t\t}\n\n\t};\n\n\tvar parseBoneFrames = function () {\n\n\t\tvar parseBoneFrame = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.boneIndex = dv.getInt16();\n\t\t\tp.frameIndex = dv.getUint8();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.boneFrameCount = dv.getUint32();\n\n\t\tpmd.boneFrames = [];\n\n\t\tfor ( var i = 0; i < metadata.boneFrameCount; i++ ) {\n\n\t\t\tpmd.boneFrames.push( parseBoneFrame() );\n\n\t\t}\n\n\t};\n\n\tvar parseEnglishHeader = function () {\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.englishCompatibility = dv.getUint8();\n\n\t\tif ( metadata.englishCompatibility > 0 ) {\n\n\t\t\tmetadata.englishModelName = dv.getSjisStringsAsUnicode( 20 );\n\t\t\tmetadata.englishComment = dv.getSjisStringsAsUnicode( 256 );\n\n\t\t}\n\n\t};\n\n\tvar parseEnglishBoneNames = function () {\n\n\t\tvar parseEnglishBoneName = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\n\t\tif ( metadata.englishCompatibility === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tpmd.englishBoneNames = [];\n\n\t\tfor ( var i = 0; i < metadata.boneCount; i++ ) {\n\n\t\t\tpmd.englishBoneNames.push( parseEnglishBoneName() );\n\n\t\t}\n\n\t};\n\n\tvar parseEnglishMorphNames = function () {\n\n\t\tvar parseEnglishMorphName = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\n\t\tif ( metadata.englishCompatibility === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tpmd.englishMorphNames = [];\n\n\t\tfor ( var i = 0; i < metadata.morphCount - 1; i++ ) {\n\n\t\t\tpmd.englishMorphNames.push( parseEnglishMorphName() );\n\n\t\t}\n\n\t};\n\n\tvar parseEnglishBoneFrameNames = function () {\n\n\t\tvar parseEnglishBoneFrameName = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 50 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\n\t\tif ( metadata.englishCompatibility === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tpmd.englishBoneFrameNames = [];\n\n\t\tfor ( var i = 0; i < metadata.boneFrameNameCount; i++ ) {\n\n\t\t\tpmd.englishBoneFrameNames.push( parseEnglishBoneFrameName() );\n\n\t\t}\n\n\t};\n\n\tvar parseToonTextures = function () {\n\n\t\tvar parseToonTexture = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.fileName = dv.getSjisStringsAsUnicode( 100 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tpmd.toonTextures = [];\n\n\t\tfor ( var i = 0; i < 10; i++ ) {\n\n\t\t\tpmd.toonTextures.push( parseToonTexture() );\n\n\t\t}\n\n\t};\n\n\tvar parseRigidBodies = function () {\n\n\t\tvar parseRigidBody = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\tp.boneIndex = dv.getInt16();\n\t\t\tp.groupIndex = dv.getUint8();\n\t\t\tp.groupTarget = dv.getUint16();\n\t\t\tp.shapeType = dv.getUint8();\n\t\t\tp.width = dv.getFloat32();\n\t\t\tp.height = dv.getFloat32();\n\t\t\tp.depth = dv.getFloat32();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 3 );\n\t\t\tp.weight = dv.getFloat32();\n\t\t\tp.positionDamping = dv.getFloat32();\n\t\t\tp.rotationDamping = dv.getFloat32();\n\t\t\tp.restitution = dv.getFloat32();\n\t\t\tp.friction = dv.getFloat32();\n\t\t\tp.type = dv.getUint8();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.rigidBodyCount = dv.getUint32();\n\n\t\tpmd.rigidBodies = [];\n\n\t\tfor ( var i = 0; i < metadata.rigidBodyCount; i++ ) {\n\n\t\t\tpmd.rigidBodies.push( parseRigidBody() );\n\n\t\t}\n\n\t};\n\n\tvar parseConstraints = function () {\n\n\t\tvar parseConstraint = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\n\t\t\tp.rigidBodyIndex1 = dv.getUint32();\n\t\t\tp.rigidBodyIndex2 = dv.getUint32();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 3 );\n\t\t\tp.translationLimitation1 = dv.getFloat32Array( 3 );\n\t\t\tp.translationLimitation2 = dv.getFloat32Array( 3 );\n\t\t\tp.rotationLimitation1 = dv.getFloat32Array( 3 );\n\t\t\tp.rotationLimitation2 = dv.getFloat32Array( 3 );\n\t\t\tp.springPosition = dv.getFloat32Array( 3 );\n\t\t\tp.springRotation = dv.getFloat32Array( 3 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmd.metadata;\n\t\tmetadata.constraintCount = dv.getUint32();\n\n\t\tpmd.constraints = [];\n\n\t\tfor ( var i = 0; i < metadata.constraintCount; i++ ) {\n\n\t\t\tpmd.constraints.push( parseConstraint() );\n\n\t\t}\n\n\t};\n\n\tparseHeader();\n\tparseVertices();\n\tparseFaces();\n\tparseMaterials();\n\tparseBones();\n\tparseIks();\n\tparseMorphs();\n\tparseMorphFrames();\n\tparseBoneFrameNames();\n\tparseBoneFrames();\n\tparseEnglishHeader();\n\tparseEnglishBoneNames();\n\tparseEnglishMorphNames();\n\tparseEnglishBoneFrameNames();\n\tparseToonTextures();\n\tparseRigidBodies();\n\tparseConstraints();\n\n\tif ( leftToRight === true ) this.leftToRightModel( pmd );\n\n\t// console.log( pmd ); // for console debug\n\n\treturn pmd;\n\n};\n\nParser.prototype.parsePmx = function ( buffer, leftToRight ) {\n\n\tvar pmx = {};\n\tvar dv = new DataViewEx( buffer );\n\n\tpmx.metadata = {};\n\tpmx.metadata.format = 'pmx';\n\tpmx.metadata.coordinateSystem = 'left';\n\n\tvar parseHeader = function () {\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.magic = dv.getChars( 4 );\n\n\t\t// Note: don't remove the last blank space.\n\t\tif ( metadata.magic !== 'PMX ' ) {\n\n\t\t\tthrow 'PMX file magic is not PMX , but ' + metadata.magic;\n\n\t\t}\n\n\t\tmetadata.version = dv.getFloat32();\n\n\t\tif ( metadata.version !== 2.0 && metadata.version !== 2.1 ) {\n\n\t\t\tthrow 'PMX version ' + metadata.version + ' is not supported.';\n\n\t\t}\n\n\t\tmetadata.headerSize = dv.getUint8();\n\t\tmetadata.encoding = dv.getUint8();\n\t\tmetadata.additionalUvNum = dv.getUint8();\n\t\tmetadata.vertexIndexSize = dv.getUint8();\n\t\tmetadata.textureIndexSize = dv.getUint8();\n\t\tmetadata.materialIndexSize = dv.getUint8();\n\t\tmetadata.boneIndexSize = dv.getUint8();\n\t\tmetadata.morphIndexSize = dv.getUint8();\n\t\tmetadata.rigidBodyIndexSize = dv.getUint8();\n\t\tmetadata.modelName = dv.getTextBuffer();\n\t\tmetadata.englishModelName = dv.getTextBuffer();\n\t\tmetadata.comment = dv.getTextBuffer();\n\t\tmetadata.englishComment = dv.getTextBuffer();\n\n\t};\n\n\tvar parseVertices = function () {\n\n\t\tvar parseVertex = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.normal = dv.getFloat32Array( 3 );\n\t\t\tp.uv = dv.getFloat32Array( 2 );\n\n\t\t\tp.auvs = [];\n\n\t\t\tfor ( var i = 0; i < pmx.metadata.additionalUvNum; i++ ) {\n\n\t\t\t\tp.auvs.push( dv.getFloat32Array( 4 ) );\n\n\t\t\t}\n\n\t\t\tp.type = dv.getUint8();\n\n\t\t\tvar indexSize = metadata.boneIndexSize;\n\n\t\t\tif ( p.type === 0 ) {  // BDEF1\n\n\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 1 );\n\t\t\t\tp.skinWeights = [ 1.0 ];\n\n\t\t\t} else if ( p.type === 1 ) {  // BDEF2\n\n\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 2 );\n\t\t\t\tp.skinWeights = dv.getFloat32Array( 1 );\n\t\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\n\n\t\t\t} else if ( p.type === 2 ) {  // BDEF4\n\n\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 4 );\n\t\t\t\tp.skinWeights = dv.getFloat32Array( 4 );\n\n\t\t\t} else if ( p.type === 3 ) {  // SDEF\n\n\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 2 );\n\t\t\t\tp.skinWeights = dv.getFloat32Array( 1 );\n\t\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\n\n\t\t\t\tp.skinC = dv.getFloat32Array( 3 );\n\t\t\t\tp.skinR0 = dv.getFloat32Array( 3 );\n\t\t\t\tp.skinR1 = dv.getFloat32Array( 3 );\n\n\t\t\t\t// SDEF is not supported yet and is handled as BDEF2 so far.\n\t\t\t\t// TODO: SDEF support\n\t\t\t\tp.type = 1;\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'unsupport bone type ' + p.type + ' exception.';\n\n\t\t\t}\n\n\t\t\tp.edgeRatio = dv.getFloat32();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.vertexCount = dv.getUint32();\n\n\t\tpmx.vertices = [];\n\n\t\tfor ( var i = 0; i < metadata.vertexCount; i++ ) {\n\n\t\t\tpmx.vertices.push( parseVertex() );\n\n\t\t}\n\n\t};\n\n\tvar parseFaces = function () {\n\n\t\tvar parseFace = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.indices = dv.getIndexArray( metadata.vertexIndexSize, 3, true );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.faceCount = dv.getUint32() / 3;\n\n\t\tpmx.faces = [];\n\n\t\tfor ( var i = 0; i < metadata.faceCount; i++ ) {\n\n\t\t\tpmx.faces.push( parseFace() );\n\n\t\t}\n\n\t};\n\n\tvar parseTextures = function () {\n\n\t\tvar parseTexture = function () {\n\n\t\t\treturn dv.getTextBuffer();\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.textureCount = dv.getUint32();\n\n\t\tpmx.textures = [];\n\n\t\tfor ( var i = 0; i < metadata.textureCount; i++ ) {\n\n\t\t\tpmx.textures.push( parseTexture() );\n\n\t\t}\n\n\t};\n\n\tvar parseMaterials = function () {\n\n\t\tvar parseMaterial = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.diffuse = dv.getFloat32Array( 4 );\n\t\t\tp.specular = dv.getFloat32Array( 3 );\n\t\t\tp.shininess = dv.getFloat32();\n\t\t\tp.ambient = dv.getFloat32Array( 3 );\n\t\t\tp.flag = dv.getUint8();\n\t\t\tp.edgeColor = dv.getFloat32Array( 4 );\n\t\t\tp.edgeSize = dv.getFloat32();\n\t\t\tp.textureIndex = dv.getIndex( pmx.metadata.textureIndexSize );\n\t\t\tp.envTextureIndex = dv.getIndex( pmx.metadata.textureIndexSize );\n\t\t\tp.envFlag = dv.getUint8();\n\t\t\tp.toonFlag = dv.getUint8();\n\n\t\t\tif ( p.toonFlag === 0 ) {\n\n\t\t\t\tp.toonIndex = dv.getIndex( pmx.metadata.textureIndexSize );\n\n\t\t\t} else if ( p.toonFlag === 1 ) {\n\n\t\t\t\tp.toonIndex = dv.getInt8();\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'unknown toon flag ' + p.toonFlag + ' exception.';\n\n\t\t\t}\n\n\t\t\tp.comment = dv.getTextBuffer();\n\t\t\tp.faceCount = dv.getUint32() / 3;\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.materialCount = dv.getUint32();\n\n\t\tpmx.materials = [];\n\n\t\tfor ( var i = 0; i < metadata.materialCount; i++ ) {\n\n\t\t\tpmx.materials.push( parseMaterial() );\n\n\t\t}\n\n\t};\n\n\tvar parseBones = function () {\n\n\t\tvar parseBone = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\tp.transformationClass = dv.getUint32();\n\t\t\tp.flag = dv.getUint16();\n\n\t\t\tif ( p.flag & 0x1 ) {\n\n\t\t\t\tp.connectIndex = dv.getIndex( pmx.metadata.boneIndexSize );\n\n\t\t\t} else {\n\n\t\t\t\tp.offsetPosition = dv.getFloat32Array( 3 );\n\n\t\t\t}\n\n\t\t\tif ( p.flag & 0x100 || p.flag & 0x200 ) {\n\n\t\t\t\t// Note: I don't think Grant is an appropriate name\n\t\t\t\t//       but I found that some English translated MMD tools use this term\n\t\t\t\t//       so I've named it Grant so far.\n\t\t\t\t//       I'd rename to more appropriate name from Grant later.\n\t\t\t\tvar grant = {};\n\n\t\t\t\tgrant.isLocal = ( p.flag & 0x80 ) !== 0 ? true : false;\n\t\t\t\tgrant.affectRotation = ( p.flag & 0x100 ) !== 0 ? true : false;\n\t\t\t\tgrant.affectPosition = ( p.flag & 0x200 ) !== 0 ? true : false;\n\t\t\t\tgrant.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\t\tgrant.ratio = dv.getFloat32();\n\n\t\t\t\tp.grant = grant;\n\n\t\t\t}\n\n\t\t\tif ( p.flag & 0x400 ) {\n\n\t\t\t\tp.fixAxis = dv.getFloat32Array( 3 );\n\n\t\t\t}\n\n\t\t\tif ( p.flag & 0x800 ) {\n\n\t\t\t\tp.localXVector = dv.getFloat32Array( 3 );\n\t\t\t\tp.localZVector = dv.getFloat32Array( 3 );\n\n\t\t\t}\n\n\t\t\tif ( p.flag & 0x2000 ) {\n\n\t\t\t\tp.key = dv.getUint32();\n\n\t\t\t}\n\n\t\t\tif ( p.flag & 0x20 ) {\n\n\t\t\t\tvar ik = {};\n\n\t\t\t\tik.effector = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\t\tik.target = null;\n\t\t\t\tik.iteration = dv.getUint32();\n\t\t\t\tik.maxAngle = dv.getFloat32();\n\t\t\t\tik.linkCount = dv.getUint32();\n\t\t\t\tik.links = [];\n\n\t\t\t\tfor ( var i = 0; i < ik.linkCount; i++ ) {\n\n\t\t\t\t\tvar link = {};\n\t\t\t\t\tlink.index = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\t\t\tlink.angleLimitation = dv.getUint8();\n\n\t\t\t\t\tif ( link.angleLimitation === 1 ) {\n\n\t\t\t\t\t\tlink.lowerLimitationAngle = dv.getFloat32Array( 3 );\n\t\t\t\t\t\tlink.upperLimitationAngle = dv.getFloat32Array( 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tik.links.push( link );\n\n\t\t\t\t}\n\n\t\t\t\tp.ik = ik;\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.boneCount = dv.getUint32();\n\n\t\tpmx.bones = [];\n\n\t\tfor ( var i = 0; i < metadata.boneCount; i++ ) {\n\n\t\t\tpmx.bones.push( parseBone() );\n\n\t\t}\n\n\t};\n\n\tvar parseMorphs = function () {\n\n\t\tvar parseMorph = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.panel = dv.getUint8();\n\t\t\tp.type = dv.getUint8();\n\t\t\tp.elementCount = dv.getUint32();\n\t\t\tp.elements = [];\n\n\t\t\tfor ( var i = 0; i < p.elementCount; i++ ) {\n\n\t\t\t\tif ( p.type === 0 ) {  // group morph\n\n\t\t\t\t\tvar m = {};\n\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.morphIndexSize );\n\t\t\t\t\tm.ratio = dv.getFloat32();\n\t\t\t\t\tp.elements.push( m );\n\n\t\t\t\t} else if ( p.type === 1 ) {  // vertex morph\n\n\t\t\t\t\tvar m = {};\n\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );\n\t\t\t\t\tm.position = dv.getFloat32Array( 3 );\n\t\t\t\t\tp.elements.push( m );\n\n\t\t\t\t} else if ( p.type === 2 ) {  // bone morph\n\n\t\t\t\t\tvar m = {};\n\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\t\t\tm.position = dv.getFloat32Array( 3 );\n\t\t\t\t\tm.rotation = dv.getFloat32Array( 4 );\n\t\t\t\t\tp.elements.push( m );\n\n\t\t\t\t} else if ( p.type === 3 ) {  // uv morph\n\n\t\t\t\t\tvar m = {};\n\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );\n\t\t\t\t\tm.uv = dv.getFloat32Array( 4 );\n\t\t\t\t\tp.elements.push( m );\n\n\t\t\t\t} else if ( p.type === 4 ) {  // additional uv1\n\n\t\t\t\t\t// TODO: implement\n\n\t\t\t\t} else if ( p.type === 5 ) {  // additional uv2\n\n\t\t\t\t\t// TODO: implement\n\n\t\t\t\t} else if ( p.type === 6 ) {  // additional uv3\n\n\t\t\t\t\t// TODO: implement\n\n\t\t\t\t} else if ( p.type === 7 ) {  // additional uv4\n\n\t\t\t\t\t// TODO: implement\n\n\t\t\t\t} else if ( p.type === 8 ) {  // material morph\n\n\t\t\t\t\tvar m = {};\n\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.materialIndexSize );\n\t\t\t\t\tm.type = dv.getUint8();\n\t\t\t\t\tm.diffuse = dv.getFloat32Array( 4 );\n\t\t\t\t\tm.specular = dv.getFloat32Array( 3 );\n\t\t\t\t\tm.shininess = dv.getFloat32();\n\t\t\t\t\tm.ambient = dv.getFloat32Array( 3 );\n\t\t\t\t\tm.edgeColor = dv.getFloat32Array( 4 );\n\t\t\t\t\tm.edgeSize = dv.getFloat32();\n\t\t\t\t\tm.textureColor = dv.getFloat32Array( 4 );\n\t\t\t\t\tm.sphereTextureColor = dv.getFloat32Array( 4 );\n\t\t\t\t\tm.toonColor = dv.getFloat32Array( 4 );\n\t\t\t\t\tp.elements.push( m );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.morphCount = dv.getUint32();\n\n\t\tpmx.morphs = [];\n\n\t\tfor ( var i = 0; i < metadata.morphCount; i++ ) {\n\n\t\t\tpmx.morphs.push( parseMorph() );\n\n\t\t}\n\n\t};\n\n\tvar parseFrames = function () {\n\n\t\tvar parseFrame = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.type = dv.getUint8();\n\t\t\tp.elementCount = dv.getUint32();\n\t\t\tp.elements = [];\n\n\t\t\tfor ( var i = 0; i < p.elementCount; i++ ) {\n\n\t\t\t\tvar e = {};\n\t\t\t\te.target = dv.getUint8();\n\t\t\t\te.index = ( e.target === 0 ) ? dv.getIndex( pmx.metadata.boneIndexSize ) : dv.getIndex( pmx.metadata.morphIndexSize );\n\t\t\t\tp.elements.push( e );\n\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.frameCount = dv.getUint32();\n\n\t\tpmx.frames = [];\n\n\t\tfor ( var i = 0; i < metadata.frameCount; i++ ) {\n\n\t\t\tpmx.frames.push( parseFrame() );\n\n\t\t}\n\n\t};\n\n\tvar parseRigidBodies = function () {\n\n\t\tvar parseRigidBody = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.boneIndex = dv.getIndex( pmx.metadata.boneIndexSize );\n\t\t\tp.groupIndex = dv.getUint8();\n\t\t\tp.groupTarget = dv.getUint16();\n\t\t\tp.shapeType = dv.getUint8();\n\t\t\tp.width = dv.getFloat32();\n\t\t\tp.height = dv.getFloat32();\n\t\t\tp.depth = dv.getFloat32();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 3 );\n\t\t\tp.weight = dv.getFloat32();\n\t\t\tp.positionDamping = dv.getFloat32();\n\t\t\tp.rotationDamping = dv.getFloat32();\n\t\t\tp.restitution = dv.getFloat32();\n\t\t\tp.friction = dv.getFloat32();\n\t\t\tp.type = dv.getUint8();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.rigidBodyCount = dv.getUint32();\n\n\t\tpmx.rigidBodies = [];\n\n\t\tfor ( var i = 0; i < metadata.rigidBodyCount; i++ ) {\n\n\t\t\tpmx.rigidBodies.push( parseRigidBody() );\n\n\t\t}\n\n\t};\n\n\tvar parseConstraints = function () {\n\n\t\tvar parseConstraint = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.name = dv.getTextBuffer();\n\t\t\tp.englishName = dv.getTextBuffer();\n\t\t\tp.type = dv.getUint8();\n\t\t\tp.rigidBodyIndex1 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );\n\t\t\tp.rigidBodyIndex2 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 3 );\n\t\t\tp.translationLimitation1 = dv.getFloat32Array( 3 );\n\t\t\tp.translationLimitation2 = dv.getFloat32Array( 3 );\n\t\t\tp.rotationLimitation1 = dv.getFloat32Array( 3 );\n\t\t\tp.rotationLimitation2 = dv.getFloat32Array( 3 );\n\t\t\tp.springPosition = dv.getFloat32Array( 3 );\n\t\t\tp.springRotation = dv.getFloat32Array( 3 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = pmx.metadata;\n\t\tmetadata.constraintCount = dv.getUint32();\n\n\t\tpmx.constraints = [];\n\n\t\tfor ( var i = 0; i < metadata.constraintCount; i++ ) {\n\n\t\t\tpmx.constraints.push( parseConstraint() );\n\n\t\t}\n\n\t};\n\n\tparseHeader();\n\tparseVertices();\n\tparseFaces();\n\tparseTextures();\n\tparseMaterials();\n\tparseBones();\n\tparseMorphs();\n\tparseFrames();\n\tparseRigidBodies();\n\tparseConstraints();\n\n\tif ( leftToRight === true ) this.leftToRightModel( pmx );\n\n\t// console.log( pmx ); // for console debug\n\n\treturn pmx;\n\n};\n\nParser.prototype.parseVmd = function ( buffer, leftToRight ) {\n\n\tvar vmd = {};\n\tvar dv = new DataViewEx( buffer );\n\n\tvmd.metadata = {};\n\tvmd.metadata.coordinateSystem = 'left';\n\n\tvar parseHeader = function () {\n\n\t\tvar metadata = vmd.metadata;\n\t\tmetadata.magic = dv.getChars( 30 );\n\n\t\tif ( metadata.magic !== 'Vocaloid Motion Data 0002' ) {\n\n\t\t\tthrow 'VMD file magic is not Vocaloid Motion Data 0002, but ' + metadata.magic;\n\n\t\t}\n\n\t\tmetadata.name = dv.getSjisStringsAsUnicode( 20 );\n\n\t};\n\n\tvar parseMotions = function () {\n\n\t\tvar parseMotion = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.boneName = dv.getSjisStringsAsUnicode( 15 );\n\t\t\tp.frameNum = dv.getUint32();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 4 );\n\t\t\tp.interpolation = dv.getUint8Array( 64 );\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = vmd.metadata;\n\t\tmetadata.motionCount = dv.getUint32();\n\n\t\tvmd.motions = [];\n\t\tfor ( var i = 0; i < metadata.motionCount; i++ ) {\n\n\t\t\tvmd.motions.push( parseMotion() );\n\n\t\t}\n\n\t};\n\n\tvar parseMorphs = function () {\n\n\t\tvar parseMorph = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.morphName = dv.getSjisStringsAsUnicode( 15 );\n\t\t\tp.frameNum = dv.getUint32();\n\t\t\tp.weight = dv.getFloat32();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = vmd.metadata;\n\t\tmetadata.morphCount = dv.getUint32();\n\n\t\tvmd.morphs = [];\n\t\tfor ( var i = 0; i < metadata.morphCount; i++ ) {\n\n\t\t\tvmd.morphs.push( parseMorph() );\n\n\t\t}\n\n\t};\n\n\tvar parseCameras = function () {\n\n\t\tvar parseCamera = function () {\n\n\t\t\tvar p = {};\n\t\t\tp.frameNum = dv.getUint32();\n\t\t\tp.distance = dv.getFloat32();\n\t\t\tp.position = dv.getFloat32Array( 3 );\n\t\t\tp.rotation = dv.getFloat32Array( 3 );\n\t\t\tp.interpolation = dv.getUint8Array( 24 );\n\t\t\tp.fov = dv.getUint32();\n\t\t\tp.perspective = dv.getUint8();\n\t\t\treturn p;\n\n\t\t};\n\n\t\tvar metadata = vmd.metadata;\n\t\tmetadata.cameraCount = dv.getUint32();\n\n\t\tvmd.cameras = [];\n\t\tfor ( var i = 0; i < metadata.cameraCount; i++ ) {\n\n\t\t\tvmd.cameras.push( parseCamera() );\n\n\t\t}\n\n\t};\n\n\tparseHeader();\n\tparseMotions();\n\tparseMorphs();\n\tparseCameras();\n\n\tif ( leftToRight === true ) this.leftToRightVmd( vmd );\n\n\t// console.log( vmd ); // for console debug\n\n\treturn vmd;\n\n};\n\nParser.prototype.parseVpd = function ( text, leftToRight ) {\n\n\tvar vpd = {};\n\n\tvpd.metadata = {};\n\tvpd.metadata.coordinateSystem = 'left';\n\n\tvpd.bones = [];\n\n\tvar commentPatternG = /\\/\\/\\w*(\\r|\\n|\\r\\n)/g;\n\tvar newlinePattern = /\\r|\\n|\\r\\n/;\n\n\tvar lines = text.replace( commentPatternG, '' ).split( newlinePattern );\n\n\tfunction throwError () {\n\n\t\tthrow 'the file seems not vpd file.';\n\n\t}\n\n\tfunction checkMagic () {\n\n\t\tif ( lines[ 0 ] !== 'Vocaloid Pose Data file' ) {\n\n\t\t\tthrowError();\n\n\t\t}\n\n\t}\n\n\tfunction parseHeader () {\n\n\t\tif ( lines.length < 4 ) {\n\n\t\t\tthrowError();\n\n\t\t}\n\n\t\tvpd.metadata.parentFile = lines[ 2 ];\n\t\tvpd.metadata.boneCount = parseInt( lines[ 3 ] );\n\n\t}\n\n\tfunction parseBones () {\n\n\t\tvar boneHeaderPattern = /^\\s*(Bone[0-9]+)\\s*\\{\\s*(.*)$/;\n\t\tvar boneVectorPattern = /^\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*;/;\n\t\tvar boneQuaternionPattern = /^\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*;/;\n\t\tvar boneFooterPattern = /^\\s*}/;\n\n\t\tvar bones = vpd.bones;\n\t\tvar n = null;\n\t\tvar v = null;\n\t\tvar q = null;\n\n\t\tfor ( var i = 4; i < lines.length; i++ ) {\n\n\t\t\tvar line = lines[ i ];\n\n\t\t\tvar result;\n\n\t\t\tresult = line.match( boneHeaderPattern );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\tif ( n !== null ) {\n\n\t\t\t\t\tthrowError();\n\n\t\t\t\t}\n\n\t\t\t\tn = result[ 2 ];\n\n\t\t\t}\n\n\t\t\tresult = line.match( boneVectorPattern );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\tif ( v !== null ) {\n\n\t\t\t\t\tthrowError();\n\n\t\t\t\t}\n\n\t\t\t\tv = [\n\n\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\tparseFloat( result[ 3 ] )\n\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t\tresult = line.match( boneQuaternionPattern );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\tif ( q !== null ) {\n\n\t\t\t\t\tthrowError();\n\n\t\t\t\t}\n\n\t\t\t\tq = [\n\n\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\tparseFloat( result[ 3 ] ),\n\t\t\t\t\tparseFloat( result[ 4 ] )\n\n\t\t\t\t];\n\n\n\t\t\t}\n\n\t\t\tresult = line.match( boneFooterPattern );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\tif ( n === null || v === null || q === null ) {\n\n\t\t\t\t\tthrowError();\n\n\t\t\t\t}\n\n\t\t\t\tbones.push( {\n\n\t\t\t\t\tname: n,\n\t\t\t\t\ttranslation: v,\n\t\t\t\t\tquaternion: q\n\n\t\t\t\t} );\n\n\t\t\t\tn = null;\n\t\t\t\tv = null;\n\t\t\t\tq = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( n !== null || v !== null || q !== null ) {\n\n\t\t\tthrowError();\n\n\t\t}\n\n\t}\n\n\tcheckMagic();\n\tparseHeader();\n\tparseBones();\n\n\tif ( leftToRight === true ) this.leftToRightVpd( vpd );\n\n\t// console.log( vpd );  // for console debug\n\n\treturn vpd;\n\n};\n\nParser.prototype.mergeVmds = function ( vmds ) {\n\n\tvar v = {};\n\tv.metadata = {};\n\tv.metadata.name = vmds[ 0 ].metadata.name;\n\tv.metadata.coordinateSystem = vmds[ 0 ].metadata.coordinateSystem;\n\tv.metadata.motionCount = 0;\n\tv.metadata.morphCount = 0;\n\tv.metadata.cameraCount = 0;\n\tv.motions = [];\n\tv.morphs = [];\n\tv.cameras = [];\n\n\tfor ( var i = 0; i < vmds.length; i++ ) {\n\n\t\tvar v2 = vmds[ i ];\n\n\t\tv.metadata.motionCount += v2.metadata.motionCount;\n\t\tv.metadata.morphCount += v2.metadata.morphCount;\n\t\tv.metadata.cameraCount += v2.metadata.cameraCount;\n\n\t\tfor ( var j = 0; j < v2.metadata.motionCount; j++ ) {\n\n\t\t\tv.motions.push( v2.motions[ j ] );\n\n\t\t}\n\n\t\tfor ( var j = 0; j < v2.metadata.morphCount; j++ ) {\n\n\t\t\tv.morphs.push( v2.morphs[ j ] );\n\n\t\t}\n\n\t\tfor ( var j = 0; j < v2.metadata.cameraCount; j++ ) {\n\n\t\t\tv.cameras.push( v2.cameras[ j ] );\n\n\t\t}\n\n\t}\n\n\treturn v;\n\n};\n\nParser.prototype.leftToRightModel = function ( model ) {\n\n\tif ( model.metadata.coordinateSystem === 'right' ) {\n\n\t\treturn;\n\n\t}\n\n\tmodel.metadata.coordinateSystem = 'right';\n\n\tvar helper = new DataCreationHelper();\n\n\tfor ( var i = 0; i < model.metadata.vertexCount; i++ ) {\n\n\t\thelper.leftToRightVector3( model.vertices[ i ].position );\n\t\thelper.leftToRightVector3( model.vertices[ i ].normal );\n\n\t}\n\n\tfor ( var i = 0; i < model.metadata.faceCount; i++ ) {\n\n\t\thelper.leftToRightIndexOrder( model.faces[ i ].indices );\n\n\t}\n\n\tfor ( var i = 0; i < model.metadata.boneCount; i++ ) {\n\n\t\thelper.leftToRightVector3( model.bones[ i ].position );\n\n\t}\n\n\t// TODO: support other morph for PMX\n\tfor ( var i = 0; i < model.metadata.morphCount; i++ ) {\n\n\t\tvar m = model.morphs[ i ];\n\n\t\tif ( model.metadata.format === 'pmx' && m.type !== 1 ) {\n\n\t\t\t// TODO: implement\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tfor ( var j = 0; j < m.elements.length; j++ ) {\n\n\t\t\thelper.leftToRightVector3( m.elements[ j ].position );\n\n\t\t}\n\n\t}\n\n\tfor ( var i = 0; i < model.metadata.rigidBodyCount; i++ ) {\n\n\t\thelper.leftToRightVector3( model.rigidBodies[ i ].position );\n\t\thelper.leftToRightEuler( model.rigidBodies[ i ].rotation );\n\n\t}\n\n\tfor ( var i = 0; i < model.metadata.constraintCount; i++ ) {\n\n\t\thelper.leftToRightVector3( model.constraints[ i ].position );\n\t\thelper.leftToRightEuler( model.constraints[ i ].rotation );\n\t\thelper.leftToRightVector3Range( model.constraints[ i ].translationLimitation1, model.constraints[ i ].translationLimitation2 );\n\t\thelper.leftToRightEulerRange( model.constraints[ i ].rotationLimitation1, model.constraints[ i ].rotationLimitation2 );\n\n\t}\n\n};\n\nParser.prototype.leftToRightVmd = function ( vmd ) {\n\n\tif ( vmd.metadata.coordinateSystem === 'right' ) {\n\n\t\treturn;\n\n\t}\n\n\tvmd.metadata.coordinateSystem = 'right';\n\n\tvar helper = new DataCreationHelper();\n\n\tfor ( var i = 0; i < vmd.metadata.motionCount; i++ ) {\n\n\t\thelper.leftToRightVector3( vmd.motions[ i ].position );\n\t\thelper.leftToRightQuaternion( vmd.motions[ i ].rotation );\n\n\t}\n\n\tfor ( var i = 0; i < vmd.metadata.cameraCount; i++ ) {\n\n\t\thelper.leftToRightVector3( vmd.cameras[ i ].position );\n\t\thelper.leftToRightEuler( vmd.cameras[ i ].rotation );\n\n\t}\n\n};\n\nParser.prototype.leftToRightVpd = function ( vpd ) {\n\n\tif ( vpd.metadata.coordinateSystem === 'right' ) {\n\n\t\treturn;\n\n\t}\n\n\tvpd.metadata.coordinateSystem = 'right';\n\n\tvar helper = new DataCreationHelper();\n\n\tfor ( var i = 0; i < vpd.bones.length; i++ ) {\n\n\t\thelper.leftToRightVector3( vpd.bones[ i ].translation );\n\t\thelper.leftToRightQuaternion( vpd.bones[ i ].quaternion );\n\n\t}\n\n};\n\nvar MMDParser = {\n  CharsetEncoder: CharsetEncoder,\n  Parser: Parser\n};\n\nexport { MMDParser, CharsetEncoder, Parser };\n", "///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KHR_SUPERCOMPRESSION_NONE = 0;\nexport const KHR_SUPERCOMPRESSION_BASISLZ = 1;\nexport const KHR_SUPERCOMPRESSION_ZSTD = 2;\nexport const KHR_SUPERCOMPRESSION_ZLIB = 3;\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\n\nexport const KHR_DF_MODEL_UNSPECIFIED = 0;\nexport const KHR_DF_MODEL_RGBSDA = 1;\n// ...\nexport const KHR_DF_MODEL_ETC1 = 160;\nexport const KHR_DF_MODEL_ETC2 = 161;\nexport const KHR_DF_MODEL_ASTC = 162;\nexport const KHR_DF_MODEL_ETC1S = 163;\nexport const KHR_DF_MODEL_UASTC = 166;\n\nexport const KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nexport const KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\n\nexport const KHR_DF_TRANSFER_UNSPECIFIED = 0;\nexport const KHR_DF_TRANSFER_LINEAR = 1;\nexport const KHR_DF_TRANSFER_SRGB = 2;\nexport const KHR_DF_TRANSFER_ITU = 3;\nexport const KHR_DF_TRANSFER_NTSC = 4;\nexport const KHR_DF_TRANSFER_SLOG = 5;\nexport const KHR_DF_TRANSFER_SLOG2 = 6;\nexport const KHR_DF_TRANSFER_BT1886 = 7;\nexport const KHR_DF_TRANSFER_HLG_OETF = 8;\nexport const KHR_DF_TRANSFER_HLG_EOTF = 9;\nexport const KHR_DF_TRANSFER_PQ_EOTF = 10;\nexport const KHR_DF_TRANSFER_PQ_OETF = 11;\nexport const KHR_DF_TRANSFER_DCIP3 = 12;\nexport const KHR_DF_TRANSFER_PAL_OETF = 13;\nexport const KHR_DF_TRANSFER_PAL625_EOTF = 14;\nexport const KHR_DF_TRANSFER_ST240 = 15;\nexport const KHR_DF_TRANSFER_ACESCC = 16;\nexport const KHR_DF_TRANSFER_ACESCCT = 17;\nexport const KHR_DF_TRANSFER_ADOBERGB = 18;\n\nexport const KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nexport const KHR_DF_PRIMARIES_BT709 = 1;\nexport const KHR_DF_PRIMARIES_BT601_EBU = 2;\nexport const KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nexport const KHR_DF_PRIMARIES_BT2020 = 4;\nexport const KHR_DF_PRIMARIES_CIEXYZ = 5;\nexport const KHR_DF_PRIMARIES_ACES = 6;\nexport const KHR_DF_PRIMARIES_ACESCC = 7;\nexport const KHR_DF_PRIMARIES_NTSC1953 = 8;\nexport const KHR_DF_PRIMARIES_PAL525 = 9;\nexport const KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nexport const KHR_DF_PRIMARIES_ADOBERGB = 11;\n\nexport const KHR_DF_CHANNEL_RGBSDA_RED = 0;\nexport const KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nexport const KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nexport const KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nexport const KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nexport const KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\n\nexport const KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nexport const KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nexport const KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nexport const KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10;\n\n///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\n\nexport const VK_FORMAT_UNDEFINED = 0;\nexport const VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nexport const VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nexport const VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nexport const VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nexport const VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nexport const VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nexport const VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nexport const VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nexport const VK_FORMAT_R8_UNORM = 9;\nexport const VK_FORMAT_R8_SNORM = 10;\nexport const VK_FORMAT_R8_UINT = 13;\nexport const VK_FORMAT_R8_SINT = 14;\nexport const VK_FORMAT_R8_SRGB = 15;\nexport const VK_FORMAT_R8G8_UNORM = 16;\nexport const VK_FORMAT_R8G8_SNORM = 17;\nexport const VK_FORMAT_R8G8_UINT = 20;\nexport const VK_FORMAT_R8G8_SINT = 21;\nexport const VK_FORMAT_R8G8_SRGB = 22;\nexport const VK_FORMAT_R8G8B8_UNORM = 23;\nexport const VK_FORMAT_R8G8B8_SNORM = 24;\nexport const VK_FORMAT_R8G8B8_UINT = 27;\nexport const VK_FORMAT_R8G8B8_SINT = 28;\nexport const VK_FORMAT_R8G8B8_SRGB = 29;\nexport const VK_FORMAT_B8G8R8_UNORM = 30;\nexport const VK_FORMAT_B8G8R8_SNORM = 31;\nexport const VK_FORMAT_B8G8R8_UINT = 34;\nexport const VK_FORMAT_B8G8R8_SINT = 35;\nexport const VK_FORMAT_B8G8R8_SRGB = 36;\nexport const VK_FORMAT_R8G8B8A8_UNORM = 37;\nexport const VK_FORMAT_R8G8B8A8_SNORM = 38;\nexport const VK_FORMAT_R8G8B8A8_UINT = 41;\nexport const VK_FORMAT_R8G8B8A8_SINT = 42;\nexport const VK_FORMAT_R8G8B8A8_SRGB = 43;\nexport const VK_FORMAT_B8G8R8A8_UNORM = 44;\nexport const VK_FORMAT_B8G8R8A8_SNORM = 45;\nexport const VK_FORMAT_B8G8R8A8_UINT = 48;\nexport const VK_FORMAT_B8G8R8A8_SINT = 49;\nexport const VK_FORMAT_B8G8R8A8_SRGB = 50;\nexport const VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nexport const VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nexport const VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nexport const VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nexport const VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nexport const VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nexport const VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nexport const VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nexport const VK_FORMAT_R16_UNORM = 70;\nexport const VK_FORMAT_R16_SNORM = 71;\nexport const VK_FORMAT_R16_UINT = 74;\nexport const VK_FORMAT_R16_SINT = 75;\nexport const VK_FORMAT_R16_SFLOAT = 76;\nexport const VK_FORMAT_R16G16_UNORM = 77;\nexport const VK_FORMAT_R16G16_SNORM = 78;\nexport const VK_FORMAT_R16G16_UINT = 81;\nexport const VK_FORMAT_R16G16_SINT = 82;\nexport const VK_FORMAT_R16G16_SFLOAT = 83;\nexport const VK_FORMAT_R16G16B16_UNORM = 84;\nexport const VK_FORMAT_R16G16B16_SNORM = 85;\nexport const VK_FORMAT_R16G16B16_UINT = 88;\nexport const VK_FORMAT_R16G16B16_SINT = 89;\nexport const VK_FORMAT_R16G16B16_SFLOAT = 90;\nexport const VK_FORMAT_R16G16B16A16_UNORM = 91;\nexport const VK_FORMAT_R16G16B16A16_SNORM = 92;\nexport const VK_FORMAT_R16G16B16A16_UINT = 95;\nexport const VK_FORMAT_R16G16B16A16_SINT = 96;\nexport const VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nexport const VK_FORMAT_R32_UINT = 98;\nexport const VK_FORMAT_R32_SINT = 99;\nexport const VK_FORMAT_R32_SFLOAT = 100;\nexport const VK_FORMAT_R32G32_UINT = 101;\nexport const VK_FORMAT_R32G32_SINT = 102;\nexport const VK_FORMAT_R32G32_SFLOAT = 103;\nexport const VK_FORMAT_R32G32B32_UINT = 104;\nexport const VK_FORMAT_R32G32B32_SINT = 105;\nexport const VK_FORMAT_R32G32B32_SFLOAT = 106;\nexport const VK_FORMAT_R32G32B32A32_UINT = 107;\nexport const VK_FORMAT_R32G32B32A32_SINT = 108;\nexport const VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nexport const VK_FORMAT_R64_UINT = 110;\nexport const VK_FORMAT_R64_SINT = 111;\nexport const VK_FORMAT_R64_SFLOAT = 112;\nexport const VK_FORMAT_R64G64_UINT = 113;\nexport const VK_FORMAT_R64G64_SINT = 114;\nexport const VK_FORMAT_R64G64_SFLOAT = 115;\nexport const VK_FORMAT_R64G64B64_UINT = 116;\nexport const VK_FORMAT_R64G64B64_SINT = 117;\nexport const VK_FORMAT_R64G64B64_SFLOAT = 118;\nexport const VK_FORMAT_R64G64B64A64_UINT = 119;\nexport const VK_FORMAT_R64G64B64A64_SINT = 120;\nexport const VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nexport const VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nexport const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nexport const VK_FORMAT_D16_UNORM = 124;\nexport const VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nexport const VK_FORMAT_D32_SFLOAT = 126;\nexport const VK_FORMAT_S8_UINT = 127;\nexport const VK_FORMAT_D16_UNORM_S8_UINT = 128;\nexport const VK_FORMAT_D24_UNORM_S8_UINT = 129;\nexport const VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nexport const VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nexport const VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nexport const VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nexport const VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nexport const VK_FORMAT_BC2_UNORM_BLOCK = 135;\nexport const VK_FORMAT_BC2_SRGB_BLOCK = 136;\nexport const VK_FORMAT_BC3_UNORM_BLOCK = 137;\nexport const VK_FORMAT_BC3_SRGB_BLOCK = 138;\nexport const VK_FORMAT_BC4_UNORM_BLOCK = 139;\nexport const VK_FORMAT_BC4_SNORM_BLOCK = 140;\nexport const VK_FORMAT_BC5_UNORM_BLOCK = 141;\nexport const VK_FORMAT_BC5_SNORM_BLOCK = 142;\nexport const VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nexport const VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nexport const VK_FORMAT_BC7_UNORM_BLOCK = 145;\nexport const VK_FORMAT_BC7_SRGB_BLOCK = 146;\nexport const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nexport const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nexport const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nexport const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nexport const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nexport const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nexport const VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nexport const VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nexport const VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nexport const VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nexport const VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nexport const VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nexport const VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nexport const VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nexport const VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nexport const VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nexport const VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nexport const VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nexport const VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nexport const VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nexport const VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nexport const VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nexport const VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nexport const VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nexport const VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nexport const VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nexport const VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nexport const VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nexport const VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nexport const VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nexport const VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nexport const VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nexport const VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nexport const VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nexport const VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nexport const VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nexport const VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nexport const VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nexport const VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nexport const VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nexport const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nexport const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nexport const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nexport const VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nexport const VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nexport const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nexport const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nexport const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nexport const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nexport const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nexport const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nexport const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nexport const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nexport const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nexport const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nexport const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nexport const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nexport const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nexport const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nexport const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nexport const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nexport const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nexport const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nexport const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nexport const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nexport const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nexport const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nexport const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nexport const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nexport const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nexport const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nexport const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n", "import {\n\tKHR_DF_FLAG_ALPHA_STRAIGHT,\n\tKHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\tKHR_DF_MODEL_UNSPECIFIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_DF_VENDORID_KHRONOS,\n\tKHR_DF_VERSION,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tVK_FORMAT_UNDEFINED,\n} from './constants';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [\n\t\t{\n\t\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\t\tdescriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\t\t\tdescriptorBlockSize: 0,\n\t\t\tversionNumber: KHR_DF_VERSION,\n\t\t\tcolorModel: KHR_DF_MODEL_UNSPECIFIED,\n\t\t\tcolorPrimaries: KHR_DF_PRIMARIES_BT709,\n\t\t\ttransferFunction: KHR_DF_TRANSFER_SRGB,\n\t\t\tflags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n\t\t\ttexelBlockDimension: [0, 0, 0, 0],\n\t\t\tbytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n\t\t\tsamples: [],\n\t\t},\n\t];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: { [key: string]: string | Uint8Array } = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n}\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\t/** @deprecated Inferred. */\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: [number, number, number, number];\n\tbytesPlane: [number, number, number, number, number, number, number, number];\n\tsamples: KTX2BasicFormatSample[];\n}\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\t/** @deprecated Renamed to 'channelType'. */\n\tchannelID?: number;\n\tchannelType: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n}\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n}\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n}\n", "export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + 2 ** 32 * right;\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_nextInt32() {\n\t\tconst value = this._dataView.getInt32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n\t}\n}\n", "///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a,\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n", "/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat(buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}\n", "import { BufferReader } from './buffer-reader';\nimport { KHR_DF_SAMPLE_DATATYPE_SIGNED } from './constants';\nimport { KTX2_ID } from './constants-internal';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (\n\t\tid[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(\n\t\t\t\tdata.buffer,\n\t\t\t\tdata.byteOffset + levelReader._nextUint64(),\n\t\t\t\tlevelReader._nextUint64()\n\t\t\t),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i++) {\n\t\tconst sample = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelType: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: -Infinity,\n\t\t\tsampleUpper: Infinity,\n\t\t};\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tsample.sampleLower = dfdReader._nextInt32();\n\t\t\tsample.sampleUpper = dfdReader._nextInt32();\n\t\t} else {\n\t\t\tsample.sampleLower = dfdReader._nextUint32();\n\t\t\tsample.sampleUpper = dfdReader._nextUint32();\n\t\t}\n\n\t\tdfd.samples[i] = sample;\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n", "import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants-internal';\nimport { KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_SAMPLE_DATATYPE_SIGNED } from './constants';\nimport { KTX2Container } from './container';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {\n\tkeepWriter?: boolean;\n}\nconst DEFAULT_OPTIONS: WriteOptions = { keepWriter: false };\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = { ...DEFAULT_OPTIONS, ...options };\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = { ...container.keyValue, KTXwriter: KTX_WRITER };\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? 4 - (kvByteLength % 4) : 0; // align(4)\n\t\tkeyValueData.push(\n\t\t\tconcat([\n\t\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\t\tkeyData,\n\t\t\t\tNUL,\n\t\t\t\tvalueData,\n\t\t\t\tNUL,\n\t\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t\t])\n\t\t);\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (\n\t\tcontainer.dataFormatDescriptor.length !== 1 ||\n\t\tcontainer.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT\n\t) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\tconst descriptorBlockSize = 24 + dfd.samples.length * 16;\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tif (!Array.isArray(dfd.texelBlockDimension)) {\n\t\tthrow new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n\t}\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension[0]);\n\tdfdView.setUint8(17, dfd.texelBlockDimension[1]);\n\tdfdView.setUint8(18, dfd.texelBlockDimension[2]);\n\tdfdView.setUint8(19, dfd.texelBlockDimension[3]);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tif (sample.channelID) {\n\t\t\tthrow new Error('channelID has been renamed to channelType.');\n\t\t}\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tdfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t} else {\n\t\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(\n\t\tconcat([\n\t\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\t\theaderBuffer,\n\t\t\tlevelIndex.buffer,\n\t\t\tdfdBuffer,\n\t\t\tkvdBuffer,\n\t\t\tsgdByteOffset > 0\n\t\t\t\t? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n\t\t\t\t: new ArrayBuffer(0),\n\t\t\tsgdBuffer,\n\t\t\t...levelData,\n\t\t])\n\t);\n}\n", "interface DecoderExports {\n\tmemory: Uint8Array;\n\n\tZSTD_findDecompressedSize: (compressedPtr: number, compressedSize: number) => BigInt;\n\tZSTD_decompress: (uncompressedPtr: number, uncompressedSize: number, compressedPtr: number, compressedSize: number) => number;\n\tmalloc: (ptr: number) => number;\n\tfree: (ptr: number) => void;\n}\n\nlet init: Promise<void>;\nlet instance: {exports: DecoderExports};\nlet heap: Uint8Array;\n\nconst IMPORT_OBJECT = {\n\n\tenv: {\n\n\t\temscripten_notify_memory_growth: function ( index: number ): void {\n\n\t\t\theap = new Uint8Array( instance.exports.memory.buffer );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n * ZSTD (Zstandard) decoder.\n */\nexport class ZSTDDecoder {\n\n\tinit (): Promise<void> {\n\n\t\tif ( init ) return init;\n\n\t\tif ( typeof fetch !== 'undefined' ) {\n\n\t\t\t// Web.\n\n\t\t\tinit = fetch( 'data:application/wasm;base64,' + wasm )\n\t\t\t\t.then( ( response ) => response.arrayBuffer() )\n\t\t\t\t.then( ( arrayBuffer ) => WebAssembly.instantiate( arrayBuffer, IMPORT_OBJECT ) )\n\t\t\t\t.then( this._init );\n\n\t\t} else {\n\n\t\t\t// Node.js.\n\n\t\t\tinit = WebAssembly\n\t\t\t\t.instantiate( Buffer.from( wasm, 'base64' ), IMPORT_OBJECT )\n\t\t\t\t.then( this._init );\n\n\t\t}\n\n\t\treturn init;\n\n\t}\n\n\t_init ( result: WebAssembly.WebAssemblyInstantiatedSource ): void {\n\n\t\tinstance = result.instance as unknown as { exports: DecoderExports };\n\n\t\tIMPORT_OBJECT.env.emscripten_notify_memory_growth( 0 ); // initialize heap.\n\n\t}\n\n\tdecode ( array: Uint8Array, uncompressedSize = 0 ): Uint8Array {\n\n\t\tif ( ! instance ) throw new Error( `ZSTDDecoder: Await .init() before decoding.` );\n\n\t\t// Write compressed data into WASM memory.\n\t\tconst compressedSize = array.byteLength;\n\t\tconst compressedPtr = instance.exports.malloc( compressedSize );\n\t\theap.set( array, compressedPtr );\n\n\t\t// Decompress into WASM memory.\n\t\tuncompressedSize = uncompressedSize || Number( instance.exports.ZSTD_findDecompressedSize( compressedPtr, compressedSize ) );\n\t\tconst uncompressedPtr = instance.exports.malloc( uncompressedSize );\n\t\tconst actualSize = instance.exports.ZSTD_decompress( uncompressedPtr, uncompressedSize, compressedPtr, compressedSize );\n\n\t\t// Read decompressed data and free WASM memory.\n\t\tconst dec = heap.slice( uncompressedPtr, uncompressedPtr + actualSize );\n\t\tinstance.exports.free( compressedPtr );\n\t\tinstance.exports.free( uncompressedPtr );\n\n\t\treturn dec;\n\n\t}\n\n}\n\n/**\n * BSD License\n *\n * For Zstandard software\n *\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n *  * Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n *  * Neither the name Facebook nor the names of its contributors may be used to\n *    endorse or promote products derived from this software without specific\n *    prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n"],
  "mappings": "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",
  "names": ["l", "_a", "_b", "i", "td", "_a", "fl", "Deflate", "AsyncDeflate", "Inflate", "AsyncInflate", "Gzip", "AsyncGzip", "Gunzip", "AsyncGunzip", "Zlib", "AsyncZlib", "Unzlib", "AsyncUnzlib", "Decompress", "AsyncDecompress", "DecodeUTF8", "_a", "ch", "EncodeUTF8", "_a", "fl", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "Zip", "fl", "_a", "_b", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "Unzip", "_a", "dat", "final", "i", "KHR_SUPERCOMPRESSION_NONE", "KHR_SUPERCOMPRESSION_ZSTD", "KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT", "KHR_DF_VENDORID_KHRONOS", "KHR_DF_VERSION", "KHR_DF_MODEL_UNSPECIFIED", "KHR_DF_FLAG_ALPHA_STRAIGHT", "KHR_DF_FLAG_ALPHA_PREMULTIPLIED", "KHR_DF_TRANSFER_SRGB", "KHR_DF_PRIMARIES_BT709", "KHR_DF_SAMPLE_DATATYPE_SIGNED", "VK_FORMAT_UNDEFINED", "VK_FORMAT_R8_UNORM", "VK_FORMAT_R8_SRGB", "VK_FORMAT_R8G8_UNORM", "VK_FORMAT_R8G8_SRGB", "VK_FORMAT_R8G8B8A8_UNORM", "VK_FORMAT_R8G8B8A8_SRGB", "VK_FORMAT_R16_SFLOAT", "VK_FORMAT_R16G16_SFLOAT", "VK_FORMAT_R16G16B16A16_SFLOAT", "VK_FORMAT_R32_SFLOAT", "VK_FORMAT_R32G32_SFLOAT", "VK_FORMAT_R32G32B32A32_SFLOAT", "KTX2Container", "vkFormat", "VK_FORMAT_UNDEFINED", "typeSize", "pixelWidth", "pixelHeight", "pixelDepth", "layerCount", "faceCount", "supercompressionScheme", "KHR_SUPERCOMPRESSION_NONE", "levels", "dataFormatDescriptor", "vendorId", "KHR_DF_VENDORID_KHRONOS", "descriptorType", "KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT", "descriptorBlockSize", "versionNumber", "KHR_DF_VERSION", "colorModel", "KHR_DF_MODEL_UNSPECIFIED", "colorPrimaries", "KHR_DF_PRIMARIES_BT709", "transferFunction", "KHR_DF_TRANSFER_SRGB", "flags", "KHR_DF_FLAG_ALPHA_STRAIGHT", "texelBlockDimension", "bytesPlane", "samples", "keyValue", "globalData", "BufferReader", "constructor", "data", "byteOffset", "byteLength", "littleEndian", "_dataView", "_littleEndian", "_offset", "DataView", "buffer", "_nextUint8", "value", "getUint8", "_nextUint16", "getUint16", "_nextUint32", "getUint32", "_nextUint64", "left", "right", "_nextInt32", "getInt32", "_skip", "bytes", "_scan", "maxByteLength", "term", "Uint8Array", "NUL", "Uint8Array", "KTX2_ID", "decodeText", "buffer", "TextDecoder", "decode", "Buffer", "from", "toString", "read", "data", "id", "Uint8Array", "buffer", "byteOffset", "KTX2_ID", "length", "Error", "container", "KTX2Container", "headerByteLength", "Uint32Array", "BYTES_PER_ELEMENT", "headerReader", "BufferReader", "vkFormat", "_nextUint32", "typeSize", "pixelWidth", "pixelHeight", "pixelDepth", "layerCount", "faceCount", "levelCount", "supercompressionScheme", "dfdByteOffset", "dfdByteLength", "kvdByteOffset", "kvdByteLength", "sgdByteOffset", "_nextUint64", "sgdByteLength", "levelByteLength", "levelReader", "i", "levels", "push", "levelData", "uncompressedByteLength", "dfdReader", "dfd", "vendorId", "_skip", "_nextUint16", "descriptorType", "versionNumber", "descriptorBlockSize", "colorModel", "_nextUint8", "colorPrimaries", "transferFunction", "flags", "texelBlockDimension", "bytesPlane", "samples", "sampleStart", "sampleWords", "numSamples", "sample", "bitOffset", "bitLength", "channelType", "samplePosition", "sampleLower", "sampleUpper", "Infinity", "KHR_DF_SAMPLE_DATATYPE_SIGNED", "_nextInt32", "dataFormatDescriptor", "kvdReader", "_offset", "keyValueByteLength", "keyData", "_scan", "key", "decodeText", "valueData", "byteLength", "keyValue", "match", "sgdReader", "endpointCount", "selectorCount", "endpointsByteLength", "selectorsByteLength", "tablesByteLength", "extendedByteLength", "imageDescs", "imageFlags", "rgbSliceByteOffset", "rgbSliceByteLength", "alphaSliceByteOffset", "alphaSliceByteLength", "endpointsByteOffset", "selectorsByteOffset", "tablesByteOffset", "extendedByteOffset", "endpointsData", "selectorsData", "tablesData", "extendedData", "globalData", "init", "instance", "heap", "IMPORT_OBJECT", "env", "emscripten_notify_memory_growth", "index", "Uint8Array", "exports", "memory", "buffer", "ZSTDDecoder", "fetch", "wasm", "then", "response", "arrayBuffer", "WebAssembly", "instantiate", "this", "_init", "Buffer", "from", "result", "decode", "array", "uncompressedSize", "Error", "compressedSize", "byteLength", "compressedPtr", "malloc", "set", "Number", "ZSTD_findDecompressedSize", "uncompressedPtr", "actualSize", "ZSTD_decompress", "dec", "slice", "free"]
}
